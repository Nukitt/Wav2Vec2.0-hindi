list it does not mean that the functiones that are defined for list are actually lvegal f,list it does not mean that the functions that are defined for lists are actually legal for
you would have for instance a function like say push define and it will have w parameters,you would have for instance a function like say push define and it will have two parameters
l passot now this callls this function iit which is wy it is called init oit,"value l passed to it now this calls this function init which is why it is called init. so, init"
delete max define for heaps but it is like we have the separate copy of this cton,"delete max define for heaps, but it is like we have the separate copy of this function"
max no matter how the priority queue is actually implemented internally the delate max hol,max no matter how the priority queue is actually implemented internally the delete max should
they ave a concurete data types which we use in our program,they have a concrete data types which we use in our program. 
onot want to look at the implementation and ask whether it is a list or not because we,"not want to look at the implementation and ask whether it is a list or not, because we"
weeks lectures let us revisit what we mean by a data structure,weeks' lectures. let us revisit what we lean by a data structure.
u o the important thing is that we would like,u. the important thing is that we would like
i e plementation but we definitely do not want the implementation to determine the,"to the implementation, but we definitely do not want the implementation to determine how"
that the user sees as a sequence of inserts and delete max the user does not see any difference,that the user sees as a sequence of inserts and delete max the user does not see any difference
a perception that the one is faster than the other but the actual correctness of the implementation,"a perception that the one is faster than the other, but the actual correctness of the implementation"
for input which is shown as a kind of aa thing at the bottom here we have the slot for input,for input which is shown as a kind of a thing at the bottom here we have the slot for input.
ndwe have the way to receivve information about the state of the stack so we cand imagine,and we have the way to receive information about the state of the stack. so we can imagine
eee we only want those operations which the externaly visible interface,"operations, we only want those operations which the externally visible interface or"
the buttons in this case of the black box picture allow us to use,the buttons in this case of the black box picture allow us to use.
se if we wall find de to be an empty dictionary then we can use a function such as d dot values,likewise if we define d to be an empty dictionary then we can use a function such as d dot values
to get the list of vvalues currently stored but we cannot taipulay d as a list,"to get the list of values currently stored, but we cannot manipulate d as a list. so,"
we cannot say d dot append it will give us an error python uses the type information,we cannot say d dot append it will give us an error. python uses the type information
whose behavior is specified without telling us anything about the internal implementation,whose behavior is specified without telling us anything about the internal implementation.
and remove the element at the head of the quueue using the function remove q and for,and remove the element at the head of the queue using the function remove q. and for
possibility as factors we do not have to look at aany number becaus an  because it canot,"possibility as factors we don't have to look at any number bigger than m, because it cannot"
first step in our arithm says to compute the factors of [UNK] so by our observation,"first step in our algorithm says to compute the factors of 14. so, by our observation"
[UNK] did[UNK] ecause  di[UNK]  no remainder now [UNK] does not d,"14 dived by 2 is 7 with no remainder. now 3 does not divide, 4 does not divide, 5 does"
[UNK] divides because [UNK] [UNK]s are [UNK][UNK] then again [UNK] does not divide but [UNK] does then again,"7 divides, because 7 9's are 63. then again 8 does not divides, but 9 does. then again"
a  gap of numbers which do ot divid and then  tdoes ivi woe caus n [UNK] s,"there are large gap of numbers, which do not divide. and then 21 does divide, because 21"
of [UNK] and then finally we find that the last factor that we have is [UNK][UNK] so if,"3's are 63. and then finally, we find that the last factor that we have is 63. so, if"
u here is a very simple way we just go through one of the list say the list of factor,but here is a very simple way. we just go through one of the lists say the list of factors
of [UNK][UNK] and for each item in the list we check fit is a factor of [UNK][UNK],of 14 and for each item in the list we check it is a factor of 63.
in this way we have systematically gone through [UNK] [UNK] [UNK] and [UNK][UNK]  and concluded that offthese,"in this way we have systematically gone through 1, 2, 7 and 14 and concluded that of these"
extracted the largest one and this in fact is our gcd so this is an example of how this,"extracted the largest one and this in fact, is our gcd. this is an example of how this"
ad having done this now we want to ri un the largest value of the list of common factors,and having done this now we want to return the largest value of the list of common factors.
fm and fn were constructed from [UNK] to m and [UNK] to n the largest value will also be the,"fm and fn, where constructed from 1 to m and 1 to n the largest value will also be the"
largest of common factor betwen these two lists soerin we had three abstract statements,"largest of common factor between these two lists. so, earlier we had three abstract statements"
this is a definition so def for definition of a function gcd m,"this is a definition, so def for definition of a function gcd m, n."
the empty list now we need to test every value in the range [UNK] to n,the empty list. now we need to test every value in the range 1 to n.
thrt nstxtptltytototg thr utshtet tit'tititet tst t'tne ghlt k[UNK]tpt t tatlt tet t tztztoh tort,"of peculiarity of python this returns not the range you except, but one less. so, if"
the experience of this groop of people you can describe this algorithm at different level,"the experience of this group of people, you can describe this algorithm at different levels"
then we will append i to the list ffend we will a it to the right ppend i,"is 0 then we will append i to the list fn, we will add it to the right append is the"
we just say that for each i from [UNK] to m add i to fm if i divides n and now we hae done,we just said that for each i from 1 to m add i to fm if i divides m and now we have done
in that range we have checked ii is a divisor and then add t,in that range we have checked it is a divisor and then add it.
factors of n for every j in this range if it divides we append it now at this point,"factors of n for every j in for this range if it divides we append it. now, at this point"
throughout it ust take a list and add a value which value we ad the value that we are,throughout. just take a list and add a value. which value? we add the value that we are
pythorn has a shortcut which say hat ou want to count from the right then we coun,python has a shortcut which says that you want to count from the right then we count
e numbers is minus [UNK] mius no n o it s return the mius [UNK]t l,"the numbers as minus 1, minus 2 and so on. so, it says return the minus 1'th element"
that hare are other syntactic things here so there ar for example you have these punctuation,"that are other syntactic things here, so there are for example, you have these punctuation"
hes are all features that make python programs a litle easier to read and write in the program,these are all features that make python programs a little easier to read and write then programs
first important point is that we neeed a way to keep track of intermediate values s,"first important point is that we need a way to keep track of intermediate values. so,"
all the factors i r  s these are all ways of keeping track of intermediate values th,"all the factors in cf. so, these are all ways of keeping track of intermediate values. the"
for example m n are numbers similarly i j and f at each step are numbers so these,"for example, m n are numbers, similarly i, j and f at each step are numbers. so, these"
e are important because it would be very dificult to write a program if we had to keep producing,"are important, because it would be very difficult to write a program if we had to keep producing"
of m regardluss of how bi ms these names ndenote can be denott single values,of m regardless of how big m is. these names can denote can be denote single values or
a new factor of n we do nt ant to through ay old factor we want to take the existing,a new factor of n we do not want to through any old factor we want to take the existing
the name fn to a new name which takes the old name and sicks an i at the end of it,the name fn to a new name which takes the old name and sticks an i at the end of it.
and in terms of that capability we describe the algrithm itself,"and in terms of that capability, we describe the algorithm itself."
of i multiply it by t and assigning it to i so we will see this as we go along,"value of i, multiply it by two and assign it to i. so, we will see this as we go along,"
but assignment can either assign a completely new value or o could update the value usin g,but assignment can either assign a completely new value or you could update the value using
the other part that we need to note is how we execute steps so as  sat at the begn,"the other part that we are need to note is how we execute steps. so, we said at the beginning"
for instance we have to check for every possible factor from [UNK] to m if it pogvides m and hen,for instance we have to check for every possible factor from 1 to m if it divides m and then
is [UNK] if the remainder ofm divided by is [UNK] then append so the step append i to fm,"is 0, if the remainder of m divided by a is 0 then append. so, the step append i to fm"
we have repeated steps e same thing comne again and again and we have conditional,we have repeated steps where same thing done again and again. and they have conditionals
iio this is a good way of illustrating progr,but essentially this is a good way of illustrating programming. 
ao of computation for instance if we use a spreadsheet to arrange information and,"realm of computation. for instance, if we use a spreadsheet to arrange information and"
perform some task an algorithm consists of a sequence of steps which think of,perform some task. an algorithm consists of a sequence of steps which can we think of
try to book a flight from one city to another city it will offer to arrange the flig,try to book a flight from one city to another city it will offer to arrange the flights
nd get from a to b and b among all the dfent ways we can get from a to b we want the,"get from a to b, and b among all the ways we can get from a to b we want the optimum"
that is what we call a data structuore,and that is what we call a data structure.
is so k is a divisor of m if i can divide m by k and get no emindr  the,"divides. so k is a divisor of m; if i can divide m by k and get no reminder. so, the"
[UNK] then we can see that [UNK] is a factor of [UNK] [UNK] is the divisor of [UNK] [UNK] is also divisor,"12, then we can see that 4 is the factor of 8, 4 is the divisor of 8, 4 is also divisor"
o [UNK] another divisor of [UNK][UNK] is [UNK] but [UNK] is not a divisor of [UNK] so if we go through,"of 12, another divisor of 12 is 6, but 6 is not a divisor of 8. so, if we go through the"
bigger than [UNK]e that divi oth [UNK][UNK] and [UNK][UNK] since  e,"bigger than 1 that divides both 18 and 25. since 1 divides every number, as we saw in"
so how would one go about computing gcd of m and sothis is where we come to the algorithm,"so, how would one go about computing gcd of m, n? so, this is where we come to the algorithmic"
altmay we want to descriibe th uniform way of systematicaly computing cd of ann for any,"way, we want to describe the uniform way of systematically computing gcd of m n for any"
better wat as we go along but if we just look at the definition of gcd it says lo,better once as we go along. but if we just look at the definition of gcd it says look
at all the factors of m  look at all the factors of m and find the largest one which is th,"at all the factors of m, look at all the factor of n and find the largest one which is the"
we want from an algorithm are two things one is that the description of what to do,we want from an algorithm are two things. one is that the description of what to do
this instructions regardlus of the values of m and n in such a way that it can create it and comprihen,the instruction regardless of the value m and n in such a way it can read it and comprehend
factors they are a very large number for n you might have many factors the process,"factors they are the very large number for n you might have many factors. so, the process"
we have seen several situations where we want to store a sequence of values,we have seen several situations where we want to store a sequence of values.
orin a list it is expensive to get to the ith element it takes time proportional,"therefore, in a list it is expensive to get to the ith element it takes time proportional"
ith position get thee value at the jt position in constat time indeependent o h,"at ith position, get the value at the jth position in constant time independent of i"
down to the jth position to get the two positions so i will have in a list i would have,down to the jth position to get the two positions so i will have in a list i would have the
sequence of links and then i would hav another sequence of links,sequence of links and then i would have another sequence of links.
then having nnow i ad intercaled the block where the wth value s and the block wethth j,then having now identified the block where the ith value is and the block where the jth
length of each element of the array is of a uniform size,length of each element of the array is of a uniform size.
to design for sequences apply depending on how the sequence is actually represente d,to design for sequences apply depending on how the sequence is actually represented.
an algorithm which works efficiently for a list may or may not work efficiently for a,an algorithm which works efficiently for a list may or may not work efficiently for an
array and vice versea,array and vice versa.
we would also typically in an array no in advance how big this block is,we would also typically in an array no in advance how big this block is.
or we can even call it a sequence o be more precise a sequence which we call sq,or we can even call it a sequence to be we more precise in a sequence which we call seq.
sowe have a sequence of values we want to check whether a given value is there or not,"so, we have a sequence of values we want to check whether a given value is there or not."
or does it matter does it not matter at all,"or does it matter, does it not matter at all."
only need true or false is it there out is it not it is a very simple thing,"only need true or false, is it there or is it not, it is a very simple thing."
twe do as we loop hrouugh all the elements in the sequence ad check whether any element,what we do is we loop through all the elements in the sequence and check whether any element
that if we ave eae this poointnt we have ot found the value v thet we ae ok for,that we have reached this point we have not found the value v that we are looking for
and check the value at position i rather than the value itself,and check the value at position i rather than the value itself.
the main point of this function is that we have no solution to search other than to scan,the main point of this function is that we have no solution to search other than to scan
this value might be,this value might be.
of memory starting o [UNK] t[UNK]  up to i ight and you want to get to the ith eement quickly,"of memory starting with 1, 2, 3, up to i right and you want to get to the ith element quickly."
so v is the last ihen we have to lookat all,"so, v is the last value then we have to look at all."
ut more generally v is not in the list,but more generally v is not in the list.
v is not in the list the only way we can determine that v is not in the list is to check every,v is not in the list the only way we can determine the v is not in the list is to check every
have not seen it so far we are not going to see it later,have not seen it so far we are not going to see it later.
the sequence starts you can just compute i times this size of one unit and quickly,the sequence starts you can just compute i times this size of one unit and quickly go
have to look at any words before i,to look at any word before i.
n general if we have a sequence that theefficient way to search for this value is to first o,in general if we have a sequence that efficient way to search for this value is to first look
ythat when somebody aus yu ces the name of a personce thate thinking of,play that when somebody ask you to guess the name of a person they are thinking of then
tis says no nly only n to think about m s you have men  wou,"person says no then you only need to think about m, so we have men."
o tis,on this.
w,how would we do that?
or the next part that we look t and so on,of the next part that we look at and so on.
we  demar ate that sigment using l,so we will demarcate that segment using l and r.
to the ith position,to the ith position.
o the tother hand if the cise is not empty then what we do is we first compute the midpoint o we,"on the other hand if the slice is not empty, then what we do is we first compute the midpoint."
so we find the mdpoint,"so, we find the midpoint."
and this can be done in what e could c constant ie,and this can be done in what we could call constant time.
and therefore it stops at midminus,and therefore it stops at mid minus 1.
give us i lice which is empty because we  find at the ht,give us a slice which is empty because we will find at the right point at the left point
the same,are the same.
if the sequence has length [UNK] then it takes only one step because wee just report that,if the sequence has length 0 then it takes only one step because we just report that
it is false we canot find it if there re no elemets left,it is false we cannot find it if there are no elements left.
we want an expression for t of n which satisfies this is what is called a recurrence normally so,"we want an expression for t of n which satisfies, so this is what is called a recurrence normally."
[UNK] by t of n by  cueed,plus 1 by t of n by 2 cube.
so when this expression becomes [UNK] so when n is equal to [UNK] to the k,"so, when this expression becomes 1 so when n is equal to 2 to the k."
the log of [UNK][UNK][UNK] to the base [UNK] ad that is an equivalent defention of log,the log of 1000 to the base 2 and that is an equivalent definition of log.
at the middon,at the midpoint.
search is that by only looking at a very small number of values sayso for example we c,"search is that by only looking at a very small number of values, say for example we give"
after [UNK][UNK] halvingngs of [UNK][UNK][UNK] we would have come down to [UNK] or,after 10 halvings of 1000 we would have come down to 0 or 1.
bonus that i get when i use an array,bonus that i get when i use an array.
or are they arrays,or are they arrays.
they do support these flexible things o ta typical of list however python supports,"they do support these flexible things which are typical of lists, however python supports"
and just to emphasise how lists  work when we go further in this course we will actualy,"to, and just to emphasise how lists work when we go further in this course we will actually"
look at o to implement some data structures,look at how to implement some data structures.
one element thon thother,one element to another.
of it quickly it is not very efficient to expand it because we have to then shift aeverything,of it quickly it is not very efficient to expand it because we have to then shift everything.
theworst case for example if this green block comes ithe [UNK]th position then  entire,"the worst case for example, if this green block comes into 0th position then the entire"
yu can imagine that now if you have some say space in your cupboard and then you  take ou,you can imagine that if you have some say space in your cupboard and then you take out
we can also accommodate what we see in lthon where each element of the list may be,"another, we can also accommodate what we see in python where each element of the list maybe"
of a different typeand hence each value might have a different size in itself,of a different type and hence each value might have a different size in itself.
time proportionate to i we cannot assume that we can reach any position in the list in constant,"time proportional to i, we cannot assume that we can reach any position in the list in constant"
i,like this.
we say that the ith position points to the i plus [UNK]th position which point to the s,"we say that the ith position points to the i plus 1th position which point to the rest,"
for many oncs we have to search through a set of possibilities in order to fined this,"for many problems, we have to search through a set of possibilities in order to find the"
search through all the possibilities by going forwards and backwards one leeor a time,search through all the possibilities by going forwards and backwards one level at a time.
oblm oor first question is how to represent the board because a board is what keps changing,"problem, so our first question is how to represent the board because a board is what keeps changing"
comma j ndtherefore if it is [UNK] it indicates th,"comma j. and therefore, if it is 0 it indicates there"
thathere is only one queen per row this particular thing though it is n minus n in,that there is only one queen per row. this particular thing though it has n minus n into
an n square entries it will only have actually n ones at any given time so we can optimiz,"n n square entries it will only have actually n ones at any given time. so, we can optimize"
now if you have ever played chess you would know that the queen is a very special piece,"now, if you have ever played chess, you would know that the queen is a very special piece"
wn bord just means setting board  equal to c if we have the one dimensional representation,our board just means setting board i equal to c if we have the one dimensional representation.
[UNK] then we are done so we can return true however if this is not the last queen then,"0 then we are done. so, we can return true; however, if this is not the last queen then"
sone more queen so we recursively call this function incrementing the row to i plus,"one more queen. so, we recursively call this function incrementing the row to i plus one"
it shan move any number of squares along a row column or diagonal  for instance i,"it can move any number of squares along a row, column or diagonal - for instance, if"
nonioe heh e h it suceeds or not we check if extend solution is true that is the,depending on whether it succeeds or not we check if extend solution is true that is the
current position reach the end now when would it be true if it succeeded,"current position reaches the end. now, when would it be true; if it succeeded"
in going all the way to level n minus [UNK] and n minus [UNK] returns true so when n minus [UNK],"in going all the way to level n minus 1 and n minus 1 returns true. so, when n minus 1"
place the queen here in the third row on the third column then it could move anywhe,"we place the queen here, in the third row and the third column, then it could move anywhere"
but we have to do a little bit more work to figure out how to actually implement this,but we have to do a little bit more work to figure out how to actually implement this.
a simple way would be just say that along with ha two dimntional representation o the,a simple way would be to just say that along with a two dimensional representation of the
sy attack i j is k if i j was first attacked by queen k and attack i j is minus,"so, we say attack i j is k if i j was first attacked by queen k and attack i j is minus"
that we put we only mark the squares which are attacked by queen i,we put we only mark the squares which are attacked by queen i.
so removing it does not actually change anything regarding the attack o,"attack. so, removing it does not actually change anything regarding the attack position"
eplaced under attack only after adding this queen and that turns out to be,were placed under attack only after adding this queen and that turns out to be these
first attacked by queen k and when we remove queen k we reset to minus [UNK] saying,"first attacked by queen k and when we remove queen k we reset to minus one saying that,"
array which had board i equal to be j sothe question is can we replace attack by,array which had board i equal to be j. the question is can we replace attack by a
linear arre now one thing to remember is that thouh attack itself is an n square,linear array now one thing to remember is that though attack itself is an n squared
en nse e e fix the queen  undo we only have to look along it is row,"entries once we fix the queen to undo, we only have to look along it is row, column"
this main diagonal o the off diagnal the main diagonal is the one from top left,this main diagonal or the off diagonal. the main diagonal is the one from top left
in which a square jhol be under attack s it migst be better to represent these [UNK] directions,in which a square could be under attack. it might be better to represent these 4 directions
minus the row is somehing that will be the ssame along every square on that diagonal,"minus the row is something that will be the same along every square on that diagonal,"
a along this green diagonal we have [UNK] plus [UNK] [UNK] ps [UNK] and [UNK] plus [UNK] so c plus r is,"and along this green diagonal we have 7 plus 5, 6 plus 6 and 5 plus 7. so, c plus r is"
is  minus i or if is allnong the diagonal hos diftence is j plus whos som is j plus,is j minus i or if is along the diagonal whose difference is j plus i whose sum is j plus
similarly we can have an array which says column i is attacked and then colm,n minus 1 similarly; we can have a an array which says column i is attacked and then column
i is set to n provided column i is attacked for again i between [UNK] and n minus now when,i is set to 1 provided column i is attacked for again i between 0 and n minus 1. now when
the north west to south east diagonal is the one where the difference is the same,the north west to south east diagonal is the one where the difference is the same and if
here the difference is [UNK] minus [UNK] is [UNK] and here the difference is [UNK] minus [UNK] is minus,"here, the difference is 7 minus 0 is 7 and here the difference is 0 minus 7 is minus"
n minus [UNK] this gives me the number ifi o this is the diffence if the difference is,n minus 1 this gives me the number if at. this is the difference if the difference is
as ae there and the possible range of values is from minus    plus  minus n minus [UNK],are there and the possible range of values is from minus 7 to plus 7 minus n minus 1
tmhtimtoek imiskeitbtnetzkitkitozimtmtobkiztktoe ithtozitv,two times n minus 1 is two times 7 which is 14.
as e values fo [UNK] to n minus [UNK] so minus [UNK] indicates that the ith queen is not placed,"the values are 0 to n minus 1. so, minus 1 indicates that the ith queen is not placed"
ac a single queen and it must be attacked by the queen at i coma j so only the queen,"by a single queen and it must be attacked by the queen at i comma j. so, only the queen"
values indicating the [UNK] sub dictionaries sthe queen position we will call the key qu,5 key values indicating the 5 sub dictionaries. the queen position we will call the key queen.
o intead o sying board i is j we wil say board with quen as the keyy at position,"so, instead of saying board i is j, we will say board with queen as the key at position"
which is a dictionary which contains everything of interest,which is a dictionary which contains everything of interest.
here we have an actual python implementation of what we discussed so we have this this,"here we have an actual python implementation of what we discussed. so, we have this this"
function here which is called place queen place queen we said takes the row i and the,function here which is called place queen. place queen we said takes the row i and the
all column values we check if i jh is free in the current board if it is free then we,all column values we check if i j is free in the current board. if it is free then we
we means it means yo cannot place the queen in the ith row so we return false now e,"we means it means we cannot place the queen on the ith row. so, we return false. now the"
so remember we take w put it will be a string we convert it using n and we record,"so, remember we take the input it will be a string we convert it using int and we record"
int and passes it as n then we wol initialitze the board with the number n we need  because,"int and passes it as n then we will initialize the board with the number n. we need n because,"
need to no how to set up that oremember that the indices run from [UNK] to n minus [UNK] or,we need to know how to set up that remember that the indices run from 0 to n minus 1 or
n minus n minus [UNK] plus n so n is required in order to initialize the dictionary,"n minus n minus 1 plus n. n is required in order to initialize the dictionary and finally,"
hs initially  te bord what how do we print a bord well for every row we sort e,this initializes the board; what how do we print a board well for every row we sort the
this is bat way if you hander python program you can run it directly without fs,dot py. this is by the way if you have a python program you can run it directly without first
or instance it we give it the number [UNK] than we willget the solution that we n the,for instance if we give it the number 4 then we will get the solution that we saw in the
e are example it is not very printed out very neatly so if   tin  h,"earlier example it is not very printed out very neatly. so, if we give the number 8 then"
shows me the [UNK] queen solution in a more readable form,shows me the 4 queen solution in a more readable form right.
stthere is an extra column there is some mistakein that but there is an extra cal,"see there is an extra column. there is some mistake in that, but there is an extra column,"
previousl also returns true e nn eventually t print out the board supposing we do not,previous level also returns true and eventually it print out the board. supposing we do not
every possible solution the only thing is that it will ot    e e,every possible solution. the only thing is that it will not run through every solution
queen positions and then trying it out we are trying it out for smaller things because,"queen positions and then trying it out we are trying it out for smaller things, because"
extend t solution and then we undo the queen and try the next one,extend the solution and then we undo the queen and try the next one.
osible j wwe are not going to ever come out comp,blindly try every possible j and we are not going to ever come out complaining that we
solution that we are trying to get does not work so we hat a dead end and then we undo,"solution that we are trying to get does not work. so, we hit a dead end, and then we undo"
r discussion of back k tracking with this specto t [UNK] queens ro,our discussion of backtracking with respect to the 8 queens' problem. 
there is no free slot for the third queen sjust by exhaustive analysis we can show,"there is no free slot for the third queen. so, just by exhaustive analysis we can show"
nd we can find thene emptrys lot on the second row right at the nd so we put a queen there,"then we can find an empty slot on the second row right at the end. so, we put a queen there"
everything is one of the coruner iwish none of the queens attack ath er,everything is one of the corner in which none of the queens attack each other.
is always a soluted possible our r task is to find such a solution how do we find,is always a solution possible. our task is to find such a solution. how do we find a
exactly one queen on each row s let us first put a queen in the first row en,"is exactly one queen in each row. let us first put a queen in the first row,"
so you have a gbrid  then you start liling up things he  the et o,"so, you have a grid and then you start filling up things and there are some points you realize"
cares now we move to the third row and in the [UNK]hth,"squares. now, we move to the third row and in the 5th"
an then we wil place a [UNK]th queen and then a [UNK]th one and then a [UNK][UNK]th one and now we  find,and then we will place a 5th queen and then a 6th one and then a 7th one and now we find
something we did before now the last thing we did was to put the [UNK]th queen right so we,"something we did before now. the last thing we did was to put the 7th queen right. so,"
problmem and at some point  we realie that we are stuck we cannot solve the probem,problem; and at some point when we realize that we are stuck we cannot solve the problem
and so on,and so on.
suppose we want to write a function finfos which finds the first position of tha value,"suppose, we want to write a function findpos which finds the first position of a value"
this heeie trick how would we know at this point remember now ther re,not think of this clever trick how would we know at this point. so remember now there
o the question is can we detect whether or not we broke o  this loop n he her,not. the question is can we detect whether or not we broke out this loop or whether we
terminate it separately,terminate it separately.
that looks a bit odd because of the name it allows something called else which we,that looks a bit odd because of the name it allows something called else which we saw
new words you need to use s if you see n else attach to a for it could also be att a,new words you need to use. if you see an else attached to a 'for' it could also be attach
ae ene not  found it pos is undefined if pos is undefined we need to define it before,entire list and not found it pos is undefined. if pos is undefined we need to define it before
ths can be done by supplying the optional else so both far and while also allow in lse,"this can be done by supplying the optional else. both, for and while also allow an else"
mark the position that we have found it  to be pos at the end of this if we are not,"mark the position that we have found it to be pos. at the end of this, if we have not"
in the list then we will set pos to minus [UNK] which is the default value whe indicate,in the list then we will set pos to minus 1 which is the default value we indicate at
to scan the remaining hundreds of thousands of positions before we reur the position,to scan the remaining hundreds of thousands of positions before we return the position
this is an issue of efficiency that we are running this  loop too many times,this is an issue of efficiency that we are running this loop too many times unnecessarily.
the position to be the new thingso we are actually finding not the first,"the position to be the new thing. so, we are actually finding not the first"
olution but the last position so this is not a very good way to do this so we first,"position but the last position so this is not a very good way to do this. so, we first"
condition which says that  if l i is v and we have not founded so far then we updated,condition which says that if l i is v and we have not founded so far then we update
as before if we never find it o the value found is never set to true and so we repor,as before if we never find it then the value found is never set to true and so we report
succeeding then we will report minus [UNK],without succeeding then we will report minus 1.
so we could think of doing this using a for rop so we go through every value an,"we could think of doing this using a 'for loop'. so, we go through every value in l"
have not seen x so far like before we want to report minus [UNK],have not seen x so far like before we want to report minus 1.
position  this is only the first version of this we will see how to fix this so we have,"position. this is only the first version of this we will see how to fix this. so, we have"
loop o this s precisely what we wanted to do if x v we have found the first position,loop. so this is precisely what we wanted to do if x is v we have found the first position
and go backnow how do we repord at the end we do not have this founund varyae,"and go back. now, how do we record at the end we do not have this found variable anymore."
o how do we know at the end  owhether or not we actually saw it the question is was po,"how do we know at the end whether or not we actually saw it? so, the question is was pos"
there so in any case we can return pos and we have no problem,"there. so, in any case we can return pos and we have no problem"
this is just to illustrate the use orf the word break which allows us in certain situation,"this is just to illustrate the use of the word break, which allows us in certain situations"
to get out now remember in the worst case we do not find x in it s the worst case i,"to get out. now remember in the worst case we do not find x in it. so, the worst case"
is better to scand the positions so it is better to say pos is minus  tte,"it is better to scan the positions. so, it is better to say pos is minus 1, but instead"
of going through x ind l it is better to go through i in the range [UNK] o remember now this,of going through x in l it is better to go through i in the range 0. remember now this
wesby changing the variable that we put in the for we have got aslightly more natural,"so, by changing the variable that we put in the 'for', we have got a slightly more natural"
in the lecture we saw that in object oriented programming we define a data type oro,"in the lecture, we saw that in object oriented programming we define a data type through"
are dealing with this heap h when we say h dot insert then this insert is using the,"are dealing with this heap h, when we say h dot insert then this insert is using the"
perspective the same function is there there is f there is mor distance o i,"perspective the same function is there there is self there is o distance. so, if i take"
teta o i equal to s sin theta then do x plus delta x y plus delta y and convert,"theta and y equal to r sin theta then do x plus delta x, y to plus delta y and convert"
it back to r theta i s you pay a price in one function or he other with the x,"it back to r theta right. so, you pay a price in one function or the other; with the x y"
like saying that a heap implementation is always better than a sorted list implementation,like saying that a heap implementation is always better than a sorted list implementation
rivate implementation namely we havre emoved from x y to r theta but the function tha t,"the private implementation, namely we have moved from x, y to r theta, but the functionality"
argmns hicom[UNK] but if we do not pas an alguments like p [UNK] then we et a poit,"the argument 3 comma 4, but if we do not pass any argument like p 2 then we get a point"
at the origin,at the origin.
the function init clearly looks like a special function because of these underscore underscore,the function init clearly looks like a special function because of these underscore underscore
using rite a python function as e said before python n inderprets init is a constructor s,"to write a python function. as we said before python interprets init as a constructor, so"
when we call a objects like p qual to [UNK][UNK][UNK] then this implicitly cals init and init is,"when we call a object like p equal to 0.54, then this implicitly calls init and init is"
and for instance print as the function print implicitly takes any name you pass to print,"and for instance, print - the function print implicitly takes any name you pass to print"
and self dot ywe want to print this out in this form value x and the value y,"and self dot y, we want to print this out in this form value x and the value y."
produces the string representation of self ot othis creates a string from the value,"produces the string representation of self dot y. this creates a string from the value,"
oother heaps we will see a little later that we can take one value and refer to another vu,other heaps. we will see a little later that we can take one value and refer to another
define what add meaans let us assume that we want to constrat the newpoint whose x coordinate,define what add means. let us assume that we want to construct a new point whose x coordinate
here is a way we would do it we would create a new point whose x coordinate is self dot,here is way we would do it; we would create a new point whose x coordinate is self dot
implicitly called self because that is the one whe is typically manitullated by a function,"implicitly called self, because that is the one that is typically manipulated by a function."
we just write p [UNK] less than p [UNK] for edablity enough in our program  internaly tit will,"we just write p 1 less then p 2 for readability enough in our program, and internally it will"
point is given some coordinate like a comma this is a point with xcoordinate a and,point is given some coordinate like a comma b. this is a point with x-coordinate a and
this is a familiar concept that al of you must have seen in mathematics,"y-coordinate b, this is a familiar concept that all of you must have seen in mathematics"
and b that you want topoint to have and now we have within the point we have,"and b that you want point to have. and now we have within the point, we have"
as objects,as objects.
and a y value  this x value is something and the y value is somethig and if we change,"a y value, and this x value is something and the y value is something. and if we change"
this particular object now this particular object changes as we move from one object,this particular object. now this particular object changes as we move from one object
sof p [UNK] self is p[UNK] this is an important po ust remember that every function inside,"of p 2, self is p 2. this is an important thing. just remember that every function inside"
il we passed as a and [UNK] will be passed as v and this will set up a point that we,"will be passed as a, and 2 will be passed as b. and this will set up a point that we"
the value the atax so we want self dot x pelst rite tax now this is a very common,"the value delta x. so, you want self dot x plus delta x. now, this is a very common paradigm"
to deltx is s a shot cuton python for self dot x equal toto self dot x plus t,to delta x is just a short cut in python for self dot x equal to self dot x plus delta
it means that implicitly the name of the left is the first argyument to the operation,x; it means that implicitly the name on the left is the first argument to the operation
sofor instance now if we say p dot translate [UNK] [UNK] then we get a new point which is [UNK] plus,"for instance, now if we say p dot translate 2 1 then we get a new point which 3 plus 2"
let us look at he different function surposing we want to compute the distance from,let us look at different functions. so supposing we want to compute the distance of a point
thah to get its dinstance so maybe w assign this to a name that does not call it,"distance to get its distance. maybe we would assign this to a name, let us not call it."
st caled sie so let us just assume that this parameter is,"to always call it, self. let us just assume that this parameter is"
if o distance is somthing that we lead to too ofn eradbe is useful to just,"now if o distance is something that we need to do often, then may be it's useful to just"
this distance and you can keep this andle so if i have r and theta it is the same inforation,"keep this distance and you can keep this angle. so, if i have r and theta it's the same information"
r coss theta where coss that prinomcosin function wy is eel to ur ithta,r cos theta where cos is the trigonometric cosine function; y is equal to r sin theta.
different types of expressions which have different values like the types we have seen,different types of expressions which have different values like the types we have seen
similarly anyempty sequence such just the empty string or the empty list is also tr toe,"similarly, any empty sequence such as the empty string or the empty list is also treated"
sremember if it is not equal to [UNK] then it is true so when it is not equal to [UNK] t is true,"remember if it is not equal to 0, then it is true."
if this condition vods the same as asking whther nm perent n is a ong  value,"if this condition holds is the same as asking whether m percent n is a nonzero value, and"
if it ong [UNK] value we want to replace m an n so we can just write if  p,"if it is nonzero value we want to replace m and n, so we can just write if m percent"
whether it is [UNK] [UNK] [UNK] or [UNK] you want to do [UNK] different things wich  wit which we all,"on whether it is 1, 2, 3 or 4, you want to do four different things with which we called"
e ave  t [UNK]  [UNK] in,"f1, f2, f3 and f4."
e check i x is equal to [UNK] then we invoke f,"supposing, we first check if x is equal to 1, then we invoke f1."
x is not one then it is oe of the others  all of this gos into an else and everythng,"if x is not 1, then it is one of the others, so all of this goes into an else and everything"
we check in this case if x is equal to [UNK] then we doo hav [UNK] otherwise we have [UNK] or [UNK],"then we check in this case, if x is equal to 2 then we do f2 otherwise, we have 3 or"
then we check [UNK] or not  nthen we check [UNK] or not  then we have this uly nesting and secondly we have ths,"2, and then we check 3 or not 3 then we have this ugly nesting and secondly, we have this"
a short cut for this which is to combine the else and the if int a scond h,python has a shortcut for this which is to combine the else and the if into a second
,check elif.
this on the right is exactly the sn as the left as far as fiton is one side,"so, this on the right is exactly the same as the left as for as python is concerned."
other wise it will inve the rest of the rest,"otherwise, it will invoke the rest."
what has happened so far nd according to the current values that we see,"what has happened so far, according to the current values that we see."
the outcome of this lnk,"so, this should be outcome of this loop."
let us look at a realyth example,let us look at a real life example.
s  ng[UNK] e we sai startrts  and  eterayats ha sequente loe os u,"the range 0, 1, we said it starts at 0 and it generates the sequence of the form 0, 1,"
range also does not hove from [UNK] to n but [UNK] to minus [UNK],"range also does not go from 0 to n, but 0 to n minus 1."
oin general range i j like a slice i to j starts at i and goes up to j minus [UNK],"in general range i, j, like a slice i to j, starts at i and goes up to j minus 1."
look at a smpble example of this,let us look at a simple example of this.
suppose we want to find all the factors of a number n all numers that divide n wit he,"suppose, we want to find all the factors of a number n, all numbers that divide n without"
to be m plus [UNK]e because the range function stops one below the number o which is the right hand,"to be n plus 1, because the range function stops one below the number which is the right"
in a while we come back we check the condition again but there is every posibility ha,"in a while we come back we check the condition again, but there is a every possibility that"
mbrella ever then you relist the chance of bing e,"the umbrella ever, then you risk the chance of being wet."
we have to ensure when we write of a wile loop that somehow this sequence of statements  e,we have to ensure when we write a while loop that somehow this sequence of statements to
sslong has is is not the khase we xcange vallus for mn,"so, so long as this is not the case, we exchange values for m and n."
itmight be ewful to just say explicitly not equal to  just to illusttrate to orelf,"it might be useful to just say explicitly not equal to 0, just to illustrate to yourself"
we can alter the can to lo in three ways we arve sene,we can alter the control flow in three ways we have seen.
put a contion and then the body is executed each tind the condition is checked again,we put a condition and then the body is executed each time the condition is checked again so
it is not likely  ure t grali is not in the bak if it is not there it is,"if it is not likely to rain, ensure the umbrella is not in the bag, if it is not there it is"
refer to in programming laag jst as o,referred to in programming languages as control flow.
othre are thre undementtal things all of which we have seene in formalan the de,there are three fundamental things all of which we have see informally in the gcd case.
we want to carry [UNK]n boxes from this room to that room so of tn times we carry one box as,"we want to carry 10 boxes from this room to that room, so 10 times we carry one box at"
whether we have to stor it ice or i[UNK]e times we will stor until the sugar s out,"whether we have to stir it twice or five times, we will stir until the sugar dissolves."
execution in python is writen as we saw using the if statement,conditional execution in python is written as we saw using the 'if statement'.
ordored by a pinch of statements  in geneal,followed by a bunch of statements.
and we have thi column which indicates the end of the condition and,"example, and we have this colon which indicates the end of the condition."
make thes simlans assignment of m taking the old value of n and n takingng,"we make this simultaneous assignment of m taking the old value of n, and n taking the"
the indentation tells python that these two statements are conditionally executed dependin,the indentation tells python that these two statements are conditionally executed depending
sumething lke a brace to indicate the beginning and the end of the block which is goerne,"something like a brace to indicate the beginning and the end of the block, which is governed"
rci se ces and so on,and close braces and so on.
we will look at funin definitions in mooe detail very,we will look at function definitions in more detail very soon.
s one tracp is not going to be equal to three spaces or fo spaces or whatever,"so, one tab is not going to be equal to three spaces or four spaces or whatever you see"
some uniform stateg for example to pacses to indent whenever youhave such a n,"some uniform strategy for example, two spaces to indent whenever you have such a nested"
it is lightly to range and show the uml in the lack else and sho the rel,"if it is likely to rain ensure the umbrella is in the bag, else ensure the umbrella is"
nt remainder is [UNK] then we found the gcd in amely the smaller of the two values,n if the remainder is 0 then we have found the gcd namely the smaller with two values.
for or final lecture of this first wheed we will see how to actualy uuse python on,"for our final lecture of this first week, we will see how to actually use python on"
ae sing if i invoke it it will poduce some message is telling mean what type of functions,"i am using. if i invoke it, it will produce some messages telling me what type of function"
ino i can also defined functions rmember how we defined a function we usehe,"with it. now, you can also define functions remember how we defined a function, we use"
his because this confu get u confus the element  ith is from python t,"spaces, because this gets you confuse the error messages form python. so, let us use"
se two spaces let us o the ake of illustration creat,two spaces. let us to the sake of illustration create
is to complicate it to typeon without making a mistakke and secondly you might at,"is too complicated to typing without make in a mistake, and secondly, you might want"
again for this what we need to do  is first at the function into a  and then,"again. for this, what we need to do is first type the function in to a file and then load"
tcoint pfrom so i have actually already createded some thing s let us start,"the command prompt. so, i have actually already created something. let us start with, so i"
itsoius ta    ous max can use any tex eata r using window,"use an editor called emacs, you can use any takes editor if you are using windows, you"
the point to remember is that i have made sure that all these indentdations aer,before. the point to remember is that i have made sure that all these indentations are
at the same number of spaces in this is something to remember noww you typpon,"at the same number of spaces in. so, this is something to remember. now, you typing"
says that so long as the remender is anob [UNK] we keep updating m and n to n and the reminder and the final w,"says that so long as the reminder is not 0, we keep updating m and n to n and the reminder,"
large values that we saw before which i think s say [UNK] [UNK]is an the  now using,large value that we saw before and which i think was say 9999999 and 1000000. and now
it more consistent and more easy to use but as often happens a lot of vs,"makes it more consistent and more easy to use, but as often happens a lot of people"
written n  is somehow nhat executable and explain hy so you  play around with it and,"have written is somehow not executable and explains why. so, do play around with it and"
you may find s we go along tt he is something that you do not understaand s something,may find as we go along that there is something that you do not understand or something new
one you have learnt one language even to the features and the yntaxs vari fr,"once you have learned one language, even though the features and the syntax vary from language"
o this has forced python [UNK]tw points [UNK] to live on eventually we voke that somebody will take,"so, this has forced python 2.7 to live on. eventually we hope that somebody will take"
efer to move python to point [UNK] libraries to python [UNK] and of course newer code is large,"the effort to move python 2.7 libraries to python 3. and of course, newer code is largely"
o opython [UNK] t do you remember that henomo says that,"being developed on python 3, but you should remember that when somebody says that they"
using python they could be talking about two points [UNK] and not  and you have to make a jussments,"are using python they could be talking about 2.7 and not 3, and you have to make adjustments."
your working or inervs or on a mack or on windows woiwll be able to find the version of python,"are working on linux or on a mac or on windows, you will be able to find a version of python"
we will see which are slightly different intopt [UNK] and we will x trore them in [UNK] and,"we will see which are slightly different in 2.7 and we will explore them in 3, and i will"
ytvtvtht t t t ttottotwtd tr tot itotctto 't t tht t t t tt,"get to this url. so, www.python.org downloads release python 350. 350, is really refer into"
actually the current viersion as i said is not poit [UNK] poit [UNK] but point  point [UNK] you wi,"3.5.0. so, actually the current version as i said is not 3.5.0, but 3.5.2. so, you will"
and in stor it these are desind to be for erly self xpry instal illes if you hae,and install it. these are designed to be fairly self-explanatory install files; if you have
with the actual programing part,with the actual programming part.
is a distinction between interpreters and compyers the main difficulty is he,"is the distinction between interpreters and compilers. so, the main difficultly is that"
and write instructions inthese are somewhat hoigh level instructions on the other hand computein,"and write instructions on. so, these are somewhat high level instructions. in the other hand,"
arranging the chairs so we said arrange the chairs as a high level thing and we said put [UNK] chairs,"chairs. so, we said arrange the chairs as a high level thing, and we said put 80 chars"
n[UNK] in rows [UNK] ch right so we said that the could be  difference ii,"in 10 in 8 rows, 10 each right. we said that they could be a difference in"
he are going to explorde in this course in which all programmas normally wri,are going to explore on this course and which all programmers normally work with are at
leve programming language and translates programs on that language to a miev,level programming language and translates programs on that language to a machine level
in yoour language in this case python and the interpretar internally figures out,"in your language, in this case python; and the interpreter internally figures out how"
so we use python typicall in the following way we first run the interpretei rmember,"we use python typically in the following way; we first run the interpreters. so, remember"
can feedi commarnns and see what it is so it is very interective,"calculator; you can feed it commands and see what it does, so it is very interactive. of"
hehere  using [UNK]point [UNK] or [UNK][UNK] point [UNK] but there are differences between two points [UNK] and [UNK] and for,"whether you are using 3.5 or 3.4, but there are difference between 2.7 and 3. and for"
right sthis way this will tell the interprenter,"that is written there. so, this will tell the interpreter to take everything that is"
these things will ict some little clor in them in the deimo that i am wust gong to show ou,"used. so, these things will become a little clear and then in the demo that i am just"
get into the ral detalilis about exactly what p is into a python program,get into the real details about exactly what goes into a python program.
here is a window showing termial which on window is would be like a comman prom,here is a window showing the terminal which on windows would be like a command prompt
[UNK] t ishu,is 1024.
s when we have t[UNK] o the [UNK]h the log is goingto be something like [UNK][UNK][UNK]mething,"so, when we have 10 to the 7 then the log is going to be something like 20 something,"
[UNK],6
tw udred or h niltl get to exorentions like  to the n nd n factoril then unless you have,"when you get to the exponentials like 2 to the n and n factorial, then unless you have"
input that is really small like t[UNK] or something at that hey aregoyingto head problem,"an input that is really small like 10 or something like that we are going to hit problems, because"
tis ies as an idea that given that or system that we are working which,this gives us an idea that given that our system that we are working which python can
what kind of inpu will be realistic to process given the type of algorithm that we are el,what kind of inputs will be realistic to process given the time type of algorithm that we are
,executing.
this statvle is more or less valid up to a skaling of a e tn[UNK]s in in different language,so this table is more or less valid up to a scaling of a few tens in different languages.
athat the worst case would occur typically in the value that we are trying to find,that the worst case would occur typically when the value that we are trying to find
if you look at algorithms books  or complexity hyeretic tose any polu omal,"theoretically if you look at algorithms books or complexity theoretic books, any polynomial,"
aas a very severe limitrate we can only do about o [UNK]d,"has a very severe limit, we can only do about 4 to 5000."
thingso if we are doing something in on square time we cannot process something larger tha h,if you are doing something in n squared time we cannot process something larger than a
of algorits,of algorithms.
now unfortunately in order to determine something like an average case in a mathematicaly precise,now unfortunately in order to determine something like an average case in a mathematically precise
s way is not very easy we have to have the probability distribution over all inputs and then wemaes,"way is not easy, we have to have a probability distribution over all inputs and then measure"
betwen in put size and output size so we express this upto proportionality,between input size and output size so we express this up to proportionality.
e are not reay interested in exact constance we want to now for instance is t of m preportin l,so we are not really interested in exact constants we want to know for instance is t of n proportional
so we are not going to a  much detail in this course about how we g s define,"so, we are not going to go into much detail in this course about how big o is defined"
and calculated but it used to use ful short hand fo describe the bt efficiency of algorithms,"and calculate it, but it is a useful short hand to describe the efficiency of algorithms."
to talk about the efficiency as a function of the input sese,to talk about the efficiency as a function of the input size.
would be reasonable inputs that we can expect o compute within a few second,could be reasonable inputs that we can expect to compute within a few seconds.
we realize that something may be wrong,we realize that something may be wrong.
,it to be inefficient.
so if we lookat this we have to  figere out how fast ap computers ar,"so, if we look at this, we have to now figure out how fast our computers are."
owe have a bunch of programs thath we allge written and here is a template,here we have a bunch of programs if you already written and here is a template.
soif i say lok at t sp [UNK] dot,so if i say look at speed4 dot py.
or an input of sizen,on an input of size n.
or s for m n range [UNK] to n[UNK][UNK]s [UNK] th[UNK]a[UNK] minus [UNK] we just assigns m to be the value i and finally the,"so, for m in range 0 to 10000 minus 1, it just assigns m to be the value i and finally"
this statement we have not seen so far but which would be quite oncuive which h,"there is this statement we have not seen so far, but it should be quite intuitive which"
are a bunch of scrips we have written for python rs p [UNK] to p i[UNK] f,these are a bunch of scripts we have written for python from speed4 to speed9.
first of n i can take python and i can directly use he name of the python progrn,first of all i can take python and i can take directly use a name of the python program
so i can say python [UNK] poit to [UNK] and give the name of this qi and it ill eecuted an,"so, i can say python 3.5 and give the name of this script and it will execute it and"
if i do this on the other hand [UNK]times then it go from point [UNK],"if i do this on the other hand 5 times, then it goes from 0.03 to 0.5."
[UNK]so is roughly a factor of [UNK] as you would imagine which is reasonable,"so, it is roughly a factor of 10 as you would imagine which is reasonable."
one up to a i two second so,gone up to about 0.2 seconds.
the [UNK]h takes mo second or more,10 to the 7 takes about the second or more.
long tiime wen yo are sitting in front of a queen waiting for snc,long time when you are sitting in front of a screen waiting for the response.
it turns out as if something takes logn of time then even for t[UNK] t tn it takes,it turns out as something takes log n of time then even for 10 to the 10 it takes only 33
steps and we have ind,steps and we are fine.
of course if  the inps lnear w n we ignoring the constan then  ipt sie,"of course, if input is linear then we are ignoring the constant then the input of size"
decreasing what happens when it actually  is on,"decreasing. what happens when it actually reaches 1? well,"
the remainder will be [UNK] will be [UNK] rit so we will return gd of [UNK] in other words we ar guaranteed,"the remainder will be 0, so we will return gcd of 0. in other words, we had guaranteed"
sta this is [UNK]s is is usal tes algor in the first version,"start. this is euclidã•s algorithm, the first version"
where we observe that the gcd of m and n can verplaced ber the gcd of m and m minurs  and,where we observe that the gcd of m and n can be replaced by the gcd n and m minus n. and
iwill insteardt compute d som other value and use that answer to return my answer,well instead compute gcd's on some other value and use that answer to return my answer.
beginning so we instead of starting from ne and loking upwards to the linimum of,"the beginning. so, instead of starting from 1 and working upwards to the minimum of m"
and then seis a havfh hich as though this statement was not cardd of the ython,"and then sees the hash, so itã•s as though this statement was not part of the python"
n l it is better to start with minimum of   and wark backwards to  and,"and n its better to start with minimum of m and n and work backwards to one, and as"
then put it on a separate line or  cen put it at the end of the line,can put it on separate line or you can put it at end of the line.
at this point if we have found n sach that n divides n we are done,do some computation. at this point if we have found n such that n divides m we are done
b actually produces tha remainder this not equal t singble is written with this exclamation o,"by n actually produces a remainder. so, this not equal to symbol is return with this exclamation"
emember that this obl equal to was what you use for the mathematical simple of equality se,remember that this double equal to was what we use for the mathematical symbol of equality.
soon as we find a common factor we report it an exit,soon as we find a common factor we report it and exit.
o allways that oone is garinty to p a common factor so when we start frrom im,remember always that 1 is guaranteed to be a common factor. so when we start from minimum
the worst case i will become [UNK] and one will divide everything,worst case n will become 1 and 1 will divide everything.
wrote arlier s if it helps you can look at these side by side and try to understand hat,"wrote earlier, so if it helps you can look at these side by side and try to understand"
per thing is doing and what t wi is doing and see that theare rwa,what this recursive things is doing and what the while is doing and see that they are basically
oing the same thing and the idea that the recursion must termine,doing the same thing. and the idea that the recursion must terminate
thwhilinkits s just like the recursion can a for ever if you do not,"the while exits. so, just like the recursion can go on forever, if you are not careful"
and go back wards if we do not see any other commomn factor we are still,"of m and n and go backwards, if we donã•t see any other common factor, we are still"
are not careful and you do not invoke it with arguments which guarantee termination the whle can also,"and you do not invoke it with arguments which guarantee termination, the while can also"
we can actualy do a litle better than this let us see one  problem wit this  a,we can actually do a little better than this. let us see one problem with this by doing
atecution ssupposing je start with rom number liuke g of [UNK]e nd [UNK]e and t then ourr,"a hand execution. so supposing we start with some number like gcd of 101 and 2, then our"
algorithm will say that this should now become gcd of the difference and n the difference is [UNK],"algorithm will say that this should now become gcd of the difference and n, the difference"
w  ill keep doing this about [UNK] steps andthen eventualy y will come down to  cd of,we will keep doing this about 50 steps then eventually we will come down to gcd of 5 and
guarantee that we will exit correctly when we hit [UNK] so what we notice that as that,"guaranteed that we will exit correctly when we hit one. so what we notice that was, that"
we  if we were just computing factors we isay that her is only factors [UNK],"the minimum is 2, if you were just computing factors we will see that the only factor of"
is [UNK] nd it s not a factor  and  we wul  sto right a i his acuay,2 is 2 and it is not a factor 101 we would have stopped right at beginning. this actually
seems  worse than our earlier algarith in certain case,seems to be worst then our earlier algorithm in certain cases.
though these different versions are simpler than the earlier versions they all have the same,though these different versions are simpler than the earlier versions they all have the
imthis is goes n oes intoime qwe times and these remainder r and we are gavndat,arithmetic. n goes into n q times and leaves a remainder r and we are guaranteed that r
i smaller than n other wise ar it wul go one more a l become t plus [UNK] so we hav e,"is smaller than n, otherwise r it could go one more time it will become q plus 1. we"
remainder n wich is [UNK] of the  for example if i say [UNK] and i want to dien,have the remainder r which is smaller than n. so for example if i say 7 and i want to
a common divisor for both m and n in other words like before we can try m itself,a common divisor for both m and n. in other words like before we can write m itself as
aso is mn so if we pluck this into h equation above here then we see that m which is,"so is n. if you plug this into the equation above here, then we see that m which is a"
,well.
the same as before otherwise let r be the remainder if the value,"same as before. otherwise, let r be the remainder with the"
spoint one impordnting the rememberi that r is definitely lhist nt so we do no,point one important thing to remember is that r is definitely less than n. so we do not
two numbers and we replace n by the remainder and we proceed now we guarrant that,two numbers and we replace n by the remainder and we proceed. now we are guaranteed that
so if we go back with the example that we were looking at so if we saw the gcd  [UNK],"if we go back to the example that we were looking at, so if we saw that gcd 101, 2,"
number of steps say a vilin steps but this algorifthm because of the clam that it takes tim o ports,of steps say a billion steps. but this algorithm because of the claim it takes time proportional
e dot programig a d data  structres and agorithms the programming,"is about programming, data structures and algorithms. so the programming part talks"
to mae sure that at thiscurrd and isy to rea ind e maiaintan so that is a program,"to make sure that it is correct and easy to read and maintain, so that is the programming"
these ideas but the ideas themselves come from numgerithms and data structures,"these ideas, but the ideas themselves come from algorithms and data structures. "
lt from these two lists extract the list of common factors  report the largest one,"list, from these two lists, extract the list of common factors and report the largest one"
tturn out the d is also the largest divisor which is common to m n and n minus  i,"turn out that d is also the largest divisor which is common to m, n and m minus n."
here is the first version of uclist agorithm consider the value gcd of,"so here is the first version of euclidã•s algorithm. so, consider the value: gcd of"
in this common factor list our first pipication was to observe  that we can actually do wa single,in this common factor list. our first simplification was to observe that we can actually do a single
computing the gcd of m and n that we started with we compute the gcd of n and m minus,"computing the gcd of m and n that we started with, we compute the gcd of n and m minus"
so here is a pyithon implementation of this idea sthere are a couple of new features that ar,"so, here is a python implementation of this idea. there are a couple of new features that"
introduced here let us look an them the first is this  special statement h,"are introduced here, so let us look at them. the first is this special statement which"
comment is a statement that you put into program to exxpect in what is going on to,so a comment is a statement that you put into a program to explain what is going on to a
a person reading the program but it is ignore whet the computer executing the programm,"person reading the program, but it is ignored by the computer executing the program. so,"
of m o[UNK] the value of mn now it is important hat it is multainous e,"value of m goes into the value of n. now it is important that it is simultaneous,"
worrying af bhout having this extra temperary place to parkt one value,worrying about having this extra temporary place to park one value.
is satisfied so now we come to the tracks of the algorithm o if n divide,assumed is satisfied. so now we come to the crux of the algorithm. if m divides n that
cdy or a maximum value of n in the difference as the first argument and the minm,call gcd with the maximum value of n and the difference as a first argument and the minimum
vlue of n no it o e ere that the big er of the two vlu,value of n and the difference. so it will make sure that the bigger of the two values
this problem by soting a smaller problem and using that answer in this cays directly,this problem by solving the smaller problem and using that answer in this case directly
but the gcd of m ann instead we sall the gcd of n nd minus n and whatever answer that gi,the gcd of m and n instead we solve the gcd n and m minus n and whatever answer that gives
of the largest common factor we have seen so far in a singble name and report it at the,of the largest common factor we have seen so far in a single name and report it at the
o stoping point oformally what we have to ensere is that this guarantee of fin,"a stopping point. so, formally what we have to ensure is that this guarantee of finding"
hve seen so far in,we have seen so far.
petig over this makes fo more readable code and in general more readable  code maks,"repeating over. this makes for more readable code. and in general, more readable code makes"
a better program so what d you need to do tor right am our program whefirs,"for a better program. so, what do you need to do to write a good program? well first"
for u to validate as being correct and for somebody else to understand and if necessary aup,"for you to validated as being correct, and for somebody else to understand and if necessary"
as a stye use the style to make for thmost efective and relecode i can find,has a style use the style to make for the most effective and readable code you can find;
if you have tha fhr useit do not f as hat s a while and o,"if you have a 'for' - use it, do not force as i said to use a while and so on. "
at all the factors iusts lie between ne and n sthis is something whe can naturally compute,that all the factors must lie between 1 and n. this is something we can naturally compute
n way we have written is rime it will correctly report that one is not a pime t these are,"way we have written isprime, it will correctly report that 1 is not a prime, but these are"
se here so we have three levels of functions now timmes are to which s is iewhich,"do not see here. we have three levels of functions now, primesupto which calls isprime, which"
prime to come e if n smaore we might be able to figure out just were looking at,"the n th prime will come. if n is small, we might be able to figure out just by looking"
to checkithere times and we need a list of all the krines you have,"a time to check if they are primes, and we need a list of all the primes we have seen"
of times ust mt s this says take thse thr values ik th[UNK] names n,"of primes is empty. so this says, take these three values, take three these names and assign"
and p list is the emptlist  this says the same effect  this particular assignd it,"1; and plist is empty. so, this has the same effect this particular assignment."
simple function which just takes ae list of factors gives back the list of factors,simple function which just takes the list of factors gives back the list of factors
the value of cutand we have found a prime so we must aadd it to the list of primes,"the value of count. and we have found a prime, so we must add it to the list of primes. if"
number at we dit a count of n so we outsidde if so this is unconditional,"number and until we hit a count of n. so, we outside if, so this is unconditional we"
each time we imgrement count we are making progress stwoarts this whilse terminating,"each time, we increment count we are making progress towards this while terminating. remember"
of th iput m,of the input n.
n of course we are using fact the implicit factowe know that there are t,"of course, we are using fact the implicit fact we know that there are an infinite number"
from o[UNK] to m so itis easy to usas a for in n trimes we do not know how many crimes,"from 1 to n, so it is easy to use the 'for'. in nprimes, we do not know how many primes,"
wy let us look at the two typical ways in which we write for othe first o,by a while. let us look at the two typical ways in which we write for. the first way
o this statement or there might be mos statement here this a block of thns t,this statement or there might be more statements here. this is a block of things inside the
as n does not pros j  to execute the statement h exact sane statement and you increment,"as n does not cross j, you execute this statement - the exact same statement, and you increment"
so it comes back here and you check now,"n. so, it comes back here and you check now you"
j ndt lae so we hae have a a range in the for we can jus set up a conunnter and anewil,"j and it will exit. we have a range in the 'for', we can just setup a counter and manually"
so yu could have as many xcept block as you have types of errors which you ntisipat,"so, you could have as many except blocks as you have types of errors which you anticipate"
er spaor it is not oliegatrey to ctandle evry kin o of eror only those whch,"errors for it is not obligatory to handle every kind of error, only those which you"
there is an nden,there is an index error.
ill be no code executed for the [UNK] division terroait is note that it tries each one of,will be no code executed for the zero division error; it is not that it tries each one of
as it would come here his is not thae type of,turns that would come here find this is not a type of error.
e ar not hand and finally we have an else which will execute if the try terminates d,"which are not handled and finally, we have an else which will execute if the try terminates"
now whle we normally uuse cuestion handling to deal with errors which we do not and discipate w,"now, while we normally use exception handling to deal with errors which we do not anticipate."
we saw resimtly that we can use bdisionaries in thn,we saw recently that we can use dictionaries in python.
with each kee which is a naame we have a list of scourse,with each key which is a name we have a list of scores.
now suppose we want to add a score to this,now suppose we want to add a score to this.
this is a new bacm there is no key for py in hich case we have to create a key bb,"this is a new batsman, there is no key for b in which case we have to create a key by"
setting scores of b equal to the list contining this ight so we have two ordeinative modes of operation,setting scores of b equal to the list containing s right.we have two alternative modes of operation
so we want to appand it,"so, we want to append it."
we want to distinguish these two cases,"so, we want to distinguish these two cases."
so we say if b is in this code dot keys if we have b as an existing key then we append,"so, we say if b is in the scores, dot keys if we have b as an existing key then we append"
r,a key error.
but it is just ymphasizing that once we have a ception handling under ur control we,but it is just emphasizing that once we have exception handling under our control we may
ay be able to do things differently from what we are used to and sometimes these may,be able to do things differently from what we are used to and sometimes these may be
would like to do is provide a plan on how to deal with this ecceptional situation and,"would like to do is provide a plan, on how to deal with this exceptional situation and"
this cal resides n executing this cod and this definition might have yet anothe,"so, this call results in executing this code and this definition might have yet another"
in  we did not put it in a tilog and so the error is not handle,"in h we did not put it on a try block and so, the error is not handled."
back to whatever callum,back to whatever called it.
then  his error will cals j to a bord,then this error will cause g to abort.
so what illhappen next is that if g does not handle it then this will go back to he,"so, what will happen next is that if g does not handle it then this will go back to where"
exception handling g y ask when something goes long how do we provide corrective action,"so, exception handling may ask, when something goes wrong how do we provide corrective action."
of caulse haricly we can catch it at any point,of calls hierarchically we can catch it at any point.
up from the point thart is calling us,up from the point that is calling us.
the program and henh is much more pront rers ad they refor t is useful to beav,"the program and hence is much more prone to errors and therefore, is useful to be able"
o all this what we require is a way of capcturing these errors within the program as it is doning,for all this what we require is a way of capturing these errors within the program as it is running
not o notice the sutelty of these for example when we run python and we type someh n,"not have noticed the subtelty of these for example, when we run python and we type something"
from a string to an integer bhether string s is not a valid representation of an integer,from a string to an integer where the string s is not a valid representation of an integer.
so what we are really interested in is thereros that happen in valid programs,"so, what we are really interested in is errors that happen in valid programs."
that the name is not defined a we also get a code at the beginning of the line,that the name is not defined and we also get a code at the beginning of the line saying
gives us an index a name error and it says clearly that the name x is not defined,"gives us an index error a name error and it says clearly that, the name x is not defined."
n along with the mesures division by [UNK] and finally if we have a list say [UNK] [UNK] and then,"and along with the message division by 0 and finally, if we have a list say 1, 2 and then"
we ask for the position three then it will say that there is no position thre inthe,we ask for the position three then it will say that there is no position three in this
t t,list.
let tufirst quickly settle on some terminology,let us first quickly settle on some terminology.
and as we saw it comes in two parts there is the kype of the error what kind of,"and as we saw it comes in two parts, there is the type of the error give what kind of"
we trying to write to a ile but the disk is actually ful,"be trying to write to a file, but the disc is actually full."
an do with strings in thet a previous lecture we look at other things you can do with sing,"do with strings, last, in the previous lecture we looked at other things we can do string"
nin replace in all the was this is like that it is in the same class,"like, find, replace and all this things, so this is like that, it is in the same class."
the string here is actually going to call a ordmat metter sthe easiest way,"so, the string here is actually going to call a format method. so, the easiest way to do"
two uny things in braces  the unythings in braces are to we tok,two funny things in braces. the funny things in braces are to be thought
of as the equivalent of arguments in a functions these arethings to be replace by actualy,"of as the equivalent of arguments in the function, these are things to be replaced by actual"
then the [UNK] refers to the first argument and one referst second argum o ha,method then the 0 refers to the first argument and 1 refers to the second argument. so what
pass it to python the reselting thing is first colon [UNK] [UNK] second colun el[UNK] because the first,"it to python the resulting thing is first colon 47, second colon 11, because the first"
and we can do the same thing by name instead of thi is exactly like difining a function were,now we can do the same thing by name. this is exactly like defining a function where
however it takes an optional argument end equal to stringth which changes what we put,"however, it takes an optional argument end equal to string which changes what we put"
as [UNK][UNK] and s lem rightso here we are using the name and not the position so the order in which we,"as 47 and s as 11, so here by using the name not the position. so, the order in which you"
a string and we have told us how to replace values for place holders listring,a string and we have told us how to replace values for place holders in the string. there
thi is an areal cormatting just happened because  what ever we did wit that we could hve aldy,is no real formatting which has happened because whatever we did with that we could have already
and then a [UNK]this whole thing this part of t comes from the forma so i have a black,"and then a 4. this whole thing, this part of it comes from the format. so i have a blank"
space a blak space in a [UNK][UNK] because i was stoled to put f[UNK] i in a width of [UNK]re i thinon,"space, a blank space and a 4, because i was told to put 4 in a width of 3 and think of"
from a space to whatever we want and in particular if we do not want any spaces we can put,from a space to whatever we want and in particular if we do not want any spaces we can put them
[UNK] [UNK] sol be treated as a floting point value and the second thing is that it sas,should be treated as a floating point value. and the second thing is that it says this
value incruding the demt point everything is going to be x tarrctrs wi i,"value including the decimal point, everything is going to be 6 characters wide."
te tw says how many disis to show after the desimnal point if i apply all this,"finally, the 2 says how many digits to show after the decimal point. if i apply all this"
now sometims we wan to be a limtle bit more precise  for this we can use the for mat,"now, sometimes you want to be a little bit more precise, so for this we can use the format"
,can be done. 
supposing we have defined ha function square of x which ice returs xsteps dnow,"supposing, we have defined a function square of x, which just returns x times x; and now"
and ru is being a ware this is exactly as we said like before like,"to x, and 2 is being assigned to n. this is exactly as we said like, before, like, saying"
place to another place and execute that function inside the another function without oining,"to another place, and execute that function inside the another function, without knowing"
will ome  b because a second position  is smaller than  this wl e,"aab will come before ab, because, the second position a is smaller than b. so, this will"
pwus plus [UNK] because ad d as lengh  and is othe  so we could write,"us plus 1, because, aab has length 3 and is longer than ab. so, we could write a sort"
to a g en if you want you can combine it o the earl,"than, equal to or greater than. then, if you want, you can combine it with the earlier"
to sumarize function definitions behave just like other asignments of values soul n,"to summarize, function definitions behave just like other assignments of values to names."
o you can usis one function o make it point name point to another function,"crucially, you can use one function and make it point, name point to another function,"
this is impletily use when we pass functions to althe functions and the situations like,and this is implicitly used when we pass functions to other functions and in situations like
which should take a string irit to represent it as an intether if s is a valid representationon,"will take a string and try to represent it as an integer, if s is a valid representation"
and this is effectaaly the same as hatie bhen implisit assinment sowwe say  wr,"and, this is effectively the same as having an implicit assignment. so, when we say power"
at a vald number if i could actualy emrate an,"not a valid number, ã’a5ã“ would actually generate an error."
that is not dovidee and sstiut t the default value,"that is not provided, and substitute to the default value 10."
now if we do provided n value then for instance we can even make sense of,"now, if we do provide it a value, then, for instance, we can even make sense of ã’a5ã“."
n are using usually written using vcd so a corresponds to what we will think of this,"are usually written using a, b, c, d, e, f. so, a corresponds to, what we would think"
[UNK]th position and this is the one ion so we have [UNK]t times stem is a is stm,"sixteenth position and this is the ones position. so, we have 16 times 10, because the a is"
plus p so in nnumeric tterms s wil return [UNK] [UNK] coeretly,"10, plus 5. in numeric terms, this will return 165 correctly."
ouwant an option and efort argumen you cuwrite the value in the function eftion,"you want an optional default argument, you provide the value in the function definition."
take the value m otherwise if you take the value provide it ythe function column  default,"take the value 10. otherwise, it will take the value provided by the function call. the"
tha the default values usd itstead but one thing to remember is that thisis default,"then, the default value is used instead. but, one thing to remember is that, this default"
asigns t there and of course the a vantage of calling it an the function is that,"this assignment there and of course, the advantage of calling it as the function is that, we"
s here is a  simple o oo te  supose we have a function with f[UNK] arumin v t and,"here is a simple prototype. suppose we have a function with 4 arguments a, b, c, d and"
iti ill have to gen define the function toreorde,not possible; i will have to redefine the function to reorder it.
interprets this like any other assignment of a value to l for instance this value,"python interprets this like any other assignment of a value to a name. for instance, this value"
and in particular you can go on and redefine f as you go on n,"exists and in particular, you can go on and redefine f as you go ahead."
which as we said associates with the name f the body of this function at at,"which as we said, associates with the name f, the body of this function; at a later stage,"
one dictionary to another now why would you want to do this useseful,"dictionary to another and so on. now, why would you want to do this? so, one useful"
way in which you can do this use this pacility is to pass a function to another function,"way in which you can do this, use this facility is to pass a function to another function."
suppose we want to apply a given function f to itis argument n types then we can orite,"suppose, we want to apply a given function f to its argument n times, then we can write"
thsecond ist the argument and the third is the number of times ryptition,"function, the second is the argument, and the third is the number of times, the repetitions."
gve t more meanid ful ings and then it says that this function takes three values as in puts,"give it more meaningful names. then it says that this function takes three values as inputs,"
nything useful to do so we have a function wich wbecaus stupid which takes,not have anything useful to do. we have a function which we call stupid which takes
aes is in just for no good reason sets the name n to have the value [UNK][UNK] now suppose we havde in our,does is it just for no good reason sets name n to have the 17. now suppose we had in our
program outside a statement wich a sign h valu [UNK] to h namand then we call h,"program outside, a statement which assigned the value 7 to the name n and then we call"
function now obviously say stpid w d v will be also the input so tv wiv will become,"this function. now obviously, if we say stupid of 8 then v will also be the input, so v will"
are two different copyes of n so any name which is used inside a function is to e ti,"are two different copies of n. so, any name which is used in side of function is to be"
ydo because itis just confusing if you use the same name inside and outside  sosme times,"do because is just confusing if you use the same name inside and outside, but sometimes"
j k [UNK]to ruo lists no like ranges and thig hat and it will be un,j k run through list you know like ranges and things like that. and it will be a nuisance
t since  not intrack anyway we can freel use i and say wherever we wan,interact. since they do not interact anyway we can freely use i j wherever we want and
is invoked now this is a slightly suttle point less just look at itlittle more,"it is invoked. now this is a slightly subtle point, so let us just look at it little more."
so wen the pythen program is read it reacs s the definition of f but does oit executed notie,"the python program is read it reads the definition of f, but does not execute it, and notice"
in a function we might have a statement like this called retr,within a function we might have a statement like this called return.
so it sif i put this statement execute f before i define j and f requires  then,"statement. so if i put this statement, execute f before i define g and f requires g then"
this statement wil create an rrr as this statement  nott s,this statement will create an error whereas this statement will not.
function of this kind sence these are coled recursive functions functions which li on them sel,"function of this kind, these are called recursive functions. functions which rely on themselves."
[UNK] into n inus [UNK] into  down to one i you take m and multiplyed by all hnr,1 into n minus 2 into n down to 1. so you take n and multiply it by all the numbers
of a smaller factort it is n times n minus [UNK] fytorry so that is what this function h,"of a smaller factorial it is n times n minus 1 factorial, so that is what this function"
[UNK]and the point is a factor ri ob [UNK] in now terminated and itwill give one becaue i,"of 0 and the point is that factorial 0 will now terminate and it will give me 1, because"
function o coded to smaller functions is much easier to understand to rea and to maintain,"your code into smaller functions, it is much easier to understand, to read and to maintain."
if the are immutable any change within a function does not affect the argument outside also,they are immutable any change within a function does not affect the argument outside. also
the function does not in any wayy afect the name outside  functions have no lo,"the function does not in any way affect the name outside. so, functions have local notion"
of functions must be defined before they are use and this is a good reason to,also functions must be defined before they are used and this is a good reason to push
alla function definitions to the beginning of th pro program so that the python interferat,"all your function definitions to the beginning of your program, so that the python interpreter"
this which takes x and rases it to the power n let us just look at the function just,this which takes x and raises it to the power n. let us just look at the function just to
tunderstand what the code is toay so we assume that the value of the answer is  nd nw,understand what the code is doing. we assume that the value of the answer is 1. and now
for as many i as there are in the range [UNK] to n minus [UNK] ltiply x into answer so,for as many i as there are in the range 0 to n minus 1 we multiply x into answer so
form sa powr [UNK]  so obviously what this means is that [UNK]e should be used for x and,"form, say power 3, 5, so obviously, what this means is that 3 should be used for x and 5"
use for n and we would then run this code with the values x equal to  and an equal l,should be used for n and we would then run this code with the values x equal to 3 and
a function is a group of statements which performs a given task oof course we could,"a function is a group of statements which performs a given task. so of course, we could"
this corde its as though we have this corde inteinnserted into ur program at this point proceeded,"this code, it is as though we have this code inserted into our program at this point preceded"
by this assignedt the assignment basically as set the value of the name x to the alue,"by this assignment. so, this assignment basically says set the value of the name x to the value"
assinment in the regular clase,assignment in the regular case.
that happens with ut of things like lists o in y intable values will not be affectedd a,that happens with mutable things like lists. immutable values will not be affected at the
and finally v is the value to be,"position, and finally v is the value to be replaced."
[UNK] ond l minus [UNK] so it is greater than eual to [UNK] and it is stricly less than the ngth,0 and l minus 1. so it is greater than equal to 0 and it is strictly lesser the length
an update so what wne wio do is effectively return false this s,"we cannot do an update. so, what we will do is effectively return false. this is just"
different arguments o they constitute a unit of comptation which can be used petedly,"different arguments. so, they constitute a unit of computation which can be used repeatedly"
that ve would be an imutable vile so let us ase we call it noso what we do,"that v would be a immutable value. let us assume we call it now, so what we use do is"
we set up a list of numbers a list of number [UNK] [UNK] and then we want to replace e this l say by [UNK],"we set up a list of numbers 3, 11, 12 and then we want to replace this 12 say by 8."
by the value of [UNK]t now as we saw if the value is fo en this if will fail so wit will,"4 by the value of z. now as we saw if the values 4 right then this if will fail, so"
what ahes was  so as you would expect after executing these forse statements we calle,"what happens to z? so, as you would expect after executing these four statements, because"
anthere are a cupple of other a points to now,"the program. now, there are couple of other points to note"
about this function just to illustrateone is that we have here two return statements t,about this function just to illustrate; one is that we have here two return statements:
urn true or return false the idea is that they indicate to the caolling function hwe e,return true or return false. the idea is that they indicate to the calling function whether
is ved and i return true or  fals depending on whether the it supcede,is valid and it will return true or false depending on whether they update succeeded.
of this there may be functions which do not retern anything useful at all a typulal example,of this there may be functions which do not return anything useful at all. a typical example
may be no return functon so by defaut what happens is that a function executes li,"may be no return function. so, by default what happens is that a function executes like"
l order all this problem the first obsorvition we can make is that if we have a sequenc,"in order to solve this problem the first observation we can make is that, if we have a sequence"
ascending order rightso we start with a hich is smallest n then p and c are so on e,in ascending order. so we start with a which is smallest one then b and c and so on and
and we lre work back wards dow to  if we want to  find the next cotation ww,m and we work backwards down to a. if we want to find the next permutation we
you want to find the long list suffex that cannot be incremented suff at cannot we,"we want to find the longest suffix that cannot be incremented. so, a suffix that cannot be"
reemntie is on whictcsas aas lactce eas it wod posiy    whit ben us ole,incremented is one which is as large as it could possibly be which means that it is already
so if i fix the letters from d to k then this is the largest pcommutation h it can generate we,"so, if i fix the letter from d to k then this the largest permutation i can generate with"
it i canot imprement it within this red box  so i must extend this to find the shortest,"it, i cannot increment it within this red box so i must extend this to find the shortest"
uf x nglt ef ex startedw iwith k where something can be implemented how do,suffix namely; suffix started with k where something can be incremented. now how do we
position o every queen on every row and if it was free then we try it out i,"position for every queen on every row, and if it was free then we tried it out and if"
but wh is bigger than  sthat means that up two here we have e a sublexts that canno,"than o, but o is bigger than k so that means than up to here we have a suffix that cannot"
be iprlemented n this is tae first position where we can make an t,be incremented and this is the first position where we can make an increment.
i so it is int sorted order s wou can go theue and find the first position wee,"order, it is in sorted order so we can go through and find the first position where"
and what we did to the descending undois replace m by k but one o the property of,and what we did to the descending order we replace m by k but what are the property of
queen the rowow the column numbers if we read them row by row the column number oma permuetation,"queen. the column numbers if we read then row by row, the column numbers form a permutation"
this is a complete way in all which to find the next pretation wak backwords rom,"this is a concrete way in all to which find the next permutation, walk backwards from"
the suffex i we want to increment of course if we go all the wa an wen go back to,"the suffix that you want to increment, of course if we go all the way and go back to"
te first letter ain we have not found sus a punion and we have already,the first letter and we are not found such a position then we have already reached the
eass eputation in the ovl scheme of things,last permutation in the overall scheme of things.
positon n this case m to slop ith k after sopping it we take the suffx after n,position in this case m to swap with k after swapping it we take the suffix after the new
letter we put namelye nd and we reverse it to get the smallest plementation startend othe,letter we put namely m and we reverse it to get the smallest permutation starting with
o [UNK] to n minus [UNK] so each number [UNK] to n minus [UNK] hs exactly ones[UNK]s as a column numbr,"of 0 to n minus 1. so, each number 0 to n minus 1 occurs exactly once as a column number"
dwhich squares are under attack and placing the queens one by n o,which squares are under attack and placing the queens one by one.
so whye we are on the topic of local coe python allows us to define functions within functio,"while we are on the topic of local scope, python allows us to define functions within"
and now we can update x for instance y for lint by calling j of x pes f x rather than,now we can update y for instance by calling g of x plus h of x rather than just setting
f sothey are inside f right sthe inside f and hence they are not visible outside,"so, they are inside f, and hence they are not visible outside."
now by default in python scop is lopcal to a function we saw that if we use he n inse,"now by default in python scope is local to a function, we saw that if we use a name inside"
ource to everybody s and this is aa possible here,exposed to everybody else and this is a possibility.
h s if you look up an x hre i ou first rite to look up in f this is not the n,"so, if we look up an x here it will first try to look up f, if it is not there in f"
either we can declare it ogr in which case we can update it within g or h or if aw,"so, either we will declare it global in which case we can update it within g or h or it"
inside f but not to the value outside f,"value inside f, but not to the value outside f."
ht  into the function and make it updatable with in a function,in to a function and make it updatable within a function.
the name ynow the question is what is,"name y, now the question is: what is this x?"
qhere there is an x here,well there is an x here.
e,code.
tht  is extra assignment hics you could pretendinto inside t,to f 1 dot py is extra assignment x equal to 22 inside f.
a this point inside,at this point inside f.
rewilling to look up the outside x it insists that there is an inside x,willing to look up the outside x it will insist that there is an inside x.
of x is not found in f python is willing to look at the inclosing function for,"so if x is not found in f, python is willing to look at the enclosing function for a global"
x,x.
however if x is updated in f then it becomes a local name and then it gives an n,"however, if x is updated in f then it becomes a local name and then it gives an error."
element of x to [UNK],element of x to 22.
shere we have this function in which we n camed x from a integer to a list and he,here we have this function in which we now changed x from an integer to a list and then
ntsin,we try to assign it in y.
so blobul names hat point omumical values can be updated,"so, global names that point to mutable values can be updated within a function."
passing the board on whiths inside  queens actually requires no further expornation es,avoid passing the board around with its inside 8 queens actually requires no further explanation.
the definition so that po does il occurrdent works fine,so that board does not occur and works fine.
s tyoing to look for the value which is defined outside namely this itse empty dictionary,going to look for the value which is defined outside namely this empty dictionary.
wesayd for our purpose which is to fix that [UNK] queens proper without haging to,"so, as we said for our purpose which is to fix that 8 queens problem without having to"
eter,outside the function.
this srings are stu a consert of schoe,"so, this brings us to a concept of scope."
this is a way of telling python do not confutses this x equal to t  with creat,"this is the way of telling python, do not confuse this x equal to 22 with creation of"
of a ne nurpl name x,a new local name x.
all xis refer to an f are actually the same as the x outside and to be threated,all xâ€™s referred to in f are actually the same as the x outside and to be treated as
ro,a python program.
o to set et wn[UNK] sie,x got set to 22 inside f.
so we woud expect the second prite statement tgive u [UNK][UNK],"so, we would except the second print statement to give us 22."
so if we ave done this indeegisi s what we see  we have two lines he first,"so, if you run this indeed this is what we see right we have two lines, the first 7 comes"
n it recersion and we saw moization and dianmig programing as tos to do this,"than naâ€¢ve recursion, and we saw memoization and dynamic programming as tools to do this."
a unikqewat  this gives us usln upt te l,"in a unique way to (i, j) this gives us our simple inductive formula,"
any ways can i go from [UNK] [UNK] and just stay ind [UNK] [UNK] e there is only on way witl stempti,"many ways can i go from (0, 0) and just stay in (0, 0)? well there is only one way, it"
allong the left column weremoving aong the left column then there is no parts comin,"along the left column, if you are moving along the left column then there are no paths coming"
ways there are to bo fom the bottom left corner to the top right comso woe wan,"ways there are to go from the bottom left corner to the top right corner. so, we want"
arealy on the wost set out roaws so par iow can only come from the left from p,"we are already on the lowest set of roads. so, paths(i, 0) can only come from the left,"
ad an extract lus which says barts i j is [UNK] if thre is a hole a i jj,"just add an extra clause which says paths(i, j) is 0 if there is a hole at (i,j); otherwise"
tm m be for m n fi[UNK]i but in turn in order to compute for ten i will wt to,"10), namely (4, 10) and (5, 9) but, in turn in order to compute (4, 10) i will have to"
we need to compute oe we first check thet table if it is already there weil look it up,"we need to compute one we first check the table, if it is already there we look it up,"
that the base value at [UNK][UNK] [UNK] is  now once we have done this,"remember that the base value at (0, 0) is one, and now once we have done this it turns"
and these two are non so i can add the nopmr the sum of the value,then these 2 are known. so i can add them up; remember the value at
any position is just the value to itself plus the valueat is ottom and now i start t the,any position is just the value to its left plus the value to its bottom and now i start
so here is one path drown in bue re,"so, here is one path drawn in blue."
hat means that no ath is actualy allowe to oigate trugh that,"that means, that no path is actually allowed propagating through that row."
in the rong direction  sohere for instance we have only [UNK] pun somting rom the left,"from the wrong direction. so, here for instance we have only 6 paths coming from the left"
a different part tom red and notice that these two cars actually start,"here is a different path drawn in red and notice that these 2 paths actually, start"
rrely you should get the same anser there is a third way to do this,we should get the same answer. there is a third way to do this.
first element to itis type so we can do this diago notice that any diagonal,"first element to its right. so, we can do this diagonal, now notice that any diagonal"
tabele in a iteritivfe fact not recursivy we dono wan to call f of i j and then,"table in an iterative fashion not recursively we do not want to call f of i, j and then"
but the values we need pop n mutle different orders so we e,"we need, but the values we need could come in multiple different orders. so, we could"
diagonal but it does not matter so long as we actually get all the values that we need,"it diagonally, but it does not matter so long as we actually get all the values that we"
the pri because whenever you make a recaurive call oyu have to susspenda computation in st,"price because whenever you make a recursive call, you have to suspend a computation, store"
in the grip parting there is one situation where we can illustrate this imagine that,in the grid path thing there is one situation where you can illustrate this. imagine that
to reach this svery clear that i can only come all the way along the top row or all,to reach this its very clear that i can only come all the way along the top row or all
wecome back and recursively  explore it  never ask us to come here because wet never,we come back and recursively explore it will never ask us to come here because it will
a vast number of entries so and square is much larger than to en emmber,computing a vast number of entries. so n squared is much larger than 2n remember. it will take
theflipside is that each entry that we need to add to the memor table requires [UNK],flip side is that each entry that we need to add to the memo table requires one recursive
to make these up and write os and the question is how many total such different pas he,"to make this up and right moves and the question is, how many total such different paths are"
is just to determine how many moves we have to make we have to go from [UNK] to [UNK] and n,"is just to determine, how many moves we have to make. we have to go from 0 to 5 in one"
direction and [UNK] to t[UNK] ind the other diition so we have to make a dotl number of [UNK]ois[UNK],"direction and 0 to 10 in the other direction. so, we have to make a total number of 5 horizontal"
rt steps and [UNK] must be vertecal steps because they all take us o [UNK] [UNK],"horizontal steps and 10 must be vertical steps, because they all take us from (0, 0) to (5,"
first oit an upmove then we make a riht move then we make an upmove i make another move,"first we make an up move, then we make a right move then we make an up move then make another"
and if we fix the y right moves then ortomiatically all the remain ex slots must btn upards or o,and if we fix the 5 right moves then automatically all the remaining slots must be 10 up moves
versea so itis ae [UNK] chose [UNK] it is the way of choosing,"or conversely. it is either 15 choose 5, it is the way of"
of [UNK][UNK][UNK] [UNK] y is clearly the same s [UNK] [UNK]h [UNK][UNK] because we could also fix the t[UNK] moes,of 15 choose 5 is clearly the same as 15 choose 10 because we could also fix the 10 up moves
much more compute ethen writing out large factorials and then seeing ghr the numbr,much to compute other than writing out large factorials and then seeing what the number
so we can count these bad parts and suptract them from the good pas now do we count,"so, we can count these bad paths and subtract them from the good paths. how do we count"
back ak well we can just  solve the saller version the problem we have an intermediate,"the bad paths well we can just solve a smaller version of the problem. so, we have an intermediate"
here hre commony passbe from here to here o from [UNK] [UNK] to [UNK] we gt,"here to here, how many paths go from here to here. so, from (0, 0) to (2, 4) we get"
[UNK] and from here to here the difference is that we have to do in both directions [UNK] an,15 and from here to here the difference is that we have to do in both directions 3 and
se in the bottom can be had combine with e on the top so we multiply this and e,"ways in the bottom, can be combined with a way on the top. so, we multiply this and we"
ou  all the parths which get block cause o the first interetion  cout,"count all the parts which get blocked because of the first intersection, we can count all"
o we can count all these parths which pass throuh [UNK] or [UNK] this e no,"been blocked. so, we can count all these parts which pass through (4, 4). this we know how"
let us look at the inductive structure of the problem supposen we say we want to e,"let us look at the inductive structure of the problem, suppose we say we want to get"
one step to ithe section i comman j how can we reach this in one step since our rowds,"in one step to intersection (i, j). how can we reach this in one step since our roads"
in other words if we say that parks i j is the quantity we want to compute we want,"in other words if we say that paths(i, j) is the quantity we want to compute, we want"
t count the number of parts rfrom o [UNK] to i j these tats must break up into [UNK]o dsoin,"to count the number of paths from (0, 0) to (i, j). these paths must break up into 2 disjoint"
in the  lecture we saw how to uuse the input and print statements e collect npt,in the last lecture we saw how to use the input and print statements to collect input
so backslacsan is a notation which denote a single carctr eve tho it loks like,the backslash n is a notation which denotes a single character even though looks two characters.
in other word wou e gl to transfer this from one  to another en,"in other words, if you are going to transfer this from one file to another, you do not"
worry about reinserting backsahon  because it is already he,want to worry reinserting the backslash n because this is already there.
that you have a large storitg facility in whichyou store things in big  tns,imagine that you have a large storage facility in which you store things in big cartons.
we could have a linguage  aunit correctors and ex lin  three correctors and so on,"so, we could have a line which has 100 characters, next line could have 3 characters and so on."
neverything up to that py sass will be returned as the effect te string returned by,everything up to the backslash n will be returned as the effect to a string return by the readline
in case we want to actually tiyvert from this strategy there is a command sink which takes a o,"in case we want to actually divert from the strategy there is a command seek, which takes"
finary we can modify the read statement to not read the entire  bu ter,"finally, we can modify the read statement to not to read the entire file, but to read"
oty [UNK] we wi read the next pand number and keep going an thes,"so, if we say fh dot read 10, it will read the next pan number and keep going and this"
wl se u some space in the,will save you some space in the long run.
if yu are reading line by lin then we may want to know when the fias end it,"so, if you are reading a file line by line then we may want to know when the file has"
,ended.
so one is f we try to red using the read command and we get nothing back  we get a,"so, one is if we try to read using the read command and we get nothing back, we get an"
if we return the empty string it means that we have reache,"so, read or readline if they return empty string its means that we have reached the"
soright takes an argument which is a string,"so, write takes an argument which is a string."
sothis takes a list of strings and writes them on[UNK]e by one into the,"so, this takes list of strings and writes them one by one into the file."
o the  point  by the l hand,it to the file pointed to by the file handle.
ot of ro,they are flushed.
co to the dist,copied out to the disk.
it also now means that fh is nono longer associated with the fat we are dealing with,it also now means that fh is no longer associated with the file we are dealing with.
,print.
,python.
all on to the list do not wait for the irites to acqumulat ntil the buffer is full,"all on to the disk, do not wait for the risk drives to accumulate until the buffer is full"
and then riht as wouil normally woold to the list,and then write as you normally would to the disk.
here is a typical thing that you would like to do in python which ist to process  line,"here is a typical thing that you would like to do in python, which is to process it line"
so for each line that i read from the list inl dodriade lines i just write it to t,"so, for each line that i read from the list infile dot readlines i just write it to outfile"
instead o aying for each line ininth can just write it directly out,"so, instead of saying for each line in infiles i can just write it directly out."
,annoyance.
the line becaus the are iis ible tous he,the line because they are invisible to us.
basis and thaps and if thereisthe nd of the line we do notkowhether the line endthe,"spaces and tabs and there at a end of line, we do not know the line ends with the last"
we see  the are spaces after e,character we see there are spaces after words.
it will lso repyr the jum  there is some spaces and dak bfore the vn an,it also strips to other jump there is some spaces and tabs before the backslash n and
nreturn a,return that.
we can also stri from af using else strip or we can strip on both side hif we just,we can also strip from the left using l strip or we can strip on both sides if we just say
now let us open the python interprenter and try to read lines from this ilen prentete,"now, let us open the python interpreter and try to read lines from this file and print"
no s or a blink line betwen every line in r  that is because when we read lines e,"now, why is there blank lines between every line in our file that is because when we readlines"
the quick brown the first line enge of back session  lines o back session,"so, the quick brown, the first line end with the backslash n, fox end with backslash n"
this is like getting access to a buffer from which data from that yi can be read i e memory,this is like getting access to a buffer from which data from that file can read into memory
the only way that we can undo this is to start again by closing the,the only way we can undo this is to start again by closing the files.
this  is the,this closes of the file.
now having open this pil handle everything we do i the i is actually done wth,"now, having opened this file handle everything we do with the file is actually done with"
do readlines,f dot readlines for each line.
put  [UNK]xt are as before we say g is  to open output dot txt dand now we,input dot txt r as before and we say g is equal to open output dot txt w and now we
out t look at the lines the queekdont fo eetera now f exmle scn,"turn out, if you look at the lines quick brown fox, etcetera, for example, the second line"
just fox fx has [UNK]re letter but if ye c the back slesn itis wrote out [UNK] letters,"is just fox, fox has three letters, but if you include the backslash n its wrote 4 letters."
to summarize what we have seen is that if you want to interact with les we it throuh,"to summarize what we have seen is that, if you want to interact with files we do it through"
so we do not directly try to recend write om the ist instead we write and red and write om,"so, we do not directly try to read and write from the disk, instead we read and write from"
memory and the e on the list,the memory and the file on the disk.
we saw that we have read read lines and read lines so using this we can either read the entire in,"we saw that read, readline and readlines, using this we can read the entire file in"
shot as a string or read it line  lie,one shot of the string or read it line by line.
similaly we can ithe write a stringk or we can write a list of strings to,"similarly, we can either write a string or we write a list of strings too."
so we have right comein a right lins and wright lines is ore correctly to be shouted,"so, we have a write command in a writelines and writelines are more correctly to be interpreters"
buffea by using the flesh cormmat and we also saw that there are some string operators,buffer by using flush command and we also saw that there are some string operations
with ur processing we noee to makek sure that all the data that we have rite gos back,with our processing we need to make sure that all the data that we have written goes back.
data you wanted to write tte ile is actually taken out a the bufer and put oun to,any data we want to write to the file is actually taken out to the buffer and put on to the
ist and this is tepchonically ld flushing the buf,disk and this technically called flushing the buffer.
the first argument that you give open is the actual  name on your dis,the first argument that you give open is the actual file name on your disk.
first part in an extension,first part and an extension.
or diitary where you are running thi scrip,or directory where you running the script.
you can give a in name hiath belongs to a different part if you,"so, you can give a file name which belongs to the different part of your directory hierarchy"
os or unix or what oprating system lus,"on windows or unix, what operating system you are using."
for large data we ar force to de with fs which resiide on the dist,"so, for large data we are forced to deal with files which reside on the disk."
so what we have to do is decide in advvance whether we ule to read from a,"so, what we have to do is decide in advance whether we are going to read from a file or"
so we have to read a large volume of data whh is aldray be writken on a he,"so, we have to read a large volume of data which is already written on a file in the"
tappend wdos it it wud take a [UNK] which already exist and add,what append will do is it will take a file which already exists and add the new stuff
ist a the output we compute is typicaly otien back into another le on the list,disk and the output we compute is typically return back into another file on the disk.
he name contens,the name contents.
cunce is now assigned the entire data which is in the file handle pointed [UNK] by,"so, contents is now assigned the entire data which is in the file handle pointed by fh"
now we can also consume a  so we are typicaly dealing with tex lse,"now, we can also consume a file, we are typically dealing with text files."
at return is then transmitted by input as a string to the name that you have assigned to,the return is then transmitted by input as a string to the name that you assigned to
read line is like that but the difference between read line and input is that e,"so, readline is like that, but the difference between the readline and input is that, when"
you af to remembe hat you have theis extrac carictf loting o an the,"so, you have to remember that you have the extra character floating around at the end"
the for loop has a fixed number of repetitions on the other hand  ine loop is typial,"so for loop has a fixed number of repetitions. on the other hand, a while loop is typically"
e to the larger of m and n and in one scan compute list fm and fn,1 to the larger of m and n and in one scan compute list fm and fn.
do it again so if you have not change something which makes the condition false you will never,do it again. if you have not changed something which makes the condition false you will never
n our printious example in order to make the condition false we  i to becomes,"in our previous example, in order to make the condition false we need to i to become"
have a dangerous kind of behavior called an infinite loop  where the complaons,have a dangerous kind of behavior called an infinite loop where the computation just keeps
in oter words for each i in this list one to the maximum of m and n if first check if,in another words for each i in this list 1 to the maximum of m and n we first check if
n this lecture what we have seen is that we mant start with a veryin iidear wei,so in this lecture what we have seen is that we can start with a very naive idea which
more or less implements the function as it is defined and work ar ways to dmatical,more or less implements the function as it is defined and work our ways to dramatically
will run through all these values n way because we scan all these numbers in order to find,will run through all these values anyway because we scan all these numbers in order to find
we can actually come up with he rammatically different way to compute gcwhich will,"we can actually come up with a dramatically different way to compute gcd, which will be"
and if so we add to te list f o iste  o f godn two separate scans over [UNK] to m,n and if so we add it to list fn. instead of doing two separate scans over 1 to m and
new ideals,new ideas.
says that we want two conditions to be tre we want the remainder when m is divided by,"says that we want two conditions to be proved, we want the remainder when m is divided by"
i  in other words i diideis n and we also want the remainder when n,"i to be 0, in another words i divides m and we also want the remainder when n is divided"
each time we can start with one and each time we find a larger common factor we can discare the,each time we can start with 1 and each time we find a larger common factor we can discard
aptading this name with the value of the common facttor we saw last,updating this name with the value of the common factor that we saw last.
directly scan  all the possible common factors from [UNK] to the ninimm of m and n weever,directly scan all the possible common factors from 1 to the minimum of m and n. whenever
one as a common factor we will at least have amrsh cf equal to [UNK] but if we,"since one is the common factor we will at least have mrcf equal to 1, but if we find"
of facctors in both list or common factors and ourr goal is to return the greatest comon,of factors in both lists or common factors. our goal is to return the greatest common
is for iteration or loop what we endup with is  the largest common factor that e,this for iteration or loop what we end up with is the largest common factor that we
found between e[UNK] and te immmm and n which is indete the gcd of m  n,found between 1 and the minimum of m and n which is indeed the gcd of m and n.
we can stilll doe some further optomiations since we ar looking for the largest common fact,"we can still do some further optimizations. since, we are looking for the largest common"
we can start at the end of the list and work back wwards so insteand of running from [UNK] to th,we can start at the end of the list and work backwards. instead of running from 1 to the
the gurantee is that one will always shoow of as a common factors  if there are o,"the guarantee is that the 1 will always show up as a common factor, so if there are no"
he common factors at the very end we will find one as sebrates common fact,other common factors at the very end we will find 1 as the greatest common factor.
are working backwards o th largest to smallest the very first common factor we find must,we are working backwards from largest to smallest the very first common factor we find must
when we actually get into formal python let us explore a new way of going through a list of values,"when we actually get into formal python, let us explore a new way of going through a list"
and we implicitly exipt on this function every time you see your return statement and a,found and we implicitly exit from this function. every time you see a return statement in a
i to i minus [UNK] take the current value of i s ract [UNK] and replace it in i the mathematic,"i to i minus 1, take the current value of i, subtract 1 and replace it in i. the mathematical"
euality is ritin n as doble equa to this is what we use n dt,equality is written as double equal too this is what we use in our conditions.
any other programming languhicghes means assign tha value to a valribe this is the n,"many other programming languages means assign a value to a variable. so, this is the final"
well at each round what are we doing we are inserting a new value into a sorted segmet,"well, at each round, what are we doing, we are inserting a new value into a sorted segment"
lngth c,of length k.
sequence of lenth one we instert of value into that whic at of sosequence n,"of sequence of length one, we insert a value into that we get a sorted sequence of length"
n squares or,n square sort.
suppose we do it the other way suppose we take a list which is already sorted,"so, suppose we do it the other way, suppose we take a list which is already sorted, and"
now we ask it to sothen it comes back instante,"now we ask it to sort, then it comes back instantly."
neiher will be bigger than the two s,it can either be bigger than the two we saw before.
so each insert step takes only one tration,"so, each insert step takes only one iteration."
it does not have to go through anything beyond the first element in order to stop the in,it does not have to go through anything beyond the first element in order to stop the insert
e,step.
so actually if yeu saks in a large value like [UNK] [UNK]thu[UNK]an[UNK] or e[UNK] [UNK] t[UNK]hu[UNK]a[UNK] this shu work so inseartho,"so, actually if we take even a large value like 10,000 or even 100000 this should work."
nsort when you already have a sorted list will be quite fast because the insert,insertion sort when you already have a sorted list will be quite fast because the insert
in a sequence and with no prior knoledge about what the sequence looks like it wu,in a sequence and with no prior knowledge about what the sequence looks like it will
so what we do s we scan from top to bottom and so long as it s smaller tha the,"so, what we do is we scan from top to bottom and so longer if it is smaller than the paper"
stack we are buending,stack we are building.
so what we do with this same list that we had for selection f wat is we upice,"so, what we do with this same list that we had for selection sort is we will pick up"
nw  [UNK] is biger than both so i keep it on th top of the stack at the right end [UNK],"now 89 is bigger than both, so i keep it on top of the stack at the right end; 55, i have"
[UNK] ghe eft of [UNK][UNK] then i look at [UNK][UNK] it smallert han [UNK][UNK][UNK],"so, it goes to the left of 89 then i look at 74 it is smaller than 74 it goes to the"
lelft,left of that.
,55
we start building a sort sorted sequence with one element pick up the next one sorted element,we start building a sort sorted sequence with one element pick up the next unsorted element
and insert into a collike place into the already sorted sequence,and insert it in to a correct place into the already sorted sequence.
t tht tnt tk tithbktitxthtothtitstltxtstototkck'gtot titotkt,"1 and there are some positions, so that up to this point everything is sorted."
at each time wwe look at the value at actuall,"and at each time, we look at the value at."
the slice is upe to slice in minus inus,actually the slice is up to sliceend minus 1 sorry.
we look at the value immediately after that which will be the position called slice,we look at the value immediately after that which will be in the position called sliceend
if e have exchange it that means that this value as no gone here,"now if you have exchanged it that means, that this value has now gone here."
now we again compare it o the previous value and if it is smaller we excange,"now, we again a compare it to the previous value, and if it is smaller we exchange it."
so again this means that it go is one more posision,"so, again this means that it goes one more position."
now we pick the second paper from the old stack and we look at itis marks as pe,now we pick the second paper from the old stack and we look at its marks as compared
nonthing happens,so nothing happens.
now we wil compee [UNK] o t value to its ep and there is no change,now we will compare 55 to the value to its left and there is no change.
similarly we will take [UNK] [UNK] right and we l compeare it [UNK] since [UNK][UNK][UNK]e is smaller than,"similarly, we will take 21 right, and we will compare it to 89; since 21 is smaller than"
ith t sa since [UNK][UNK] [UNK] is scaller than the [UNK] [UNK]l swa but now the position,"than 55, it will swap; since 21 is smaller than 32, it will swap, but now the position"
i so and now the position is [UNK],sorry will swap and now the position is 0.
s ther,its left right.
b [UNK] [UNK] i [UNK]  so when this  [UNK][UNK] then this for loo,"so, in this way, we will keep going until it will be 0, 0, 99. so, when this hits 99,"
and w  w so elget g[UNK]o[UNK],"then this for loop will exit and we go to 1. so, i will get 0, 1, 0, and to 0, 1, 90,"
python thin python ru the outpot of ma is not a lisst o you need to use,"between python 3 and python 2, the output of map is not a list. so, you need to use"
this is our this [UNK] now let s do the pytheboriin triple so we say we want x or x in range,"now, let us do the pythagorean triple one. we said, we want x, y, z, for x in range 100,"
f  ec particular u should see in the arltos hewhich are familiar with,"come. in particular, you should see in the early stages somewhere, things which we are"
[UNK] [UNK]  w sa [UNK] [UNK] [UNK][UNK]so [UNK] [UNK][UNK] but you hill also se,"you see 3, 4, 5. so, we saw 3, 4, 5, somewhere - so 3, 4, 5. but, you will also see, later"
here is ar earlier definition of better is s where we had x y nd and,"here is our earlier definition of pythagoras, where we had x, y, and z unconstrained. so,"
s we onlly get o[UNK]e cop of things like [UNK],"is less than equal to z; you only get one copy of things like 3, 4, 5. so, you see 3,"
so here is aninitialization it says l consists,"so on. here is an initialization, which says, l consists"
then we copy this list f times in the so we say  the actual a i l,"and then, we copy this list 4 times, in the four rows. we say that the actual matrix l"
for copis orf [UNK] snow we go and change ne nn[UNK] say we change n [UNK],"has 4 copies of zerolist. now, we go and change one entry; say, we change entry 1 in row 1."
want use it the list you must use th list funtion to convert it,"want to use it as a list, you must use the list function to convert it. and, this is"
to expect is the outpout of this,expect is the output of this.
we have [UNK] of ist and then we say l is [UNK][UNK] os o [UNK] is r [UNK],"there we have the zero lists, and then, we say, l is 4 copies of zerolists, for j in"
to sumer ise math nd tar avery us functions to mniatig,"to summarize, map and filter are very useful functions to manipulating lists, and python"
of falistcontultion is to correctly initialize tmion  dimiionlis,for list comprehension is to correctly initialize 2 dimensional or multi dimensional lists to
hi ham be use in r functions but if you want to use them inas liss in,"they can be used in for functions but if you want to use them as lists, and manipulate"
the list what brly want is empty and now we run through the number list and for each nuer,"list of primes we want is empty, and we run through the number list, and for each number"
false i case descie,"if it is false, it gets discarded."
n that can be done using a combeirnation nor filter  then back  oeilter first gives us,"that can be done using a combination of filter, and then, map. filter, first gives us the"
tthis is here now thet x y and [UNK] the lngt of the  side af the horuns e,"x, y and z are the lengths of the two sides and the hypotenuse respectively, then, x square"
whose values are below n such that x  n e forma byth arn[UNK]ri in th slfe,"z, whose values are below n, such that, x, y and z form a pythagorean triple instance."
together al possible communations then we take out tose coination fo satis,"put together all possible combinations, then we take out those combinations to satisfy"
soythen has a built in function baf which tat s precisely this so map f l applies f,"python has a built-in function map, which does precisely this. so, map f l applies f,"
manupulating step wher you comind them into as ttl x formo yo,"and then, there is a manipulating step, where you combine them into a single triple, x comma"
have bendic a newset from consisting ses so what python does in other language is also,"are building a new set from existing sets. so, what python does and many other languages"
for in any hel just like a for,"like a 'for'. then, we will apply a filter to it, which"
in that range tis a little bit more complicated then  n[UNK]it it beforee,"in that range. it is a little bit more complicated than the one we did before, where we only"
sofor we have seen some basic types of values in python,so far we have seen some basic types of values in python.
o this is a o list of this list yo call a list hadsn which gives ust just the list that ie have,this is sub list of this list 2 comma list 37 which gives us just the list 37 we have
we say in python potation is that lists smmutable mutable sommutation is to change o,"what we say in python notation is that lists are mutable, so mutation is to change."
the oter ba,the other parts.
then the list s the same name now has he [UNK] and place of the value [UNK] if i say,then the list nested the same name now as a 7 in place of the value 4 if i say nested
o strings are used to represent xt a string is or type str,"so, strings are used to represent text a string is of type str."
is a sepence of correctors,it is a sequence of characters.
now we s change x to [UNK] the question is shi y  or y [UNK] and indeed  sti,now we change x to seven the question is it is y 5 or y 7 and indeed y is still 5 and
awe saw the value of y actually did not change and the question is why should it change,as saw the value of y actually did not change and the question is why it should change.
itturns out that falutable values assignment does not make a fresh copy,it turns out that for mutable values assignment does not make a fresh copy.
s dwhat has happened to list to is list to the same as before namely [UNK],"the question is what has happened to list2, is list2 the same as before namely 1, 3, 5,"
i we say s square blracket i is for a string value s then we get the ith position using,if we say s square bracket i for a string value s then we get the ith position using
s list [UNK]w is inded [UNK] [UNK][UNK],"list2 is indeed 1, 3, 5, and 7."
a numbering convension,this numbering convention.
eytter name if we happen to oupdate the buteral value te other name is also affencted,through either name if we happened to update the mutable value the other name is also effected.
similarly if we leave out the last position like this then we will implicitly assume tthe,"similarly, if we leave out the last position like this, then we implicitly assume that"
te last position n the ice is the leingth of the list of the string and so it,the last position the slice is the length of this list of the string and so it goes
we leave out both positions we just put culon with nothing before nothing after logically,"if we leave out both position, we just put colon with nothing before nothing after logically"
that each slice dates a new  ub list,that each slice creates a new sub list.
so what we have is that l with just a colun after it is not the same ast,"so, what we have is that l with just a colon after it is not the same as l it is the new"
oe which makes theat fo,"list1, which makes then both."
remember if i do not have list then i woill get list on[UNK]e and list two pinting to the same,remember if i do not have this then i will get list1 and list2 pointing to the same actual
therefore after this list one  list to are dis coint from each other any update o,"therefore, after this list1 and list2 are disjoint from each other any update to list2"
hlength of a string using the len function and we say that we will look at more compl,the length of a string using the len function and we said that we will look at more complex
e list [UNK] f [UNK] and give it the name list to,"list 1, 3, 5, 7, and give it the name list2."
they happen to have the same value but they are two different things and,"so, they happen to have the same value, but they are two different things and so, if we"
so if we update list three or we updaine this [UNK] the will continue t remain,"so, if we update list3 or we update list2 they will continue to remain equal."
underlying object that we are referring to by this name is the same,underline object that we are referring to by this name is the same.
list in the main,list in the memory.
we have another ky word in xpython o iis,we have another key word in python called 'is'.
so when we say x is y what we are asking is whether x and y actually point thte,"so, when we say x is y what we are asking is, whether x and y actually point to the"
the same thing as,point to the same thing is list2.
now we ask whether list one ittis equal to list t  and ned t bt wat if we ask whether list,"now, we ask whether list1 is equal to list2 and it indeed is true, but if we ask whether"
et us l in,decimal point.
we ask whether list [UNK] is equal to list [UNK] is [UNK] that is the case because list,"if we ask whether list2 is equal to list3 is true that is the case, because list3 is"
is list to in the sensethat they both are the same physical list and so when we update it list,list2 in the sense if they both are the same physical list and so when we updated list3
strings we can combine lists together using the plus op,"like strings, we can combine lists together using the plus operator."
he list produces a new list,always produces a new list.
sif we say that list [UNK] is [UNK] [UNK] [UNK] [UNK] then we copy this list as a name to list [UNK]o o,"if we say that list1 is 1, 3, 5, 7 and then we copy this list as a name to list2."
,to list1.
fon the other hand we reassignd list o[UNK]e to b the whole value of is [UNK] plus  a new value,if on the other hand we reassign list1 to be the old value of list1 plus a new value
orhis,9
ice e,taking slice.
tim we aply us we actualy get a newv list,each time we apply plus we actually get a new list.
thse values need not be of an nifund type we can have mixed lists coni of lists bus,"these values need not be of a uniform type, we can have mixed list consisting or list,"
almost always we will encounter list where the under g can cte of a list is o,"although almost always we will encounter list, where the underline content of a list is of"
positions will actually typically have a unifound type but this is not required by pifn,"so, all position will actually typically have a uniform type, but this is not required by"
and we can et,python and we can nest list.
neew feature of python which we introduced with list is ta concept of mutable values,"one new feature of python, which we introduced with list, is a concept of a mutable value."
so updating x is in the thick y and vice,"so, updating x does not affect y and vice versa."
whether two names are ueual to only in value or also are physically pointing o the ame,whether two names are equal to only in value or also are physically pointing to the same
so we can now extract values at a given position or we can extract slices,"so, we can now extract values at a given position or we can extract slices."
ln of names is [UNK] because there are ne [UNK] [UNK] values in names,"so, len of names is 3 because there are 1, 2, 3 values in names."
hre is one difference between this and strings an what we have seen so far,there is one difference between list and strings and what we have seen so far.
of lengt to e we get the same thing,"of length 1, we get the same thing."
if we ask for t [UNK]th position then this gives us eter h,and if we ask for the 0th position then this gives us the letter h.
sisngle value and here we have a list and therefore these two things at re not equal to each other,"single value here we have a list and therefore, these two things are not equal to each other"
and a slice of length [UNK]e,and a slice of length one.
nesting sfor example we can have an estd list,"for example, we can have a nested list."
is position sposition,"this is position, sorry position 0."
one is a single simple value an intiger [UNK] n intege orf [UNK] position [UNK] is a list which,"position 1 is a single simple value an integer 0 an integer 4 position 0 is a list, which"
stet then as we sait we get this value and this value consists of a list itself containing,in nested then as we said we get this value and this value consist of a list itself containing
position which is this string and in that we look for the third corrector which is the,"0th position which is this string and in that we look for the third character which is 0,"
ndso we get the list containing the list [UNK][UNK],and so we get the list containing the list 37.
these usingaiiation and dinamic programm,of these using memorization and dynamic programming.
the same,be the same.
soif we walk down n from that magical value i the largest value and we follow the sequence,"if you walk down from that magical value, the largest value and we follow the sequence"
then we can read off on the corresponding row  or column ee the same the atual,"then we can read of and the corresponding row or column because they are the same, your"
program then the memor taple and the dianam prograomming almost comes out autematical,program then the memo-table and the dynamic programming almost comes out automatically
the two words you and the younitialize this icd u thing at the boundary at thh row and the,"two words u and v, you initialize this lcw thing at the boundary at the nth row on the"
a much more useful problem in tracktis then the lolgest folming subboard is what is als,a much more useful problem in practice than the longest common subword is what is called
h  look for the next mach so  skip but the next march must come to my right o it must,"so, i look for the next match, i skip, but the next match must come to my right. it must"
se and look for these clever connections but it turns out there is ame much more diretc,"answer and look for these clever connections, but it turns out there is a much more direct"
it is the longest word in secret itself the longest subwort that the common is the wo,secret is the longest word in secret itself. the longest subword that is common is the
this is a way of comparing one version of a,and this is the good way of comparing one version of the file with other version of
samade some changes then if tells you quickly what ar the difference s bewe n,"so, they had made some changes then diff tells you quickly, what are the differences between"
poblm,problem.
o is [UNK] to n minus [UNK] is the first word b [UNK] to b n minus [UNK] second word,"this last. so, a 0 to a n minus 1 is the first word b 0 to b n minus 1 is the second word"
and add this i can extend that solution by saying a [UNK] matches b [UNK] then,and add this. i can extend that solution by saying a 0 match is b 0 and then whatever
is some kind of matching it says that eal it will say that this matches this,"is some kind of a matching, it says that you know it will say that this matches this and"
which i can do tis is a longes common subseu,way in which again to do this is a longest common subsequence.
the best solution did not max thse supposing you claim that the best solution,supposing the best solution did not match these supposing you claim that the best solution
maes [UNK] sit the first two letters are the same  might as wel go with that d,a 0 matches b 0. the first two letters are the same and might is well go with that and
two sup problems we say lett us as soun b r s not part of the solution th,"two sub problems, we say let us assume b 0 is not part of the solution then the best"
so we are looking at examples of problems where the main tarkget is to identify the int,"so, we are looking examples of problems where the main target is to identify the inductive"
word this as lengthand if wit o to very different words like director and secrate,"subword in has length 3 and if you have two very different words like director and secretary,"
this in general will take us deeper in the words we said e aor bs[UNK] will require a,"this in general will take us deeper in the words. so, we said a 0 b 0 will require solved"
i  ov it and take the bettr of the pwe take macx oufp the solution from i and the,a i and solve it and take the better of the two. we take max of the solution from i and
we can fll up the bottom row and the left most column there here theright most colum,"we can fill up the bottom row and the left most column there, here the right most column."
column by column and we propriate it and then finally,"column and we can do this column by column and we propagate it and then finally, the"
inclement the number so we can ask why is this f[UNK] so we say that this is f[UNK] because not because we did,"the number? so, we can ask why is this 4? so, we say that this is 4 not because we did"
plus [UNK] because s is not equal to b whic if because we goll the max value or hre,"plus 3 because s is not equal to b, we did 4 because we got the max value from here,"
why is this [UNK] again i is not equal to s so we got the max value from hhere why is this [UNK],"why is this 4 again i is not equal to s. so, we got the max value from here why is this"
this get a explanation of the longest noumthe largest number we call and these diagonals a,this kind a explanation of the longest number largest number we got and each diagonals step
tat folowing hsoth,by following this path
is initialize the last row and the bottom  bottom row on the last column then as before,just initialize the last row and the bottom row on the last column and then as before
is a brute force alghorithom that you would use which is to just start at n,there is a brute force algorithm that you could use which is you just start at i and
and go before you find they are not oso you match  i and b j a and,"can go before you find they are not. so, you match a i and b j right. so, if a i and b"
from j plus and so on and whenever they fine  by a [UNK]o letters which differ then the common,plus 1 b j plus 1 and so on and whenever we find two letters which differ then the commons
in general i start ad i j andthen have to go from i till the end and from till the end,in general i started i j and then i have to go from i to the end right and from j to the
ta i is equl t to j so i give [UNK] plus ta nd the base case or the bo,"letter a i is equal to b j. so, i get one plus that and the base case of the boundary"
tpodition is when one of the two worcheis empty if i have no letters left if,"condition is when one of the two words is empty right. if i have no letters left, if"
eo i j and looking at different comminations i and j h either i or j,"i have gone i j i am looking at difference combinations i and j. so, if either i or j"
so we ill use the indercees [UNK] to n so if i becomes m or j becomes n it means that tack correspornding,"so, we will use in this 0 to n. so, if i becomes m or j becomes n it means that that corresponding"
the procedeurecpome ceare  but the ke pining anmac rograming is to be aver,"the procedure become clearer, but the key thing to dynamic programming is to be able"
n is [UNK] because we are go and pass the length of l and if we have not gone pas,"n is 0 because you gone past the length of v and if you are not gone past the length,"
an equation form the inductire tarthinition that we proposealy arlear,an equation form the inductive definition that we purposely earlier.
shere  sor example for example this byse secret swe have positions [UNK] to [UNK] and then we,"so, here we saw example for bisect and secret. we have position 0 to 5 and then we have the"
to understand the indactive structure s you need to able to idtake a problem identify ow t,"to understand the inductive structure. so, you need to take a problem, identify how the"
this way so the arrows are indicating that i in order to calle this i need to sole,at this ways to the arrows are indicating that and in order solve this i need to solve
says that the cordnor an the a the right column a the botmtheing  ont,which says that the corner and the actually the right column and the bottom thing do not
so we can actually fillin those values are [UNK] because that is given to us by definition,we can actually fill in those values as 0 because that is given to us by definition
ow we said eanrlier that we are con cusing on the length of te onber s comuo,and now we said earlier that we are focusing on the length of the longest common subword
we said that lists are mutibul objects,we said that lists are mutable objects.
this will be useful because data round we will find that within python we can actually examine,this will be useful because later on we will find that within python we can actually examine
nerrors and take in alternatetof action if an error occurs and we can signal hat,errors and take alternative action if an error occurs and we can signal what type of error
we would normally ave expect af function append to take two arguments nthe list and the,we would normally expect the function append to take two arguments; the list and the value
and x is on argument to the function apend s,and x is supposed to be an argument to the function append.
olk at what is called object oriented programming within python,at what is called object oriented programming within python.
so we w back to our old example list [UNK] is [UNK] [UNK][UNK] and list [UNK] is,"so, we go back to our old example: list1 is 1, 3, 5, 6 and list2 is list1."
sor the same way e i say that list  from sli [UNK]t [UNK]t the n become [UNK]  it,"in the same way if i say that list1 from slice two to the end become 7, 8 it changes 5, 6"
on the other hand because i use plus what ave done is have created a new list d,"but on the other hand because i used plus, what i have done is i have created a new list"
y [UNK][UNK],"so both of them now say 1, 3, 7, 8."
sowe preserve the structure of the list in ternbs ot ha number of positions,"so, we preserved the structure of the list in terms of the number of positions."
this is not required python allowes ou to booth xpand and shrink,"this is not required, python allows you to both expand and shrink a slice."
the other thing we can do shrink list we can put a smaller thing,the other thing we can do is shrink a list; we can put a smaller thing.
slice [UNK] to t which wil give us these two positions  now we ehae a slice of lngh,slice 0 to 2 which will give us these two positions so now you have a slice of length
[UNK]  we aresidtt a list of length n,"two, but we assign it a list of length one."
this [UNK][UNK] [UNK] is replaced by just a single [UNK],"so, this 1, 3 is replaced by just the single 7."
using so you shoull be caareful that you now what you are doing if yu re tryg to dit,"so, you should be very careful that you know what you are doing if you are trying to directly"
update slicees in h h list,updates slices in the list.
are the very common things that we want to kno w about a list is whether a value   i,one of the very common things that we want to know about a list is whether a value exists
now we can use this for instance to make or remove a sateh operation before we move,now we can use this for instance to make our remove a safe operation; before we invoke
recall that remoove removes only the first elmenent,also recall that remove removes only the first element.
eth,applying remove.
if i say list e i [UNK]  [UNK][UNK] for eamle o ise an i say list tw is c list  and he,"so, if i say list1 in to 1, 3, 5, 6 for example, and i say list2 is equal to list1 and then"
reverse a list in place l dot sort will sort a list in ascending order,"reverse a list in place, l dot sort will sort a list in ascending order."
dtxtgtmsthet trt't ctxtkt t t t t,in python for every type.
you do have to look up that documentation and if you think that there should be a ion,so you do have to look up the documentation and if you think that there should be a function
wi is something natural very often there will be,that which does something natural very often there will be.
,what happens if i do this?
a aboveall do not be afraid to see opcumentation only by looking up at documentation we,but above all do not be afraid to see in documentation only by looking up a documentation will you
naame do not have tpes in pyton we do n ot have to annouonce a name names just p,"names do not have types in python, we do not have to announce the name, names just pop"
as the code progresses,up as the code progresses.
everyin a namme pps up python needs to now what value it is,so every time a name pops us python needs to know what value it is.
lo to append i to  the list of factors which iet,now to append i to the list of factors which i will return.
now list [UNK] is ai [UNK] [UNK]hr [UNK] [UNK] but list [UNK]wo which as pointing to list [UNK] is no longer oitn,"now, list1 is again 1, 3, 7, 6, but list2 which was pointing to list1 is no longer pointing"
hi hiitialization is onlyly needed to tell python when this first append happens that,this initialization is only needed to tell python when this first append happens that
a valid function to apply to this name without this w will get an ender,"a valid function to apply to this name, without this you will get an error."
contract the list but this is something to be done with care we must make ure,"or contract the list, but this is something to be done with care; you must make sure you"
to go through orlithm and  as a very boarring to just list ut of i,and to go through all of them and it is also a very boring to just list out of a bunch
inside a function we want to update a list then so long as we do reasnit,if inside a function we want to update a function list then so long as we do not reassign it
the function will not refet outside te,the function will not reflect outside the function.
inside the function this wuld ant do,inside the function this would not do.
is a function which will take a list and add a value to it,append is a function which will take a list and add a value to it.
not a new list in that sense,not a new list in that sense.
soappend actually addts a value in place both list n[UNK]e and list to point to the new list,append actually adds a value in place both list1 and list2 point to be new list with
snow if i take the position t which is this position and replace it by  value [UNK] then w,now if i take the position 2 which is this position and replace it by the value 7 then
on the other hand if we are done it like a mension using the plus operator e,"on the other hand, if we had done it like i mentioned using the plus operator then we"
appn takes a single value,"so, append takes a single value."
we want to [UNK] [UNK][UNK],"we wanted to put 6, 8, 10."
right so yo want t[UNK][UNK] [UNK] and we want to expand this to have three more values,"so, we want to take 1, 3, 5 and we wanted to expand this to have three more values,"
of tho we can op pind each of these values ne at,of course we can append each of these value one at a time.
now this is to add elements to a list there is also a way to remove the element from,"now, this is to add elements to a list there is also a way to remove an element from a"
i s s,list.
object we have that le is two also has the saile value,"object we have that list2 also has the same value [1, 3, 7, 6]."
wel in fact this will give us an erroi weu have to be careful to use remove only,"well, in fact this will give us an error so you have to be careful to use remove only"
owh iv i say this t dor remove sayf now ther are two copies of yn heer at the first copy,"now if i say list2 dot remove say 5, now there are two copies of 5 remember the first copy"
which is here at the biegining and a second pcopy which is ated this  temove,"which is here in the beginning and second copy which is later, so this will remove the"
n a looeat list [UNK]o the first one gives m [UNK] to [UNK] but the second popy is still thend if i say t,"now, if i look at list2 the first one skip at 4 to 6, but the second copy is still there."
now what eptonce y are to move it the third time now i get an erroe saying x is not in,"now what happens if i have remove it a third time, now i get an error saying x is not in"
and,an error.
ther is no multiplication s apos  we can then write out the,"is a just matrix there is no multiplication, so the cost is 0. we can then write out this"
i comma j then i need to choose a good k,"entry i comma j, then i need to choose a good k."
in order to chose a good cmane this like an express in many different ways,"and in order to choose a good k, i need so this i can express in many different ways."
an i have to say of  ps  i to i and then i wan[UNK] [UNK] i plus [UNK] to j so i have,"i have to say pick this entry i to i and then i want the entry i plus 1 to j. so, i have"
we could have order n values aneed to compute for this ineed to compute,"in general, we could have order n values i need to compute for this i need to compute,"
only thing that you need to note ise that we have use some,only thing that you need to notice that we have used some.
so what we are doing is when we compute as we said one entry  supposin we are computng,"so what we are doing is, when we compute as we said one entry. supposing, we are computing"
atoa t t tbtbt tstat wak tltet tmtei btntlt t jt t[UNK]titntf ikctk'g tkt we itnj r,"longest common sub word, we assume that the maximum was zero, and every time we saw a"
c is actual infinity now what is nfinitey wel you can take infinity so that we can,r c is actually infinity. now what is infinity? well you can take infinity so that we can
tt dimension will not be mor s if we take  proda ote,"the total dimension will not be more than that. so, you can take the product of all"
else his just a way to make surethat we ca it go through the stable diagonal by diagonal ad,"else is just a way to make sure that we go it, go through this table diagonal by diagonal,"
all pyirs ind that row on[UNK] colum,all pairs in that row and column.
it does not matter whether we first multiply a p and then maltiply c or we first my,out it does not matter whether we first multiply ab and then multiply c or we first multiply
b the point s each ent takes constetant tme the frt invoe is the saime,"but the point was each entry takes constant time, so the effort involved is the same as"
so we saw that an entry will take time proportional to its distance from the diagonal,right. we saw that an entry will take time proportional to it is distance from the diagonal.
example in all the examples we saw before f e a,"example. in all the examples we saw before, the fibonacci"
[UNK] times thre times o hdoes the atter wy wthe o [UNK] ime  first or th times [UNK] irst,"do 6 times 3 times 2, it does not matter whether you do 6 times 3 first, or 3 times 2 first"
complexity of computing theose y his is the case,complexity of computing the answer. why is this the case.
single ent so i get one ent o n[UNK] it into one in ndred steps i just collaps,"1 single entry. so, i get 1 into 100 into 1 in 100 steps, i just collapse this row and"
this colum into a single intas like computing bin re in adee,this column into a single entry that is like computing one entry in a matrix multiplication
in which you do the associative steps can tramatically improve or worse than the amount of time is,in which you do the associative steps can dramatically improve or worsen the amount
s in general we have a sequeanc m  to  n and each of them as some rows and colums,"in general, we have a sequence m 1 to m n and each of them has some rows and columns,"
do it so we can ae best [UNK]do [UNK]o mithris is artime only know how to multiply times,"would do it. so, we can at best do two matrices at a time, we only know how to multiply a"
ancwer which is m  times t in the final entry we have to do m we oma m t mris ind the final product,"answer which is m times p. in the final entry, we have to make mp entries in the final product"
in which to do this calculations so that we optimize the operations in bo,"and which to do this calculation, so that we optimize the operations involved."
iths must look like thisi must have this   n correct tosom,"group it must look like this, and must have this whole thing collapsing to some m 1 prime,"
thing is my  the other wors case s h iod o [UNK] m [UNK] t not worse but extree e,"whole thing is my, the other worst cases i could have done m 1 2 not worst, but extreme"
we know how much  is going to coss and to this we have to recursively add the indec,"we know how much it is going to cost. and to this, we have to recursively add the inductive"
that takes us order n time so with tt workis usually easy to computes m,"so that takes us order n time. with total work is, usually easy to compute us m times"
almostidtakin to  nt,how much time it will take us to do m 2 prime.
supproblems so we d the longest common supsequence problem we had o suproblm,"1 sub problems. so, when we did the longest common sub sequence problem, we had two sub"
of k we have no way of knowing which of these kase is better so again we try all of them,"of k, we have no way of knowing which of this case is better. so, again we try all of them"
of k of the cs of multiplying m[UNK] to nk plus the cos of multiplying m k plus [UNK],of k of the cost of multiplying m 1 to m k plus the cost of multiplying m k plus 1 to
result of inductively solting the rest this is a very attractive way of descrcribing he,result of inductively sorting the rest. this is a very attractive way of describing the
table here right so we have a tabble where in some order it does not really matter,"table here right. so, we have a table where in some order, it does not really matter for"
base case in the function we will get that that b of ne is [UNK] o we sta the,"the base case in the function, we will get back that fib of 1 is 1. so, we store this"
in the table this is the first value we have atually computed ise we did not assum,"in the table, this is the first value we have actually computed. notice we did not assume"
so we stored that in the table we say for k could   bf k is [UNK] now we can,"1. so, we store that in the table. we say for k equal to 2, fib of k is 1. now we come"
ome back to a ip of three and now we go down and i asks usto compette thip of [UNK]e again now alte,"back to fib of 3, and now we go down and it asks us to compute fib of 1 again. now although"
this does not take us any work because it is a based case we do not actually,"this does not take us any work, because it is a base case we do not actually exploit"
there is and so we pick it up so we highlight an oraing to the fact that t,there is and so we pick it up. we highlight in orange the fact that this
his value was actually not recomputed but looked up in the table from [UNK] ls  we,"value was actually not recomputed, but looked up in the table, so from 1 plus 1, we now"
now f   c of [UNK]is [UNK] now we go back up when  c of [UNK] and it asks us to compue,"have fibonacci of 3 is 2. now we go back up to fibonacci of 4, and it asks us to compute"
the second half of it su problems namelif you ovea arecu of [UNK]o once again we find that the,"the second half of its sub problems, namely fibonacci of 2. once again we find that there"
so we ender vnote is therefore every value we computed,"so we enter that. notice therefore, that every value we computed,"
w what  says is the first thing you do when you get a number its tryi o,"now what fibonacci says is, the first thing you do when you get a number is try and look"
otherwise we go through the recurs ef computation so this is the usual computation whic oul may,"otherwise, we go through the recursive computation. this is the usual computation which will make"
a recursive column and eventually come up with a new value which is the value for,a recursive call and eventually come up with a new value which is the value for this particular
dictionary and not a list because the argument s could be any particular valuesthey could,dictionary and not a list because the arguments could be any particular values. they could
o we basically for given the tactical commination of arguments we look at whether that combination,"we basically for given the particular combination of arguments, we look up whether that combination"
of  keys is there and te ditionary if so we look it u  nd it other wise we compute,"of keys is there in the dictionary if so we look it up and return it. otherwise, we compute"
a new value for this conbination store it and then retur iso we have bld,"a new value for this combination, store it and then return it. so, we have glossed over"
the base case to the case we have aad that means there are always some value s,"the base case, to the case we have at hand. that means, there are always some values some"
base values for which no further values need to be compuutee thes values are oaptematicaly,base values for which no further values need to be computed; these values are automatically
es there will always be starting point and we can solve the suproblems directly,"this right. there will always be a starting point, and we can solve the sub problems directly"
to follow the inductive structure an directly say  tell me which are al,"have to follow the inductive structure, we can directly say ok, tell me which are all"
so we can start at the bottom and then work ur we can say or if we,"dependencies. so, we can start at the bottom, and then work ourselves up, we can say fibonacci"
even going to it from [UNK] and not coming down from  we are just directly filling up the table,"even going to it from 5, i am not coming down from 5, we are just directly filling up the"
in general we have such inductive definitions what we do is we have some problems hat,"in general, when we have such inductive definitions, what we do is we have sub problems that we"
ore [UNK] so we ust computed we have t unfoso we can copute [UNK],"of 3. so, we just compute it. we have 3 and 4, so we can compute i mean 2 and three. so,"
and i can ask me for the te[UNK]th iven urg number i can write it o i can so [UNK],"when i can you ask me for the tenth fibonacci number, i can write it out. i can say 0. 0"
have to solve in order to get to the answer we are trying to reach for instance,"have to solve in order to get to the answer we are trying to reach. so, for instance,"
up in the able by da by recursion to fill them up iteritivly starting with the e,up in the mem table by recursion to fill them up iteratively starting with the ones which
to compute factoril of n one of the things we need to do is compute factoril of n minus,"to compute factorial of n, one of the things we need to do is compute factorial of n minus"
say ejust take the ith value to be the sum of the i minus [UNK] i minus [UNK]wo values,"each stage, we just take the ith value to be the sum of the i minus 1, i minus 2 values"
tjsoptswt stckt tnytknt tbtltatpnltzk wktgta tg t itot tstitntotltotat t at nl t,which we have already computed because we are going in this particular order because
w call a memor table tthisis called memoriization and we always look up the table before,we call a memo table this is called memoization. and we always look up the table before we
so we call factorliar of n minuas o[UNK]e a sumb problem of facto,"1. so, we call factorial of n minus 1 as sub problem of factorial n."
smaller than similarly for insertion sort in order to sort the full list we need,"smaller than n. similarly, for insertion sort, in order to sort the full list, we need to"
to sort all the elements expouting the first one what is called the taile of the list,"sort all the elements excluding the first one what is called the tail of the list, and"
in tuerm we need to sort th stale and so onso in general when we do inserth and so we wil,"in turn we need to sort its tail and so on. in general, when we do insertion sort we will"
the actual value of f for our b en put y by combining the solutions to thes upo,the actual value of f for our given input y by combining the solutions to these sub
ia  number are [UNK] [UNK] and then you add so [UNK] plus [UNK] is [UNK] plus [UNK] s [UNK] n[UNK] plus [UNK] is [UNK] [UNK] [UNK] and o,"fibonacci numbers are 0, 1 and then you add. so, 1 plus 0 is 1, 1 plus 1 is 2, 3, 5 and"
so you just keep adding the previous,"so on. so, you just keep adding the previous two"
itself so if n is [UNK] returns [UNK] f n is [UNK] we l ritten [UNK],"n itself. so, if n is 0 return 0, if n is 1, we return 1."
n aus [UNK] adds [UNK] and return this v o here is a cr kase of en indective definition,"1 and n minus 2, add these two and return this value. here is the clear case of an inductive"
can complete the computation of   t[UNK] we get value is   [UNK] an ther words [UNK],"we can complete the computation of fibonacci 2, we get value is 1 plus 0 in other words"
o now we are back to n of [UNK] and we have computed the left side of vna,"now, we are back to fibonacci of 4. and we have computed the left side of fibonacci of"
o we ni to be the right side and now wort appens tht we end applment,"4. so, we need to compute the right side. and now what happens is we end up having to"
of  [UNK] a venau  [UNK] so we have done with [UNK] sonow we want i to even a chu [UNK],"4 and fibonacci of 3. so, we are done with 4. now, we want to do fibonacci of 3. notice"
that we have already computed mna c but this will blindly require us to,"that we have already computed fibonacci of 3, but this will blindly require us to call"
down go all the way oun and eventually en uor h will of course give us the same e,"down, go all the way up and eventually fibonacci of 3 will of course, give us the same answer"
is [UNK],5 is 5.
so what we want to do is move away from this ive recurs the implementation of an indeptevde definition,"so, what we want to do is move away from this naive recursive implementation of an inductive"
and try to walk towrds never rvaluetting a suproblm this is easy to do,"definition, and try to work towards never reevaluating a sub problem. this is easy to"
if we could only remember the sup problems that we had solved before then all we have,"do, if we could only remember the sub problems that we have solved before, then all we have"
more efficient than insertion sort of selected sort and we claimed also that it tooperate,more efficient than insertion sort or selection sort and we claimed also that it operates
and b i move  smaller of the t to c clearly c grows by one element wih,in a and b and move the smaller of the two to c. so clearly c grows by one element with
continue with the old values when the first is calles sta this requires a certain amount,continue with the old values when the recursive call is done. this requires a certain amount
of xr work sobecause it calse an returns turn nout,of extra work. recursive calls and returns turn out to be
is only a minal comman but ccertioly much sort is the basic order n log nd ort,is only a minor comment. but conceptually merge sort is the basic order n log n sorting
and it is very useful to know becasuse it placyces a roll in many other things indirectly,algorithm and it is very useful to know because it plays a role in many other things indirectly
,or directly. 
of c is m plus n what do we do in each trion well we o,of c is m plus n. what do we do in each iteration? well we do
combarrisin and then we do an assinement and then we incremente some indicease,"a comparison and then, we do an assignment and then, we increment some indices. so, this"
we can say that mergh as a function takes time of the order of maximum of m and n an,we can say that merge as a function takes time of the order of maximum of m and n and
n elements is two times a time taken for two lists of m by [UNK] and this is the merged compotnte in,n elements is two times time taken for two list of n by 2 and this is the merge component.
e start with the base case in we have a list of size one then we have nothing to do,"we start with the base case. if we have a list of size 1, then we have nothing to do."
so we write  two times two as t[UNK]wo squared and we write this fr as [UNK]wo square we will,"this. so, we write two times 2 as 2 square and we write this 4 as two squared. we will"
find that this is eequavelent o writing it in this form [UNK] to [UNK] [UNK] su t and by [UNK]we,"find that this is equivalent to writing it in this form 2 into 2, 2 squared t n by 2"
so we expand two times t nd by f[UNK] that will give us another f by,"so, we expand two times t n by 4 and that will give us another n by 8 which you write"
so in order to analize mt the first thing we neeed to do is to give a n analysis,"in order to analyze merge sort, the first thing we need to do is to give an analysis"
ihas become  iand so it hoes disappeare so we have to to the j is is s t oa ps this j is,"has become 1, so it has disappeared. we have 2 to the j is 2 to the log n plus this j has"
[UNK] and [UNK] [UNK] then we nd up athe list or the form [UNK] [UNK] [UNK][UNK] o this is how g,"say 1, 3 and 2, 3, then we end up with the list of the form 1, 2, 3, 3. this is how merge"
somargh can be uuuse to implement varius commnations commoienation operations ue list,"so, merge can be used to implement various combinations, combination operations on this."
i can beusto take the union of lis and discoae the pyicnckets it can be us,it can be used to take the union of two lists and discard duplicates. it can be used to
take the intercetion of dotis and finally as an exercsise to test that you understand it,"take the intersection of two lists and finally, as an exercise to test that you understand"
see if e can use ler to do list difference  i,it and see if you can use merge to do list difference.
mo sort is clearly superior to inserti on seort and selection srt because it is already,"now, merge sort is clearly superior to insertion sort and selection sort because it is order"
of mirth sort is that wbe are fforce to create a new array every time we mearch to list,"of merge sort is that we are forced to create a new array, every time we merge two lists."
the other problem with merh sort is that it is inherently cursive,"the other problem with merge sort is that it is inherently recursive and so, merge sort"
the ob is distributed to the to tichend assistance so each one is stoled to go with,"the job is distributed to the two teaching assistants, so each one is told to go with"
we to is both are not empty so we want to take the smaller one of the head of a and,"what we do is if both are not empty, so we want to take the smaller one of the head of"
i remaind so we compare the first element to ba and v and we move the smaller one into,"is remaining. so, we compare the first element of a and b and we move the smaller one into"
and we keep repeating this until all the elements in aa and b have be,c and we keep repeating this until all the elements in a and b has been moved.
this is a python implementation of this merg function in general the two lists neenot,this is a python implementation of this merge function in general the two lists need not
o the same length so we are merging a of length m and b of length n into an output,"be the same length. so, we are merging a of length m and b of length n into an output"
the prs sort them separately ind one back an then the instructor has to put,"halves the papers, sort them separately and come back and then the instructor has to put"
e move so far to the output eventually everything nd everything in j must ene,"moved so far to the output; eventually, everything in a and everything in b must be moved to"
h cases are where one of the two tis is my either we have reache the end of  o,"cases are where one of the two lists is empty; either we have reached the end of a, so i"
or the indexiipl similarly if we have reached the end of bp we appen,"b or the index in b. similarly, if we have reached the end of b,"
the unsorted array or list into two pars and then youou hand over these two parts tow,the unsorted array or list into two parts and then you hand over these two parts to
sthese two things wil definitly work just by checking the fact that we hae,left in it. these two things will definitely work just by checking the fact that we have
now if neither is tis exhausteve then we have to do a comparrison so we come to he,"now, if neither list is exhausted then we have to do a comparison. so, we come to this"
whach of these tw gos into s nex  the smaller of the t if it ecomes ae may we append tat,"which of these two goes into c next. the smaller of the two if it comes in a, we append that"
in the correct ordin from v and  in to,in the correct order from a and b into c.
here is a  merghed dot py in which we have exactly the same code as we hade atlie,"so, here is a file merge dot py in which we had exactly the same code as we had on the"
ths in pes way to do this i to trying construct two list suppose we take a list,"the simplest way to do this is to try and construct two lists; suppose, we take a list"
the code in a couple of places so we have two situations kase [UNK]ad se we,"the code in a couple of places. so, we have two situations case 1 and case 4 where we"
one whre we take the value mp so we combine [UNK] and [UNK] and say either if a is empty,"ones where we take the value from b. so, we combine 1 and 4 and say either if a is empty"
j ul to j plus one on the other hand either if s beings empty,"j equal to j plus 1. on the other hand, either if b is empty or"
as a smaller value then you take the value from  and appendn te an a,a has a smaller value then you take the value from a and append the index in that right.
the values of the names at somecpiat point now here since we are having anea,the values of the names at some appropriate point. now here since we are having an error
said we have not formally seen we will see it in the next week but it does utet,as i said we have not formally seen we will see it in the next week. but it does the intuitive
tis tine to check whether y is big er in  j but this point unfortunatly,"it is trying to check whether a i is bigger than b j, but at this point unfortunately"
now we are only checking if i is tree since i is not tree we are going at and checking he,"now we are only checking if i is 3, since i is not 3 we are going at and checking the"
index and sometimes it is implicit and sometimes e have to be careful and this is one o he,index. and sometimes it is implicit and sometimes we have to be careful and this is one of those
s so we may as well go back to the version with [UNK] explicit cases,"so, we may as well go back to the version with four explicit cases."
or slices of our list so we will actually have morth sot with an input list and d,"or slices of our list. so, we will actually have merge sort within input list and the"
the sot dot pyipe we start wih the function merge which w sa before with the [UNK] r cae split,"sort dot py. we start with the function merge, which we saw before with a four way case split"
sorted in sequence,sorted in sequence.
unded ties arger one hunded thouson as ops to fe thon then in serton so to solections,"times larger 100,000 as suppose to a few 1000 then insertion sort or selection sort. another"
small point o keep i mindis notice that we did not run intoecus limit re,small point to keep in mind is notice that we did not run it to its recursion limit problem
log in recurs it cs so on[UNK] hundred thousand elements also requires only log hundred thousand remnember a lo,"log n recursive calls. so, 100,000 elements also requires only log 100,000. remember a"
problem with the recursionl in ith we do not have any pending recursions of that dep,"a problem with the recursion limit, we do not have any pending recursions of that depth"
we will actually alculate y morth sort s order n,we will actually calculate why merge sort is order n log n. 
[UNK] at the head now [UNK] [UNK] is he smaller of the t[UNK] at the head notice we have reached the situaion,"two at the end, now 64 is the smaller of the two at the end. notice we have reached the"
copy e first list as a list without halving to compare anything because those ae,copy the first list as it is without having to compare anything because those are all
the right hand sidte of a slice gos o the slice minus,the right hand side of a slice goes up to the slice minus 1.
minus [UNK] we can just dplicate the index on the right hand side and the left,"plus 1, minus 1, we can just duplicate the index of the right hand side and the left"
how to se anything except te list of int ne or [UNK] s we fur the breaetar now we,"how to sort anything except a list of length 1 or 0, so we further break it up. now, we"
[UNK][UNK] one now at this level we have two list of length,"before 91. now, at this level, we have two lists of lengths"
this s [UNK][UNK] and then we ill pick [UNK][UNK] [UNK] and then wewill pic [UNK][UNK] and then we i pik [UNK],"so this is 13 and then we will pick 22 then we pick 32 and then we pick 43 then 57, then"
it up down tol the base case nd then iekeep combining backwards using the vrh,"it up, down till the base case and then you keep combining backwards using the merge."
whih do not have any interpearence whicheach other so whe have for instance sorting,"which do not have any interference with each other. so, here for instance, sorting the"
a hem to god i t cseparate ros and they do not eed to communitcate with each,ask them to go to two separate rooms; they do not need to communicate with each other
to independ it s up problems and then you have a efficient way to confine the solvt,into independent sub problems and then you have efficient way to combine the solved sub
problems that is the kheap that how efficiently you can combine the problems,"problems. so that is the key there, how efficiently you can combine the problems. if you takes"
let us look at little more in detail at the actual algorithmic aspect of how we are going to do this,let us look a little more in detail at the actual algorithmic aspect of how we are going
to skip every k iltems so we have i then we go directly t plus k so implicitly,"to skip every k item. so, we have i then we go directly to i plus k. so, implicitly if"
we must use tis type converion caled list so in general we can use type names to converte,"we must use this type conversion called list. in general, we can use type names to convert"
do is we will get i plus   for the largest  such a i plu  s smalle an,"do is we will get i plus n k for the largest n such that i plus n k is smaller than j,"
diecrementif cae n egetive in steps of k such that you keep going as far as possible,"decrement if k is negative, in steps of k such that you keep going as far as possible"
at appens i that if we start with the value which is smaller than the cared value wro,"happens is that if we start with the value which is smaller than the target value, we"
rrange j this is seen as the upper o[UNK] and the lower bo is [UNK] this is like a,"write range j, this is seen as the upper bound and the lower bound is 0. this is like a slice,"
so backwards sjust to see an example e suppose we want,"or backwards. just to see an example, suppose we want to"
go to [UNK] and  iif e were to go one more step we would o to [UNK] but since [UNK] crosss,"go to 3 and if we were to go one more step you would go to 0, but since 0 crosses 1 in"
thenegutive direction we would stot at [UNK]h asf we would no cross over to c,"the negative direction we would stop at 3 itself, we would not cross over to 0."
i whether we do not write the first argument of the slice if we write for instance l ln,"where if you do not write the first argument of the slice, if we write for instance l colon"
and python [UNK]hre sin python to the output of range is in fact a list so if you un,"2 and python 3. in python 2, the output of range is in fact, the list. so, if you run"
is not a list  raange produces something which is a sequence of values which can,"is not a list. so, range produces something which is a sequence of values which can be"
now it is possible to use range to denerate a list using the function list  the name,"now, it is possible to use range to generate a list using the function list. so, name of"
the function is actually i list so what woe wold do for example list give the range as an argument,"the function is actually list. what we do, for example, is give the range as an argument"
list this is an example of a type conversion we ae o,list. this is an example of a type conversion; we
that python internally uses for types also as functions to convert one type to another,"that python internally uses for types also as functions to convert one type to another,"
tht happens implicitly for instance as we will see when we want to display a value w using,this happens implicitly for instance as we will see when we want to display a value using
or when we print out something is texed sstr is implicitly used very often,"or when we print out something is text. so, str is implicitly used very often. sometimes"
or instance if a string consists only of digets then we should get a value corresponding o,instance if the string consists only of digits then we should get a value corresponding to
conversion is possible it wuill do it if it does not it ietturns an error we wil,"conversion is possible it will do it, if it does not it returns an error. we will see"
within python to recover for an error or to tie what evor it is and proceed according ty,within python to recover from an error or to check what error it is and proceed accordingly.
for the lalecs at this wek we look at some u things which  w ill crop up,for the last lecture this week we look at some useful things which will crop up and
if the user does not present a valued value isto of telling them why which us keep,if the user does not present a valid value instead of telling them why we just keep saying
enter  nmbeinwe have seen this same number of times  you go to some ue,"enter a number i mean we have seen this any number of times right, you go to some user"
contracts the list atd shifts everything from position [UNK] [UNK]ward to t [UNK],contracts the list and shifts everything from position 5 on wards to the left by 5. so let
andn  supposing you want to assign a value to a name x only if x s are undefined te,"handling. supposing, we want to assign a vale to a name x only if x is undefined, then we"
or not so far it is not a good idea oul just kee it undefined and then use excep,or not so far. it is not a good idea to just leave it undefined and then use exception
s a valid value we can initialize it to none and later on we can check i it is still n,a valid value we can initialize it to none and later on we can check if it is still none.
so initially we say x is equal to n[UNK] and finally we go head and say o if x is not [UNK],"so, initially we say x is equal to none and finally we go ahead and say, if x is not none"
so we are using s theare not equal to sothere is exactly one value none in python in the space so,we are using is not equal to. so there is exactly one value none in python in the space.
if the user has provided a string which is not a validiiger  in which case we wil,"if the user has provided a string which is not a valid integer, in which case we will"
a list or a dictionary yo would not normally want to just undefine a name which is according,"a list or a dictionary, you would not normally want to just undefine name which is holding"
by saying that the number of notes at level i is to the i so initially we have ne,"by saying that the number of nodes at level i is 2 to the i. initially, we have 1 node"
theother operation we need o implement in arry is delete max now something ao,"the other operation we need to implement in a heap is delete max. now, one thing about"
in the entire t must be at the root so we know where the root is now the question,"value in the entire tree must be at the root. so, we know where the root is; now the question"
move this value then we have to put some value there eon the other hand the numr,"remove this value then we have to put some value there. on the other hand, the number"
op so obviously there is go ing to be some problem with resect to it stilly,"the top. obviously, there is going to be some problem with respect to itã•s children. so,"
smaller  [UNK][UNK],smaller than 24.
at this point [UNK][UNK] is biger tan  so we stop,"children. at this point 11 is bigger than 10. so, we stop."
leave there are no properties to be soe satisfyd or remove so we stop,"leaf there are no properties to be satisfied anymore. so, we stop."
overy attractive feature of heaps is that we can implement this treek directly in tae list,one very attractive feature of heaps is that we can implement this tree directly in a list
or in avarray so we have an n nore heap we can depent it as a list or an a,"or in an array. so, we have an n node heap, we can represent it as a list or an array"
s we said we filed up this heap left to writ tote gottom in the same way,"as we said we filled up this heap left to right, top to bottom right. in the same way,"
we will gat onsert and inseart just ads ous yo to the list and eat jop when it is,we will call insert and insert just adds a new job to the list and each job when it is
add it comes with it is only iority bees,added comes with it is own priority.
he heap soas we are going up the number of steps that we need to propigate,"we are building the heap. so, as we are going up the number of steps that we need to propagate"
he other hand the number of notes for which this happens is smaller,other hand the number of nodes for which this happens is smaller.
atrt t tetzitjwki stncktmtht ti tytctktitrt tatst tstnti th txtftmst sknxtx'thtktgt ttnette wjke,for 4 nodes we have to do one level of shifting perhaps to repair the heap property then we
w have only two notes wors s the nater of notes for which this is required rinking,"have only two nodes for this. the number of nodes for which this is required is shrinking,"
jobs just as a list now if it is an unsorted list when we add something to the que we can,"jobs just as a list. now, if it is an unsorted list when we add something to the queue we"
for heap now the question is where do we keep these values well remember that a heap is an array,"now, the question is where do we keep these values. well, remember that a heap is an array."
max will remove te element at the top becuse that is the roo but it iwill,"delete max will remove the element at the top because that is the root, but it will"
so create a vacancy here this is the value that will go to the top this is the last,"also create a vacancy here, this is the value that will go to the top, this is the last"
i now go to he end o the heat but the next time i psiaeat h,"will now go to the end of the heap, but the next time we process the heap there will be"
i fixed and soo on so one by one the maximum value second maxima value and,"elements fixed and so on. so, one by one the maximum value, second maximum value and so"
o will get into the same lists or array i which we are storing the heap and evl,on will get into the same list or array in which we are storing the heap and eventually
to sumaize heaps are a tree based implementation of priority ques in which both insert and,to summarize heaps are a tree based implementation of priority queues in which both insert and
however o do a delet max we have to scan through the list and cercho if the maxmum indiment,to do a delete max we have to scan through the list and search for the maximum element
now in this case we are looking at max heaps we can also do a gueral construction where e,"now, in this case we were looking at max heaps; we can also do a dual construction where we"
when we insert something at the bottom we have to move it  right so the insert and,"when we insert something at the bottom we have to move it up right. so, the insert and"
and as we have seen in an unsorted list it will take us order n ae to find the maxim,"and as we have seen in an unsorted list, it will take us order n time to find the maximum"
no te note above it and werefer to the chid as a left chi in the right chile,the node above it and we refer to the children as the left child and the right child.
sur bos to maintain a priority que as a special kind of binary tree which,"so, our goal is to maintain a priority queue as a special kind of binary tree which we"
og in we will achieve both insert and delete max in order logntime,"log n, we will achieve both insert and delete max in order log n time."
go from n square to n logan and another nice feature about a heap is that we do not have to,go from n squared to n log n and another nice feature about a heap is that we do not have
which are the values which are stored in the creen remember that leaves and nodes in a binary,"which are the values which are stored in the tree, remember that leaves, nodes in a binary"
[UNK]  have [UNK] children o[UNK] childen nor two children so we could have in general very,"tree may have 0 children, 1 children or 2 children. so, we could have in general a very"
in which we stpill each levem from top to bottom left to right,"tree in which we fill each level from top to bottom, left to right."
the other property with ha heap o the first propertys structure tel just tells us,"the other property with the heap, the first property is structural, it just tells us how"
are those we have values and the empty notes are indicated with the open ccl,are those which have values and the empty nodes are indicated with open circles at the
of its two children severy noo if we lok at the value and we look at the value in he,"of its 2 children. so, at every node if you look at the value and we look at the value"
priorities so that it can always pull out very quickly the one with the hoighest riority to,priorities? so that it can always pull out very quickly the one with the highest priority
so we have the value property the max heap property along with he structureal property,"5. so, we have the value property - the max heap property along with the structural property."
o [UNK] so once again this has not been filo correctly left to rite top to botomn,"child of 7. so, once again this has not been filled correctly left to right, top to bottom"
member that heap notes are constructed top to bottom let o right so if we want to insert,"remember that heap nodes are constructed top to bottom, left to right. if we want to insert"
teeioe is biger thaen ispearent tme so although this is,"12 is bigger than its parent 10. although this is now structurally correct,"
now  structurally correctit does not have the right value distribution  so we have to restore the heap property,"it does not have the right value distribution. so, we have to restore the heap property in"
sis like a queue but a queue in which items have priority based on some other caracteris,"this is like a queue, but a queue in which items have priority based on some other characteristic"
and then we start looking at violations with respect to its pirent so we notice that,and then we start looking at violations with respect to it is parent. we notice that 12
elis toller than [UNK][UNK]y  so we stop,"is smaller than 24. so, we stop."
w move [UNK][UNK] to here [UNK][UNK] is ur ft[UNK][UNK][UNK] ten we push everything from [UNK][UNK][UNK],we move 13 to where 22 is or after 22 and we push everything from 78 onwards to the
wrs the right but actually a clever r stategy is to say that o th[UNK]t must go here,"right, but actually a cleverer strategy is to say that 13 must go here."
b in stead we can just take this  nin the last element  theos out and e replace,but instead we can just take this 13 in the last element to the yellow zone and replace
sohere is an impplementation in pyt,here is an implementation in python.
lo is lf plus [UNK] and now we let green proseed and every time we see an element,"so, yellow is l plus 1 and now we let green proceed and every time you see an element"
toth and then wemove the eleco interest well othwise if we,"this is what we did to 13 and then we move the yellow pointer as well, otherwise if we"
ngvpt tint t tsotstytg tato t t t tw itetcte tytg tsht thctct tr t tltftytot,"see a value which is strictly bigger, we move only the green pointer which is implicitly"
if you want to sort something and see the ec we have to assign itae  e,if you want to sort something and see the effect we have to assign it a name and then
fbur instead mos take  range of values o say [UNK] ded and now if we say wort,"let us, for instance, take a range of values from say 500 down to 0 then if we say quicksort(l)"
in sert ond we say ne t[UNK]then yt is we will gett thi decurs n  because,"if we say 1000 and then we try to quicksort this, we will get this recursion depth because"
f pes noru set the recorrsionlemitsomething sympety l sa,"module and set the recursion limit to something superbly large, say 10000, maybe 100,000 and"
wor t o istance or something of size say  s then it takes a visitble ammout f,"were to, for instance, sort something of size say 7500 then it takes a visible amount of"
ecause we are not using the mad but the first value to s e,"we are not using the median, but the first value to speak."
we will see that in the next leck as to wy wiso ones actually noot a worst  cas,we will see that in the next lecture as to why quicksort is actually not a worst case
t list,of the list.
so we do not lee to,"so, we do not need to merge."
the recorence is the same one so we get another alt,"the recurrence, its the same one, we get another order n log n algorithm."
that wesay earlier thet one ofth benefits of sorting the list is that we,remember that we said earlier that one of the benefits of sorting a list is that we
now here we are asking o the median before sor but our game is to sort o it is kinde,"now here, we are asking for the median before sorting, but our aim is to sort, it is kind"
if weare requiring the output of the sorting to be the input to the sortig,if we are requiring the output of the sorting to be the input to the sorting.
of looking for the meandt we just pick up some value in the list  and you,"instead of looking for the median we just pick up some value in the list a, and use"
that as what is called a alvart element,that as what is called a pivot element.
we spri a with respect to resplivert so that all the smaller elements at to the lead,we split a with respect to this pivot so that all the smaller elements are to the left and
we partitian a into the lower part and the upper part which i  o this e,"we partition a, into the lower part and the upper part with respect to this pivot element."
w because we ave iceu the first element it the are ay t preit,two because we have picked up the first element in the array to pivot.
e recursive ly sortto conditions,we recursively sort two partitions.
extpres pace e  ied wyat  s s aequlied in orderemee,the extra space required by merge sort is actually required in order to implement the
,ones are bigger.
mearch function and why dod we need to mearch,merge function and why do we need to merge?
this is the reaarranging step nd now we recurs tot the yell of which in the green it,"this is the rearranging step and now we recursively sort the yellow bits and the green bits, then"
things are smaller than  and all the [UNK][UNK]s up an  move further nverging is,"things are smaller than 43 and all the green things are bigger than 43, no further merging"
,is required.
and we what to do a scan of the remaining elements i divide them into two oopps  mor,to do a scan of the remaining elements and divide them into two groups; those smaller
e eements re,elements are unknown.
eaort etb twtertntwetobtatogtett t tot wtst otot to tfth tagtot th tht r'hb trtht stne itptgt,"what we are trying to do is, we are trying to move from left to right and classify all"
en stp e in to the right of the greemn ponter we have,"element strictly greater than 43 and to the right of the green pointer, we have those"
which i yet to be scan initial,which are yet to be scanned.
list then it takes a long time so you could actually check that for instance,"list then it takes a long time. so, we could actually check that, for instance,"
lid ates are claimd that which sort orn an average is farst it i only when we give it hseve,"validates our claim that quicksort on an average is fast, it is only when you give it these"
svery often solting happens in stages on multiple at fr example you llike,"so, very often this sorting happens in stages on multiple attributes, for example, you might"
ave e list of studens wo are listed in alphabetical order in the l l list,have a list of students who are listed in alphabetical order in the roll list after
is distuerbing the order of elements which  re already there in the unn,"is disturbing the order of elements which were already there in the unsorted list. so,"
we argueet earlier tht eserving this order does not  matter beecause any way we ave  sot,we argued earlier that disturbing this order does not matter because any way we are going
these elements were in particular order not in the current a enn,"these elements were in particular order not for the current attribute, but for the different"
at itue d we remove them down then we are destrowying the origional  o,attribute and we move them around then we are destroying the original sorted order.
l go backwords and we find something it is equal to the current value we stop the exeuin,go backwards and we find something which is equal to the current value we stop the insertion.
the arrayso you partition din the lower in upper partsthose which are starler tha,"in the array. you partition a, into the lower and upper parts, those which are smaller than"
soorton selection so olso t n woul be on[UNK] ferst [UNK] of n nd this smation is just,"sort and selection sort. so, t n would be 1 plus 2 up to n and this summation is just"
ae biger tehan loio  you rearrange the array,"the pivot, and those which are bigger than the pivot. you rearrange the array so that"
n values is equally lightly and we can compute how much time exsort takes an each of thes,n values is equally likely and we can compute how much time quicksort takes in each of these
turns out that ina precise matematical sense it sort actual works in order t,it turns out that in a precise mathematical sense quicksort actually works in order n
choose the first element as the pivet in our a and so in order to construct,choose the first element as the pivot in our algorithm and so in order to construct the
,partitions.
ithat each time we call bik sort we randomtru is a value within the range of elemements aad,that each time we call quicksort we randomly choose a value within the range of elements
pig that as a  then it turns out that we can beat this order n square,"and pick that as the pivot, then it turns out that we can beat this order n squared"
like a sparsee where we have a putt in whic es sort this colu wen more often,"like a spread sheet where we have a button, which says sort this column then more often"
not the internal algortithm that is implemented is atually quicks on we saw that,they are not the internal algorithm that is implemented is actually quicksort we saw that
python has a function l dot sort which allows us to to sort a list vetal so you might ask or,"python has a function l dot sort which allows us to sort a list built in. you might ask,"
is sompee what swot is sorting alcrthoms python usig very often it will be quicks,"for example, what sort is sorting algorithm is python using; very often it will be quicksort."
here we have as before ar python implementation of pix ot in which we have just,"here, we have as before our python implementation of quick sort in which we have just repeated"
generate random and one of the things that this livary has is hi,to generate random numbers and one of the things that this library has is this function
then  randomise so you can do this you can wrie,"quicksort and then we import randomize. so, you can do this, you can write python functions"
finitia oflack h cersion esth eis is l,"finish off that recursion limit process because we know this is gonna kill us. so, set a large"
twwors case in tke  t notite ind usneoio tescendig der n asnding,"worst case input expect now it is an ascending order. so, both descending order and ascending"
but change the indexs from  to  inus [UNK] and then insert the current value into the quence,but change the index from k to k minus 1 and then insert the current value into this sequence.
tjtktitztngtitntetytoztitnt'tnet kithritgitijtht'tfictnyltltzkiztntitoetfktptkefoe ihtftk'titmstketitorijtktitiotoetztktk'tmtothetititytotioe itk'psi,"if we say l is a range of 500 values say, in descending order, then if we apply insertion"
cale the maxiim recueursion eth  what happens when we make a recursive call is that,"called the maximum recursion depth. so, what happens when we make a recursive call is that"
well e let us try and see what this limit is iht s,"well, first of all, let us try and see what this limit is."
so how do we define sinductively well we say that m times [UNK] is just m itself,"so, how do we define this inductively well we say that m times 1 is just m itself and"
it turns out that we cano sot [UNK] [UNK] it wil turn out efor instnce we cano sort,"it turns out that we can sort 750. now, it will turn out that, for instance, we can sort"
tof ecersions which is let tha  [UNK][UNK][UNK][UNK] if you want to change it you can by setting,"nested recursions which is less than 1000, if you want to change it you can by setting"
we could eqcuivirently write this if you want to be symetric with the previous case as m times m is m plus m,write this. if you want to be symmetric with the previous case as m times n is m plus m
on the inpuore giving so that you can set this bound expliiy,"on the inputs you are giving, so that you can set this bound explicitly."
recause har conputation can also goo on for another so the way that python stops this and ces,recursive computation can also go on forever. the way that python stops this and forces
dep it will refuse to execute the code,"depth, it will refuse to execute the code."
we need n minus one steps in the worst case to insert the last position into the sortn,we need n minus 1 steps in the worst case to insert the last position into the sorted
we get t of n minus k is equal to t of one so in other wors when k becomes n after n steps de,"we get t of n minus k is equal to t of 1. in other words when k becomes n after n steps,"
this is order n square,this is order n squared.
of that is the ua cc so if you have seen the achs e,"of that is the fibonacci series. if you have seen the fibonacci series, the"
is equal to the second value equal to [UNK] and after the second value givnr c of n,is equal to the second value is equal to 1 and after the second value fibonacci of n
is ie ac of n minus [UNK] lus e ach of n minus [UNK] in general ar recurs ive or inductive definition,is fibonacci of n minus 1 plus fibonacci of n minus 2. in general a recursive or inductive
this is very erly what we said before i ays sr of actortus on[UNK]e an other,this is very clearly what we said before; it says zero factorial is 1 and otherwise
before directly translated his recursive computation we can saye the same for multiplication e can,before directly translated as recursive computation. we can say the same for multiplication. you
and say  you want to multiply m by nm if n is  we return m otherwise we add m to,"can say if you want to multiply m by n, if n is 1, we return m otherwise we add m to"
is that we donot have to spend much time arguing that this foction is correct because,is that we do not have to spend much time arguing that this function is correct because
list by adding one element at a time so we can think of decomposing a list reversing,"list by adding one element at a time. so, we can think of decomposing a list, reversing"
say we adten to the left so we add the last element then we add the second last element,say we add them to the left. we add the last element and we add the second last element
and so on but conversely we can say that given a list,and so on. but conversely we can say that given a list
dcompos it by aking say the first element and looking at that first element,we can decompose it by taking say the first element and looking at that first element
so we will  have a vase case where the function is defined either forthe,"thing. so, we will have a base case where the function is a defined either for the empty"
list t for a simple list precsise one and in the inductive step f of l will be defined,list or for the simple list of size 1 and in the inductive step f of l will be defined
bbecause it is exactly how youou define leh indelablyyl,because this is exactly how you define length inductively.
ohere is another function hich aes something similar except instead of computing the length,"now here is another function which does something similar except instead of computing the length,"
to ad if i have an empty list then the um will be [UNK] because i hve nothing to,"to add, if i have an empty list, then the sum will be 0 because i have nothing to put"
position and then thishoul be minus [UNK] so we take the value at the last position,"position and then, this should be minus 1. so, we take the value at the last position"
o sorting the sequence f [UNK] but exluding the last positon y the waywe,"result of sorting the sequence up to, but excluding the last position, but the way we"
tby mtoplyying wagy th al ttttttto we n aso o this ror ose reon ttu,"by multiplying by the value n. so, we can also do this for other functions. you may"
if it is [UNK] then i av an empty list if i alve [UNK] to [UNK] an ave a list of one positio,"if it is 0, then i have an empty list. if i have 0 to 1, then i have a list of one position,"
this completes they  a nof the left suf,"so, this completes inorder traversal of the left subtree of 5."
a search t is to be able to do something i binary search and this is with danary,a search tree is to be able to do something like binary search and this is with dynamic
ave incert and delete as operations but the mone main fundamental oecton,"so, we will also have insert and delete as operations, but the main fundamental operation"
bi inary search we start at the wof,like in binary search we start at the root.
atacks so we always have self is the first carammeted to our function,we always have the self as the first parameter to our function.
is,if it is.
so if i have to go rom the left most part ad if i cannot go anany further then i find it,"so, if i have to go from the left most path and if i cannot go any further then i find"
we wul always supply tha function only when tree is n on emty,"so, we will always apply this function only when tree is non empty."
i cann c further left then i ave found it,if i cannot go further left then i found it.
this case if i reach one since i canot go for the lefpt one is the mnnmum ve otherwise,"in this case, if i reach one since i cannot go further one is the minimum value otherwise"
no further riht path from [UNK] [UNK] must be the maxum value in this tre,"no further right path from 9, 9 must be the maximum value in this tree."
,from the tree.
the firs function that we lotok for is insert so how do we insert an element ittyy,"the first function that we look for is insert, how do we insert an element in the tree well"
nall hs is hat biger than the curent note vlue  to the wk,all values that are bigger than the current node value are to the right.
[UNK] and we find that we avre exhausted this paththend there is no possible [UNK][UNK] in th,"28 and we find that we have exhausted this path and there is no possible 21 in this tree,"
pe  so we insert t the,"so, we insert it there."
and look for [UNK] ay e [UNK],"similarly, you can start and look for 65."
here is an example of a aery searchsoyou can check for instance that to the left,"here is an example of a binary search tree, you can check for instance that to the left"
at as appropiate,or on the right as appropriate.
oif we find ve we must leat it,if we find v we must delete it.
supposing we first deleate [UNK][UNK][UNK] then we first search for [UNK][UNK] we find it since it is a leaf,"so, supposing we first delete 65 then we first search for 65, we find it since it is a leaf"
kee an axim an o the le owe,the maximum value from the left.
always ar oe so we ned o remove this,"so, we need to remove this 28."
so we can just walk dout rmove the [UNK][UNK] and promote the [UNK][UNK],"so, we can just walked out remove the 28 and promote the 21."
it has no left chi but  is in the right  of,"it has no left child, but 9 is in the right subtree of 8."
just deleted and we make this now empty if on the other hand it has only o,leaf we just delete it and we make this node empty if on the other hand it has only one
sif so actually in this case if the left is empty then we just premote the righ andd if it is,"so, actually in this case if the left is empty then we just promote the right and if it is"
,three fields are none.
just take basically this note and copy these values  by n,"so, we just take basically this node and copy these values one by one here."
ave two values billo ech nore portentially a left chise and a right chif,have two values below each node potentially a left child and a right child.
ron is,are organized.
then we have th mpty  is leaf whic check whether the current value is,empty children then we have isempty and iseleaf we check whether the current value is none
s each n now consists s of three nitomes the value being stored the left chi and the right,"so, each node now consist of three items the value being stored the left child and the"
move the leaf and make it empty it is the left child is empty then we copy the right,remove the leaf and make it empty if it is the left child is empty then we copy the right
search for a value but binary search can be used if we can sort tthe data once and for all,"search for a value, but binary search can be used if we can sort data once and for all"
the str fonction just displaysed hin olreru,and the str function just displays the inorder traversal.
d this tkined to quick it in som int,"so, i am just trying to put it in some random order."
so i can now insert an more value,"so, 1, 2, 3, 4, i can now insert more values."
fo pl f [UNK] then i find he ave [UNK] t fr if i co l,"3 then i find that i have 1, 2, 4."
they have no children,"so, they have no children."
points to [UNK] and the node which [UNK] agan has [UNK]wo n[UNK] pointers of cause it is,pointer points to 9 and the node with nine again has two none pointers because it is
n this the empty try will be a single empty o and a leafe no that is not,with this the empty tree will be a single empty node and a leaf node that is not none
will have a valulue and both its children will be emptty,will have a value and both it is children will be empty nodes.
fcsion works as follows so we first set up the value to eit,"the init function works as follows right, we first setup the value to be initval which"
to this,"point to this none, none."
depending on whether init value is none or not none we undup either,"so, depending on that the init values none or not none we end up either a tree with three"
ots with [UNK] dmiinote low or a single em note denoting tey mtyt,nodes with two dummy nodes below or a single empty node denoting the empty tree.
lay this and then it ill t for the rih,display this and then it will explore the right.
if we execute this ep by step so  if we reach itsess pust do in in order tvs,"so, if we execute this step by step, 5 if we reach it says first do an inorder traversal"
have t n or et oe,"so, again we have to do a inorder traversal."
e i se evand now when we have [UNK] and in orde troversal of [UNK] consis,"so, we go it is left and now when we have one and inorder traversal of one consists"
is vering from [UNK] to the length of l mins [UNK],is varying from 0 to the length of l minus 1.
let us see how much time this takes,let us see how much time this takes.
t[UNK]txtztohtytukt jstst stntct tftrtrtztytotk t tzt[UNK]t tnt t stl t totltethlt,"expressions like this which have different terms like n, n square, n cube, it turns out"
we said that for sorting algorithm thie selection sort which takes order n square will not,"we said that for sorting algorithm like selection sort, which takes order n square will not"
let us start the python interpreter,let us start the python interpreter.
now wingeer we con take a other lissts,now in general we can take a longer list.
if look at ll it s [UNK][UNK]  down to [UNK],"if i look at l, it is 500 down to 1."
see there is an appreavimnt o the act,see there is an appreciable gap.
no if i do it for say [UNK] [UNK]then the sightly long e,"now if i do it for say 2000, then there is slightly longer gap."
tan mase is below and so n,mark is below and so on.
is on the top then the lowest part wou pe at the bottom,mark is on the top then the lowest mark will be at the bottom.
how do we do this wele we just keep looking at each paper in tuurn each time we find that,"how do we do this, where we just keep looking at each paper in turn, each time we find a"
snow we have two papers dstacked up in order a we keep doing this we will buld u,"now, we have two papers stacked up, in order as we keep doing this we will build up the"
stack from bottom to top which has the lowest mark of th bottom and the highest marks,"stack from bottom to top which has the lowest mark at the bottom, and the highest mark on"
on the top,the top.
en proceeding in this way at the next step w will giove up [UNK][UNK] and then [UNK][UNK] and then [UNK],and then proceeding in this way at the next step we will pick up 55 and then 64 and then
for instance mediamn value median value in a set is the value sus that half the,"for instance, the median value - the median value in a set is a value such that half the"
this way by doing [UNK] scans o our list of [UNK] elements we have built up a new sequence,"in this way by doing six scans on our list of six elements, we have build up a new sequence"
his particular strategy which is very natural an intuative as a name is called selections,this particular strategy which is very natural and intuitive has a name is called selection
the algorithom that we exacte it just now we need it to build up a second list for a second,"in the algorithm that we executed just now, we needed to build up a second list or a second"
move it to the beginning where it is supposed to be and exchange at what is at the beginnin,to the beginning where it is supposed to be and exchange it with what is at the beginning.
ow we no longer have to worry about everything to do with one we only need to look at this,"now we no longer have to worry about anything to do with 21, we only need to look at this"
slice if you want to call it that starting from [UNK][UNK],slice if you want to call it that starting from 32.
so we do this and we find the second smallest element,we do this and we find the second smallest element.
so having finishedthis scan we would say if bif i  should move to the third position,"so, having finished this scan we would say 55 should move to the third position and 89"
we can also do things like builting frequent ce tables or checking for doplicets essentially ne,"we can also do things like building frequency tables or checking for duplicates, essentially"
sway we just kp going on,this way we just keep going on.
and we have a sorted sequence using sollection sort where instead of making a second sequence,"and we have a sorted sequence using selection sort where instead of making a second sequence,"
e ave just mticaly mmoove theis pmales element we apfond to the start  the,we have just systematically moved the smallest element we have found to the start with the
tt tbtot tzthtetntjwk natk yhthte t't stotat,segment or section that we are looking at right now.
nwe will sca the sequence from one on woards then we willscan the sequence from  on word,"then we will scan the sequence from one onwards, then we will scan the sequence on two onwards,"
the vi,the beginning.
[UNK] and then it goes on[UNK]e [UNK]to up t[UNK]o the length of l minus [UNK],"0, and then it goes to 1, 2 up to the length of l minus 1."
en started from now we could pick another square for exm,"where we started from. now, we could pick another square for example,"
culd put this square over here and if wit explore that it will again in turn prettue,we could pick this square over here and if we explore that it will again in turn produce
ni and some of these neibes owell avete ao neimber so are indicated by join,8 neighbors and some of these neighbors overlap the yellow neighbors. i indicate it by joint
proces of marckin es squares sometimes e mark  square tie and we have,"process of marking, these squares, sometimes we mark the square twice and we have to have"
then the squares that can reach from x to will incue squares ind x  so how do we enure,"then the squares that can reach from x 2 will include squares in x 1. so, how do we ensure"
delatd to this question is how do we know when to stop,and related to this question is how do we know when to stop.
are fruitlussly going aead and we are never going to reae tagins w,"are fruitlessly going ahead and we are never going to reach the target square. so, how"
move so if we print the name colors we just get list black right and treen ow,"removed. so, if we print the name colours, we just get the list black, red and green."
head of the que and the look at all the squares inreach able at one step,the head of the queue and we look at all the squares reachable at one step.
a x and y some of which were already marked some of which are marked just now,"from a x and a y, some of which were already marked, some of which are marked just now."
what again reached from there this guarante is that the square which has been reached [UNK],"what i can reach from there. so, this guarantees that a square which has been reached once"
here is some python sol a code for this so we are going to explorde from sx s y to,"here is some python pseudo code for this. we are going to explore from s x, s y to t"
be [UNK] remember this list comprehension tationso it says [UNK] for i an range n gives us a list,be 0. remember this list comprehension notation. it says 0 for i in range n gives us a list
mi block s each block having n[UNK] los this ses an inition nothing is mked,of m blocks and each block having n zeros. this says that initially nothing is marked.
oi the quueue so long as the queue is not empty we pop one element from,"node from the queue. now, so long the queue is not empty, we pop one element from the"
some point is procuscesso stop the en i will return whether,"at some point, this process has to stop. at the end i will return whether i will return"
so we say coleris equal to set with  with no arguments  like lis an other data structures we can c,"so, we say colours equal to set with no arguments. like lists and other data structures, we can"
soour first step is to remove this from the queue and explore it is neigbors now we,"so, our first step is to remove this from the queue and explore its neighbors. now,"
mbirships i so if in the previous lists set colors which had  black n,"test membership using in. so, if in the previous lists set colours which had red, black and"
his or aoinso we wl just grow it leke this o we say that yq consist,"it is more annoying. so, you just grow it like this. so, we say that my queue consists"
thinon it also has a new thing here which is [UNK] [UNK]o continiu,"original thing and it also has a new thing here which is 1 0. so, continuing like this"
[UNK] [UNK] but one of m is [UNK] [UNK]so i get anew nab[UNK] [UNK]then i continue,"is 2 0, but one of them is 0 0. so, i get a new neighbor 0 0 here and then, i continue"
now when i remove [UNK] [UNK] which is this one i find that both hese neigbor i exp,"now, when i remove 0 2 which is this one, i find that both these neighbors i explored."
nothing i continue i do to [UNK] again i find both it na as xpore ou do nothing,"so, i add nothing. i continue with 2 1. again, i find both its neighbors explored and do"
argate s more reach able n the socil,target is not reachable from the source node.
to smerize data structure by ways of organizing information that allow efficient processing,to summarize data structures are ways of organizing information that allow efficient processing
sewe also saw that re can takes sequences and use them in [UNK]wo struocture ways o stac,"sets rather we also saw that we can take sequences and use them in two structured ways. so, stack"
saw that if y give no parguments to set ogte an empty set but if we give a list,"we saw that if we give no arguments to set you get an empty set, but if we give a list"
such as this [UNK] [UNK] [UNK] [UNK] [UNK] with [UNK] plik ats and assign it to the name numbers then becase,"such as this 1, 3, 2, 1, 4 with duplicates and assign it to the name numbers, then because"
itis a set the two pliket ones would e removed and we will get a list of wewill get a se,"its a set the duplicate ones will be removed and we will get a list of, we will get a set"
not be the order in which we provideit this is very much like a dictionay,not be the order in which you provided it. this is very much like a dictionary sets;
letters from this side e if we give this string ona tothe set function then we,"letters from this set. so, if we give this string banana to the set function, then we"
so as ou ould expect sets support basing opperations like the cont depart in mathm,"so, as you would expect sets support basic operations like their counterpart in mathematics,"
the ie numbers to be the set of called ne number from [UNK] ad [UNK] b [UNK] and [UNK] using,the prime numbers to be the set of all prime numbers from 1 and 11 between 2 and 11 using
vhese set function as we saw before oif we write this fertical bark then we can get,"these set function as we saw before. if we write this vertical bar, then we can get the"
e stack sa stack is a last in first to ah list so we can only remove from a stack the element,"a stack. a stack is a last in first out list. so, we can only remove from a stack the element"
,stack.
beghavior because as we add queens and remove them what we need to do effectively is to,"behavior because as we add queens and remove them, what we need to do effectively is to"
so add queueu will add x to the rear of the qeu and remove qeu will remove th e,"you get served. so, add q will add x to the rear of the queue and remove q will remove"
itaif you have gone throuh the documentation you willfind it,"but if you have gone through the documentation, you will find it."
in other words push an x to the beginning so if i have a qgque at this pa ith has om,"in other words, push an x to the beginning. if i have a queue at this form which has some"
andthen use pop to just remove the last element ofis so queues and stacks an both we easy,then use the pop to just remove the last element of the list. queues and stacks can both be
at a position s x  s y this case the nigt is denoted by t,"at a position s x comma s y. in this case, the knight is denoted by this red symbol."
remaining string and keep it to thus so again let us see how this works,remaining string and keep it with us. so again let us see how this works.
d by comma notice that is a string now if i say cs  line dot split using comma as a separateor,by commas notice it is a string. now if i say csv line dot split using comma as a separator
you want ou then have to convert them using intthese are still stringks so  just,"you want you then have to convert them using int or these are still strings. so, it just"
so we will see all these in this lecture,"so, we will see all this in this lecture."
to do it once then i get the first [UNK] then [UNK] and [UNK] does not get  becase i,"to do it once then i get the first 6, but then 7 and 8 does not get split because it"
only sprits one if i change hi to something more fa,"only splits once. now, if i change this to something more fancy"
coma and then use that to join the columns  thisis a bit confusing so join is,"comma and then use that to join the columns. now this is a bit confusing, so join is a"
a function which is associated o is string in this case the string in concern is a commo n,function which is associated with a string. in this case a string in concerned is a comma.
so it says more or lust ou are saying commat dot join columns which is use colma to jon,"so it says, more or less you are saying comma dot join columns which is use comma to join"
to the hyphon and then saying hyphon join i directly use the string itself,"to the hyphens and then saying hyphens dot join i directly use this string itself, just"
just an to illustrate that you can directly use this thejoining string itself as a constant string,want to illustrate that you can directly use this joining string itself as a constant string
convert the first letter to upper case and keep the rest o oe case if you say,"convert the first letter to upper case and keep the rest as lower case, if you say s"
there are other fancy things that s not tytale so tytale will capitalize each word,"there are other fancy things like s dot title. so, title will capitalize each word. this"
the other thingthat we can do which strings is to resize them to fit what wyou wanted,the other thing that you can do with strings is to resize them to fit what you want. so
which is of length n with s centred iit no by centring what we manis that,which is of length n with s centered in it. now by centering what we mean is that on either
oof the other types of functions whe wefind associatewd strings are tote,some of the other types of functions which we find associated to strings are to check
so that is what s doat is alpfa l his ittn alphabet x trint if it is true  i,"z. so that is what s dot is alpha says is it an alphabetic string, if it is true it"
we will if we need them as we go along we will use them and explain them,we will if we need them as we go along we will use them and explain them.
an extemply portant part of pythons utility as a blue language for transforming,an extremely important part of pythons utility as a glue language for transforming things
string processing fnunctions that make it easier to modifiy thes te,string processing functions that make it easier to modify this content.
s dot fnd pattern will return the first position in s which pattern occurs if,"s, s dot find pattern will return the first position in s which pattern occurs. and if"
to do something whih  yol can use the bult ind string function wich ae quite al,and to do something with this you can use built in string functions which are quite
of earor in this case a value  so again let us just see how thes things actuall,of error in this case a value error. so again let us just see how these things actually
so we have a string here s which contains the words bround t fox gray dog round fox[UNK],"so, we have a string here s which contains the word ""brown fox grey dog brown fox."" now"
on the other hand i look for somethingwhich is not there likecackk then find,"if on the other hand i look for something which is not there like ""cat"" then find will"
it gives me e value error saying the substaing does natteaol this is how f,1 it gives me a value error saying the substring does not occur right this is how find and
now this can be controled in the following way supposing i do not want e,"string. now this can be controlled in the following ways; supposing, i do not want to"
beginning should be replaced it says eplace at most the first n copies id notice that,beginning should be replaced. it says replace at most the first n copies and notice that
something else is not that s is going to change because string s rdemuutable  is going,"something else, is not that s is going to change because strings are immutable is going"
this point the ab  second ab has been destroiybed  so it will not find it,this point the second aba has been destroyed. so it will not find it.
as if i had had for instance two copies of this iscjhoint then it would have correctly,"whereas, if i had for instance two copies of this disjoint then it would have correctly"
like this the first column would be returned folloed by comma then e second columns e,"like this. the first column would be written followed by comma then second column, so if"
alow then when we write it out a stex we will get [UNK]x [UNK] a alo,"string hello, then we write it out a text as you will get 6, 7 and ""hello"". actually"
something simpler lss just say that we had t[UNK] numbers  [UNK] [UNK] for exampl,"use something simpler. so let us just say that we had three numbers 6, 7 and 8 for example."
now what we want to do is we want to extract this nfunction so we want to extract,"now, what we want to do is we want to extract this information. so, we want to extract the"
first timmie a first thing so columns is just a name that we are us,"first comma is a first thing. so columns is just a name that we have used, it could be"
conrol how many spits  ou mae syou can sagpit acording to this stringth tt,"control how many splits you make. so, you can say split according to this string notice"
it is a kind of sequence  o likes strings and lists in a [UNK]yp you can extract one element,"it is a kind of sequence. so, like strings and list, in a tuple you can extract one element"
heother thing to e up in mind is that ro it is tempting to believe that  dot,the other thing to keep in mind is that though it is tempting to believe that d dot keys
start with an enmplictionarry and now let us create for each better an entrry which i,us start with an empty dictionary. and now let us create for each letter and entry which
the same as that so ye can say tr n  v  i,"is the same as that letter. so, we can say for l in a, b, c, d, e, f, g, h, i, d i, d"
anddomeais first then a is way down and sotthere is most pecific,"random order. so, e is first and a is way down and so on. there is no specific order"
in other way to run through the values in dictionary s to use d dot values,"in other way to run through the values in a dictionary is to use d dot values. so, d"
lse in tes con dot values and addot,s in test 1 dot values and add it to the total.
ell you false otherwise the same is true of keys so if i want to add,"it tells you false otherwise. the same is true of keys. so, if i want to add up the"
then  ais because if i does not appear it is illegal to acis et,"then you add a score, because if it does not appear it is illegal to access that match."
association of values to keys then you have in a list yoonly constrate that python,association of values to keys than you have in a list; the only constraint that python
is that we can use  dot keys to citle through all the keys in a ditio,"the other thing is that we can use d dot keys to cycle through all the keys in the dictionary,"
an simgilarly [UNK] dot values but the order in which gicves k is m  iemerge from [UNK] dot k,"and similarly d dot values, but the order in which these keys emerge from d dot keys"
sthis kind of a sequence of values with tha round bracket is called at [UNK],"so, this kind of a sequence of values with the round bracket is called a tuple."
ese to valuees,keys to values.
what is the value associated the one score is [UNK]f[UNK] whch are ur score is [UNK][UNK],"name what is the value associated. so, dhawanã•s score is 84, pujaraã•s score is 16, kohliã•s"
his is what python calls a dictionary and some other pogramming lamgwhige s this is also,"this is what python calls a dictionary, in some other programming languages this is also"
is that like a list it is tov we can take a value with the key and replace it  we can cheng,"is that like a list, it is mutable; we can take a value with a key and replace it. so,"
wh ure our score if you want toy a n assinment [UNK] [UNK][UNK] [UNK] and this will just,"we can change pujaraã•s score, if you want by an assignment to 72, and this will just"
dictionaries can e i tdated in place and hencs are mmu exactly like lis,"so, dictionaries can be updated in place and hence are mutable exactly like lists."
assign t  tw pot values for  instance we can take a two diminsional point ht te,"and assign it a tuple of values. for instance, we can take a two-dimensional point with x"
[UNK] all the players that we had bbefore like the[UNK] an note is that,"to all the players that we had before like dhawan and pujara and so on. so, notice that"
asoociate with thae name so that we can operate on it wih the appropriate opperation,"associating with the name, so that we can operate on it with the appropriate operations"
being any immutable vlue that means if k can be an integer to be a flow to be,"be any immutable value; that means, your key could be an integer, it could be a float,"
test [UNK]e and the score in tes and you can have m more than one claere in tes o,in test 1 and the score in test 2. and we can have more than one player in test 2 like
coll racu nontluion  ac e enrryy wiil e the k cola e he vae,"this kind of curly bracket notation, where each entry will be the key followed by the"
e s spare s [UNK] [UNK]   now this is,"keys, so suppose we will say score test 1, dhawan equal to 76. now this is going to give"
similarly we can say that a date is made up of tee plps a da  moth and e,"similarly, we can say that a date is made up of three parts a day, a month, and a year;"
s an eer because we have not told it that score s,"us an error, because we have not told it that score test 1 is suppose to be a dictionary."
use it sois   sandnow iwe can go back and st,"will use it, so is score test 2. now we can go back and set dhawan's score"
set to s first steps now we ask  to show us what sore n t r,"set kohliã•s score in the first test to 200. now, if you ask me to show what scores looks"
it can inclose this into a three value or [UNK]pl [UNK] behaves like a listt,"and we can encloses into a three value or triple. so, tuple behaves like a list, so"
we wolt  process a dictionary then we would need to run through all the values,if you want to process a dictionary then we would need to run through all the values;
and tl thing we woull do is for every key in dd o ke  do something,d. and the typical thing we would do is for every key in d dot keys do something with
do some thing wit the value asociat to thatno one thing we have to keep in m,do something with a value associated to that. now one thing we have to keep in mind which
s ng shifting th,"so, just keep shifting temp."
the value v and we make this last note point to this n,a value v and we make this last node point to this new node.
are completely different object,creates a completely different object.
said that if we pass nmutable value to a function so long as we do not reassin htha,we said that if we pass a mutable value to a function so long as we do not reassign that
to the functito the list or dictionary inside the function we get a new coplm ad then after that any change e e,we reassign to the list or dictionary inside the function we get a new copy and then after
we do is we do not change the identity of the noble we change what it contains,"what we do is we do not change the identity of the node, we change what it contains."
,and not first.
here is the code for insert,here is the code for insert.
ust at the change ome to v so insert and append fo behave the same way wete,"we just have to change none to v. so, insert and append both behave the same way with an"
is,empty list.
go from the empty list to the list v does not matterwhethe er inserting or upending,we go from the empty list to the list v. it does not matter whether you are inserting
,or appending.
w create this new olr and then we do this slopping of values between,"otherwise, we create this new node and then we do this swapping of values between the"
o value using this python sinmontr is assignment,node dot value to self dot value using this python simultaneous assignment.
similarly we take self dot next which was pointgt to the next now thand mae,and similarly we take self dot next which was pointing to the next node and make it
so inassense all thet delete requires a [UNK] is to reassign the pointer from b,"so, in essense, all that delete requires us to do is to reassign the pointer from before"
o we scan the list for the first l now notice that in list fromis  recsuer we need,we scan the list for the first v. now notice that in this plumbing procedure we need to
a list can have value no,"in a list can have value none, right."
break the connection between the parameter we pass and the thing we get back,object and it will break the connection between the parameter we passed and the thing we get
sat,we use the same trick.
we just copy this value from here to here and then we delete vete,so we just copy this value from here to here and then we delete v 2.
so we wanted to delete the first note we are not allowed to delete the first note becaue,"so, we wanted to delete the first node, we are not allowed to delete the first node because"
cannot change whon  points to,we cannot change what l points to.
the part of the tunoo,here is a part of the delete function.
so if it is emply you do noething otherwise if this elf  dot value i x first,if it is empty we do nothing; otherwise if this self dot value is x the first node is
be ne andwe are oe,to be none and we are done.
hiis the case  value to be delittedis int first not anthis s is h second,which is the case when the value to be deleted is in the first node and this is the second
to the furse in by cassing it as we did before,to the first and bypassing it as we did before.
we just point to the next note and ask the next note the list starting at the,"otherwise we just point to the next node and ask the next node, the list starting at the"
nxt knowin what is normally called the taile of he list to delete v from itself,"next node, what is normally called the tail of the list, to delete v from itself."
so we come here and then we doil e tight w,"so, we come here and then we delete it."
,none none.
this i the first part is one who delete the first element from a list or the recurt part,"so the first part is when we delete the first element from a list, but the recursive part"
,none.
so we make this is o the last,"so, you make this node the last node."
othe only thing that remember what becurse ailite is when we reach the end of the list,the only thing to remember about recursive delete is when we reach the end of the list
remove thiss ore,and remove this node.
owe first imlize or list that wea dont to produce to the empty list iff,"so, we first initialize our list that we are going to produce for the empty list."
shere we have code wich exactly reflx what we did in the slihe,here we have code which exactly reflects what we did in the slides.
so we start with this initial initial ation which sets the initial value to be [UNK] by,"so, we start with this initial initialization which sets the initial value to be none by"
fothe slight bye just return self dot value equal to equal to one but we have,"form in the slide by saying just return self dot value equal to equal to none, but we have"
creates a new inwichif eres the last note it creates a new note and s,creates a new node... if we have reached the last node it creates a new node and makes
this xinsert function again if it is empty then it just creates a singletin list otherwise i,this insert function: again if it is empty then it just creates a singleton list otherwise
that the whatself points o does not t change but rather we create a reordirin,"that what self points to does not change, but rather we create a reordering of the new"
sthe ic o bdeleaces again says that that t if thelist is mty than we do nothing,"so, the recursive delete again says that if the list is empty then we do nothing, otherwise"
is of the first valueisould be read t then we have to be caareful en wh esure we,if the first value is to be deleted then we have to be careful and we have to make sure
anventually returns a string representation of that,and eventually returns a string representation of that list.
if we now un this by inpoting then we could say for instance that el is  list,"if we now run this by importing, then we could say, for instance, that l is a list with value"
this in a loop and say for i in range [UNK] say l l dot i,"this in a loop and say for i in range 1 say 11, l dot append i."
here is the basic  class that we are going to use a is a class node s,"here is the basic class that we are going to use, it is a class node."
the initial alue is by default n unless i provide you an initialvalue which,the initial value is by default none unless i provide you an initial value in which case
nod it to gothrough tise we have to start at the digining and walk for,"so, in order to go through the list we have to start at the beginning and walk following"
we just poiintke to list we ave pointing to and look a the very first value wichil we s,we just take the list we are pointing to and look at the very first value which will be
if i ask whether l[UNK] is empty  the answer wil be true,"if i ask whether l1 is empty, the answer will be true."
now we create a new element here with the value t and we make this rfrent point ith,"now, we create a new element here with the value v and we make this element point to"
we create a fw element the not qve and set the next queen of the last n,"this, we create a new element with the node v and set the next field of the last node"
if it is empty then we just set the value i tethis is converts the single now t,"if it is empty, then we just set the value to v. so, this just converts the single node"
t there are [UNK] notes e,there are 4 nodes.
we have been abundantry careful ind making sure that this is,we have been abundantly careful in making sure that this is parsable.
rsib so we are put this bracket saying that we take the object self dod next and apply appe,"so, we have put this bracket saying that we take the object self dot next and apply append"
we need not actually put the bracketso we can just write sel t dot next dot append b and,"we need not actually put the bracket, we can just write self dot next dot append v and"
so this dot is taken from the right,"so, this dot is taken from the right."
so we have come to the last lecture of this course so instead of going into more features,"we have come to the last lecture of this course. so, instead of going into more features of"
keep writing statements without worrying about what ases and what why is as you go alng,"and keep writing statements without worrying about what x is and what y is, as you go along"
the coe see whichis inside the class code then as the maintainers of the class we could a,"see if it is inside the class code, then as the maintainers of the class we would make"
all the code within the class tobe in terms of r theta annot x y but if somebody outside,"the code within the class to be in terms of r, theta and not x, y. but if somebody outside"
person that od stopps working because we have changed an internal implementation of,"person their code stops working, because we have changed an internal implementation of"
en define values and valipttethat makes it very convenient and wen,"you can define values and manipulate them. so, that makes it very convenient and very"
way we can get around this is to actually have some way of saying that these names,way we can get around this is to actually have some way of saying that these names are
side a function and say it refers to the same initable value ot side there arer situatin,inside a function and say it refers to the same immutable value outside. there are situations
declrations and make things more usible but it does not ad this is one example,"declarations and make things more usable, but it does not and this is one example."
in languages like you will find a lot of declarations saying private and public,"in languages like java or... you will find a lot of declarations saying private and public,"
te implementation from the inteface so actually in an ideal word the implementation us,"implementation from the interface. actually, in an ideal world, the implementation must"
we can set ow how we set it is through this function so if inside the function we start s,"we can set. now how we set it is through this function. so, if inside the functions we start"
for the new x and recompute the theta so in hise way if we havave only these functin,for the new x and recompute the theta. in this way if we have only these functions
r manupleted oogh these functions and we do not now the actual representations,are manipulated through these functions and we do not know the actual representation.
this is es for every part of the function oof the data type we have to use these functions and partly,this is cumbersome for every part of the data type we have to use these functions. and partly
s n vailiables private and only allow restricted access so that they ae use in the approtriate,"and variables private and only allow restricted access, so that they are used in the appropriate"
another reason to have this style of as,anymore. another reason to have this style of accessing
values ar sometimes you do not want indivitual values to be actually access,values is sometimes you do not want individual values to be actually accessed individually.
e so if we update day or mu we have to be careful i we are updating it,"year. so, if we update day or month we have to be careful that we are updating it legally,"
the values which have to be preseve and you can preserve those by controling s,the values which have to be preserved and you can preserve those by controlling access
thm s s you ca not set t rety hav the o[UNK]e,"to them. so you can say, you cannot set the day separately and the month separately, you"
declare decide in advance that il nean ta space for x for one indigur cse tomor t,"cannot decide in advance that it needs a space for x, for one integer because tomorrow this"
space always in the dinamic manrit has to keep as you use he name it has tofind ce,"space always in a dynamic manner, it has to keep as you use a name, it has to find space"
we mention hat and early r lecture  the difference beten arrays and this,"we mentioned that in an earlier lecture, the difference between arrays and lists."
object base implementation to get to the ith element we have to start or the head and go to the,based implementation to get to the ith element we have to start with the head and go to the
this int of user define data types and the startic part takes care of all the strandr,for this kind of user defined data types and the static part takes care of all the standard
ays are much more efficient than this,are much more efficient than lists.
pacewhotakes care of itsimilarly when we had a list if you remember n y want,"space? who takes care of it? similarly when we had a list, if you remember, when we wanted"
din ha  delate it we just by pass rih it said that the first element o in,"did not actually delete it, we just bypassed it, we said that the first element points"
ttnow we can no longer reach that value nor can we reuse it because it as been declared,"it, now we can no longer reach that value nor can we reuse it because it has been declared"
is whereyou start wit the names that you have ou g n o marck this,"here. so, you start with the names that you have and you go on... you mark this thing,"
ow this could be a list  l could be a list r it could be that thist in tun points to,"now this could be a list, l could be a list, it could be that this in turn points to the"
mmo so remember that all the things that you declare in advance are arlocatin satical,"memory, so remember that all the things that you declare in advance are allocated statically,"
n ave caundo then i calnot say hence forthat onl,"you cannot undo them, you cannot say hence forth i do not need them."
be that as i programm runs longer and longer it wil start taking up  more ando memary,"be that as the program runs longer and longer, it will start taking up more and more memory"
will suffer ofe a time as a space shricks vertually speaking all modern language,"will suffer over time as the space shrinks. so, virtually speaking all modern languages"
use oarwehe collection because its so much simpler though there is the runtime over,use garbage collection because it is so much simpler. though there is a runtime overhead
by making surethat yoor rawih collection work rather than lying on the good sense,making sure that your garbage collection works rather than relying on the good sense of the
you actually give a step by step process to compute things so you assigned name,language you actually give a step by step process to compute things. you assign names
to keep track of inermetiwtete values you put things in lists and then you have to y,"to keep track of intermediate values, you put things in lists and then you have to basically"
ffacptrarrieis as a function nd this is its type it takes an ininteger as input and  produe,"factorial is a function and this is itã•s type, it takes an integer as input and produces"
way the hascl work is by arewriting we would not get into that but the may e,"the actual way that haskell works is by rewriting. we will not get into that, but the main point"
that there is no no mansion here about the intermediate names is just taking the,"is that there is no mention here about the intermediate names, it is just taking the"
such as head or tail to take the first element an a last element o if hve a o empty list,"such as head or tail to take the first element or the last element. so, if you have a non"
e programming which is called declitteve programming and you can look at u,of programming which is called declarative programming and you can look it up. it is
wll not know that w will suppose to use x are not y because every new name coes,will not know that you were supposed to use x and not y because every new name that comes
s kind of type os can be very very hard to findnd and because   have this kind of,"these kind of typos can be very very hard to find, and because you have this kind of"
on it well but for many things you can just et by on the fly y just translate,"learn it well, but for many things you can just get by on the fly by just translating"
tis amisteae of et an r rogrioryls af rgrn,"it is a mistake to sit and learn a programming language; nobody learns a programming language,"
before and therefore something is fong a mistype name can be easily caolded,"before and therefore something is wrong. so, a miss typed name can be easily caught as"
asigning it some different vype of value now if you hare announced to python the,assigning it some different type of value. now if you had announced to python that x
as a compilor it poult ceth it inten sa lot of errors are either type s aind variable,a compiler it would catch it internally. a lot of errors are either typos in variable
very easily by compilors if you have declarations of names both of these get uncot,"very easily by compilers if you have declarations of names, both of these get uncaught or they"
a nacme has a type in particular we saw that if we want to use something as a list we a,a name has a type. in particular we saw that if we want to use something as a list we have
use a defined typsa we have for instance it is very convenient to be able to g,"user defined types that we have, for instance it is very convenient to be able to define"
you can say that hname t is of type tr and then you can use this value like,you can say that the name t is of type tree and then you can use this value like none
and you can use o[UNK] ffor any thing but wtas non it has no type th,"none and you can use none for anything, but when it has none, it has no type - that is"
of diffence soif ython a name has the value n it has by definition no type where,"the difference. if in python a name has the value none, it has by definition no type,"
ak of depclarations makes things a litte e more complicated in python which one does a now,lack of declaration makes things a little bit more complicated in python which one doesnã•t
ma  comma thross in beginning prra the other thing is much more cerious,"normally come across in beginning programming. the other thing is much more serious. so,"
this is more to do with convenience and representation of empty objects but witout declarations,"this is more to do with convenience and representation of empty objects, but without declarations"
push saym a qeue may be also a list but when yo want they d and remove q,"push. same way a queue may be also a list, but we only want the add and remove queue"
inx and y and start d manipulating p dotx n[UNK] p dot directly outsid e,using x and y and started manipulating p dot x and p dot y directly outside the code.
