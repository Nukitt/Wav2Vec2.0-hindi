abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt12 list it does not mean that the functions that are defined for list are actually legal 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt121 you would have for instance a function like say push defined and it will have to parameters 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt139 a l pass to now this call this this function in it which is why x called init so any 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt148 delete max defined for keeps but its call like we have a separate copy of this function 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt167 it max normal the how the priority queue is actually implemented then in the delete max show 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt172 the other concrete data types which we use a none 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt18 not want to look at the implementation and ask whether its a list of not because we 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt3 this weekâ€™s lectures so let us revisit what we mean by data structure so a data structure 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt32 the the important thing is that we would like 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt37 implementation but we definitely to do not want the implementation to determine 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt48 that we use a sees as a sequence of inserts and delete max the user does is the in a different 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt50 the perception that one is pass in the other but the actual correctness of the implementation 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt60 a for input which shown as a kind of for a thing in the bottom we are if we have is not for input 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt61 and we have a way to a seen information about the state of the stack so we can imagine 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt68 is we only want those operations which the externally visible interface 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt69 the buttons in this case of a black box picture allow us to use 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt75 twice the we define dd to be an empty dictionary then we can use a function such as d dot values 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt76 is to get the list of values currently stored but we cannot manipulate the as a list 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt77 we cannot say p dot append it will give us an error so python uses the type information 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt81 whose behavior specified without telling us anything about the internal implementation 
abstract_datatypes,_classes_and_objects_[D_znhgteJ0]_en_vtt_txt9 and remove the element at the end of the queue using the function remove queue and for 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt101 possibilities us factors we do not have to look at any number bigger than n because it cannot 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt108 first step in our algorithm says to compute the factors of fourteen so by or observation 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt112 in this case two divides fourteen because fourteen divided to seven but no remainder now three does not update for de 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt123 seven divides to the seven nine the sixty three then again eight does not divide but nine does then again or 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt124 are large gap of numbers which do not divide and then twenty one does divide because twenty one threes 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt125 sixty three and then finally we find that the last factor that we have is sixty three so in 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt131 here is a very simple way we just go through one of the lists say the list of factor 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt132 of fourteen and for each item in the list we check if it is a factor of sixty three 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt137 so in this way we have systematically called through one two seven and fourteen and concluded or or copy 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt145 extracted the largest one and this in fact these are gcd so this is an example of how this algorithm 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt163 having done this now we want to return the largest value of in the us list of common factors remember 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt166 fm and f l will constructed from one to m and one to n the largest value will also be the 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt170 largest common factor between these two let so earlier we i three abstract statements 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt180 this is a definition so def for definition of a function gcd m n 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt185 the empty list now we need to test every value in the range one to n 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt187 is the peculiar to python this returns not the range you expect but one less so if 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt19 the experience for this group of people you can describe this algorithm by different level 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt193 zero then be will append i to the list fm added to the right append is 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt196 we just said that for each i in from one to m add i to a from if i divides n and now we are done 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt198 in that range we have check if it is a divisor and then add it 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt200 factors of n for every j in this range if it divides we append it and now at this point 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt205 so says take a list and add a value which value we had the value that we are looking 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt212 python has a short that this is if you want to count the right then we count 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt213 the numbers minus one minus one so long so it says return the minus one 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt218 that there are other syntactic things your so there are for example you have a base initially 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt221 these are all features that make python programs are little easier to read and write then program 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt226 first important point is that we need a way to keep track of intermediate values so 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt231 all the factors in cf so these are all ways of keeping track of intermediate values this 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt233 example m and n are numbers similarly i j and f at each step are numbers these 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt238 and bottom because it could be very difficult to write a program if we have to keep produce 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt240 of n regardless of how we can x so these names can the node then we denote single values 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt254 the new factor of n we do not want to throw ignored factor we want to take the exist 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt256 the name fm to a new name which takes the old and and six and i at the end of 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt26 and in terms of that type ability we describe the algorithm itself 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt261 of y multiplied by two and assign it to a so we will see this as we go along 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt262 assignment can either assign a completely new value or to update the value use 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt265 the other part that we need to note is how we execute steps so as we said at the begin 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt268 instance we have to check for every possible factor from one to n if it divides m and the 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt272 is zero if the remainder of m divided by zero then i append so the step append i to f n 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt274 we have repeated steps the same thing done again and again and we have conditional 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt281 essentially this is a good way of illustrating program 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt37 of computation for instances if we use a spreadsheet to a range information and 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt4 we perform some tasks so have an consist of a sequence of steps which we can think of a 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt42 it try to invoke of like it from once t to another city it will offer to a range the fly 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt46 can get from way to be and b an up all the different ways we can get from a to be we want the optimum 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt56 and that is what we call a data structure 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt60 its so k is a divisor of m if i can divide m by k and get no remainder so the 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt64 when we can see that for is a factor of eight for is a divisor of eight for is also a divisor 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt65 of two where another divisor of to the six but six is not a divisor of eight so we go through the 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt70 the bigger than one that divides both eighteen and twenty five since one divides 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt77 how would one go about computing gcd of m and n so this is where we come to the algorithm it 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt78 algorithm it but we want to describe uniform way of systematically computing gcd of m and n for any 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt80 better once as we go along but if we just look at the definition of gcd it says 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt81 at all the factors of n look at all the factors of n and find the largest one which is a 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt87 what we want from an algorithm a two things one as that the description of what to do 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt89 instructions that r is of the values of m and n in such a way that concrete and comp we 
algorithms_and_programming：_simple_gcd_[9MmC_uGjBsM]_en_vtt_txt95 factors have a very large number for n we might have any factors so the process 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt0 we have seen several situations where we want store a sequence of value 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt100 out in a list it is expensive to get to the ith element it takes time to portion 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt110 at the ith position that the value at the jth position in constant time independent of i 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt113 two up to j position to get the two positions so i will have and in a list or would have 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt114 sequence of links and then i will have in our this sequence of things 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt115 then having now identify block where the ith value is in the block but j 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt12 the length of each element of the array is of a uniform size x and 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt126 to design for sequences apply depending on how the sequence is actually represented 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt127 an algorithm which works efficiently for a list may or may not work efficiently for an x 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt128 i and vice is us to 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt13 you could also typically in an array know in advance how the this block 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt132 or we can even call it a sequence more size the sequence which we call s e queue 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt133 so we have a sequence of values we want to check whether a given values there and 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt141 for does it matter does not matter how 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt145 we only need true or false it is if there of this is not it is a very simple thing 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt146 we do is we to through all the elements in the sequence and check whether any element 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt151 that if we have reach this point we have not found the value three that we are looking for 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt155 and check the value at position i rather than the value itself 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt164 may point of this function is that we have no solution to search other than to scan 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt168 this value might be 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt17 of memory starting with one two three up to i and and you want to get to the ith element quickly by 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt173 v is the last value then we have to look at all 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt174 more generally v is not in the list right 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt175 v is not in the list the only where we can determine that the is not in the list is to check every value 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt184 have not seen it so far we are not going to see play to 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt19 a sequence starts you can just compute i times this size of one unit and quickly come 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt193 have to look at any words before 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt194 so in general if we have a sequence that efficient way to search for this value is to first 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt206 like that and somebody are still to guess the name of a person there leaking out 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt209 this is no then you only need to think about n we of n 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt216 on this how would we do the 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt217 again we look at 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt219 to next part that we look at and so on 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt222 we will demarcate that segment using l and 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt23 is to the ith position 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt231 the other hand the slice is not empty then what we do is we first compute the midpoint so we can 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt239 so we find the midpoint 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt24 and this can be done in what we call constant time in that 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt244 and therefore it stops at bit minus 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt254 give us the slice which is empty because we find that the right point 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt255 the left pointer the same 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt262 so or the sequences length zero then the takes only one step because we just report that 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt263 it is false we can find it if there are no elements left otherwise 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt272 we want to an expression for t of n which satisfies this so this is what is called a recurrence normally !SIL 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt280 one by t of n by two cubed 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt286 y and then this expression becomes one so when n is equal to two to the k it 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt296 the the log of thousand to the base two that is the equivalent definition of all 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt303 that the midpoint 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt308 we search is that by only looking at a very small number of values space of example we can 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt312 of so after it ten halvings of thousand we would a come down to zero or one 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt320 us that i get when i use an array 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt323 or r the arrays 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt327 so they do support these flexible things which are typical of lists however python supports 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt334 two and just to emphasize how lists work when we go further in this course we will actually 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt335 we look at how to implement some data structures 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt337 in one element to the 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt35 fit with key it is not very efficient to expanded because we have two then shift everything 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt36 the worst case for example if this green blah comes in the zero a position then the entire 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt51 you can imagine that you know if you have some say a space in your covered and then you take a 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt63 we can also accommodate what we see in python where each element of the list make 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt64 of a different type and hence each value might have a different size in itself 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt74 s time proportional to i we cannot assume that we can reach any position in the list in constant 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt77 it is 
arrays_vs_lists,_binary_search_[0y5HOotxpys]_en_vtt_txt80 we say that the ith position points to the i plus one position which point to the rest the 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt0 many problems we have to search through a set of possible these in order to find this solution 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt107 x search through all the possibilities by going forwards in backwards one that the attack 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt109 our first question is how to represent the board because the board is what keeps changing 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt118 i comma j and therefore if it is zero in the case 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt120 know that there is only one queen for row so this particular thing though it has n minus ten it 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt121 when n squared entries it will only have actually n once at any given time so we can optimal 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt13 now if you have update chess you would know that the queen is a very special these 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt134 report just means setting board i equal to see if we have the one dimensional representation 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt137 from zero then we are done so we can return true however this is not the last queen then 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt139 is one more queen so we recursively call this function incrementally the row to i plus one 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt14 it can move any number of squares is a longer row column or diagonal so for instance 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt142 have other the succeeds or not we check if extend solution is true that is 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt143 current position reached c and r where bounded we true if it to succeeded 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt144 in going all the data level n minus one and n minus two returns true so when n minus one to 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt15 if we place a queen here in the third on the third column then at it move anywhere 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt161 you have to do a little bit more work to figure out how to actually printing this 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt169 a simple way would be to just sake that along with a two dimensional representation the 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt180 that say attack i j is k if i the was first attacked by queen k and attack i j is minor 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt189 queen i that we put you we mark the squares which are attacked by queen i 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt194 back so removing date it does not actually change anything regarding the attack this 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt197 place under attack only are adding this queen and that turns out to be 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt202 first attacked by queen k and when we remove queen k we reset to minus one saying that 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt206 array which had code i equal to b j so question is can we replace a attacked by 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt207 in the array now one thing to remember is that though attack itself is an n square 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt209 once we fix the queen two and two we only have to look along its row call a 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt221 this main diagonal so for the main diagonal is the one from the top left 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt224 since in which square to be under attack so we where we better to represent these code direction 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt233 minus the row is something that will be the same a long every square of that i 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt245 and along this green diagonal we have seven plus five six the string some five plus seven so sequence r is equal to two or not 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt248 this j minus i or is along the diagonal this difference is j plus as to some is j 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt253 similarly we can have a an array which says column nice f add and then call 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt254 my set to one provided column i is attacked for again i a between zero and n minus one now in 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt256 the north west to south east diagonal is the one where the difference is the same 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt258 and here the difference is seven minus zero is seven and here the difference is zero minus seven is fine 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt265 one to n minus one this is we can number if at so this is the difference is the difference this 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt267 and the possible range of values it is from minus seven plus m minus n minus one 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt269 put and then minus one is two times seven which is four 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt284 the values are zero to n minus one so minus one indicates that the ith queen is not placed that this moment 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt289 attacked by a single queen and must be attacked by the queen at i comma j so only the queen 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt297 key values indicating the five some dictionaries so the queen position we will call keep 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt298 queen so instead of saying board i is j we say board with queen as the key add position 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt303 which is a dictionary which contains everything of reverse 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt309 diff so here we have an actual python implementation of what we discussed so we have this a is 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt310 function here which is called place queen to place a queen we set takes the row i and the 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt316 or column values we check if i js tree in the current board if it is free then we 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt322 we means to queens we cannot place a queen and the as rows we return false now 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt325 so remember we take the input it will be a string we convert it using int and we are caught 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt327 mid and pass it as n then we will initialize the board at the number n we need n because 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt328 need to know how to set up that remember that the indices and from zero to n minus one or from n 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt329 n minus n minus one plus and so n this required in order to initialize the dictionary 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt349 initializes the board what how do we print the board for any row we sort 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt362 files so this is a if you have a python program we can run it directly without first 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt364 instance if we give it the number for then we that this solution that we saw in the 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt365 example k is not very to print it out the neatly so if we get the 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt369 shows we the for queen solution one more readable found 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt371 means m is bigger is an extra call it is an saying that but is next all 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt378 previous level also returns true and eventually we print out the board so supposing we do not 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt385 so every possible solution the only thing is that it will not run through a 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt387 queen positions and then try and it out we are trying it out for smaller a things because 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt393 us a we extend solution and then we undo the queen and try the next one 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt396 every possible j an inorder there the amount containing 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt4 solution that we are trying to get does not work so we take at i get and then we undo 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt408 part a special a backtracking with respect to the eight queens got 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt42 and there is no free slot for the third queen so just i exhausted on as is we can show 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt46 we can find an empty slot of the second node right at the end so we put a queen there 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt50 everything is one of the column in is none the queens attack each other 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt52 is always a solution possible now up our last is to find such a solution how to we find 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt59 that there exactly one queen in each row so let us first put a queen in the first row 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt6 so so we have a print and then you start filling up things and then i some caught 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt69 its now we move to the third row and that is call 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt76 speed and then we place a queen and then or six one and then or seven one and now we find 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt81 something we did for now the last thing we did was to put the seven is queen right so we 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt9 the problem and at some point when we realize that we are start we cannot solve the problem 
backtracking,_n_queens_[kdBzkxdJ7bI]_en_vtt_txt97 and so on 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt10 suppose we want to write a function find pops which finds the first position of the value 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt101 go this let reached how to we know at this point so remember now there are 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt107 so the question is can we detect whether or not to broke out of this loop order the 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt108 we terminated separately 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt110 in that looks a bit odd because of the name it allow something called else which which 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt114 the new words you need to use so if you see an else attach to a for it could also be a 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt122 is a not found it pos is undefined so it was undefined we need to define it before 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt132 this can be done by up supplying the optional x so both for and while also the of l 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt23 we mark the position that we have found it to be pops at the end of this if we have not found 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt25 we in the list then we will set pos to minus one which is the default value we indicate 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt32 to scan the remaining hundreds of thousands of positions before we return the position 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt34 so this is an issue of deficiencies that we are done in this to to many times and 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt38 the position to be the new thing right so we are actually finding not the first 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt39 position to the last position so this is not a very good way to do this and so we first 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt42 condition it says that if l i is b and we have not found it so far then we update 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt46 the as before if we never find it then the value found is never set to true and so we report 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt52 succeeding then we will report minus one 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt53 so we could thing covering this using a for loop n so we go through every value and 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt58 we have not seen x so far like before we want to report minus one 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt64 the position so this is only the first version of this we will see how to fix this so we have 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt68 in one so this is precisely what we want to do if x is be we have found the first position 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt70 we go back and now how do we record at the end we do not have this founded filling 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt71 im on how do we know in the n to whether or not we actually sort so the question is was call 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt82 there so in any case we can return pos in we have node 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt83 this is just to illustrate the use of the word break it which allows us in certain situation 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt84 to get a remember in the worst case we do not find x so the worst case 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt89 it is better to scan the positions so is better to say pos is minus one but 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt90 to going through x in l means better to go through i in the range zero remember now this 
breaking_out_of_a_loop_[ucjfYt6Q9Bo]_en_vtt_txt95 did so while the changing the they will that we put in the for we were slightly more matches 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt0 the last lecture we saw that in object oriented programming we define a data type 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt12 are dealing with this heap h when we say h dot insert then this insert is using the value 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt125 us better the same function is that there is self there is what is turns 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt130 eight and y equal to r sign theta then into x plus delta x y plus delta y and convert 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt131 it back to r theta so you pay or tries in one function of the other that x 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt138 like saying that a heap implementation is always better than a sorted list implementation 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt144 quite implementation namely we have to move from x y to r theta but the functionality 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt153 are which three comma four but if we do not pass the argument set p two then we get a point 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt154 and the origin 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt155 a function in end clearly looks like a special function because of these underscore underscore 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt157 using right python function as we said before python a interprets in it is the constructor so 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt158 when we call a object liked equal to point five for then this implicitly call so init and when it is use whose 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt168 for instance print it to the function print implicitly takes any name you passed to print 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt173 self dot y we want to print this out in this found the value x in the value i 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt178 put it so the string representation of self dot y so this creates a string now the value 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt18 the other heaps it we will see it later that we can take one value refer to another value 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt189 to define what i mean so let us assume that we want to construct a new point whose x coordinate 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt191 here is a way we would do it we would create a new point whose it x coordinate is self dot x 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt20 is implicitly called self because that is the one that is to be the manipulate to by function so the main the left 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt205 we just i p one less than p two for a deleting have in our program and internally to 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt25 point is given some code it like a common so this is a point use export it is a while count 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt26 in this is the familiar concept that all a few steps even mathematics 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt29 a and b that you want to point you have and now we have within the for a point we have 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt3 as objects 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt31 and y value and this x value is something and the y values and n if we change the 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt38 this particular object now this particular object changes as we move to one out 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt41 to be to self is b and this is an important thing so just remember that every function inside 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt45 three will be passed as a an two will be passed says v and this will set up a point that we have brown to 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt54 the value that i x so you want self dot x plus delta x now this is a very common 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt59 to delta x is just a short cut in python for self dot x equal to self dot x plus n times 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt60 is it means that implicitly the name on the left is the first argument to the operation 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt66 so for instance now if we say p dot translate to one then we get a new point which is the plus two file 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt74 so let us look at a different function so supposing we want to compute the distance from of o 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt82 is to this to get insist in this way we will assign this to a name a let us call it 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt9 us call itself so let us just assuming that this parameter is to 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt92 now if o distance is something that we need to to often them a range useful to just 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt96 this distance and you can keep this and so if i have r and theta is the same information 
classes_and_objects_in_python_[KhvV7EEEq4I]_en_vtt_txt98 r cos theta that cos is a can omitted cosine function y is equal passing theta it and 
control_flow_[oe6iF3yzMo8]_en_vtt_txt105 different types of expressions which have different values like the types we have c 
control_flow_[oe6iF3yzMo8]_en_vtt_txt109 similarly any empty sequence such as the empty string the empty list is also data 
control_flow_[oe6iF3yzMo8]_en_vtt_txt116 so remember if it is not equal to zero then it is to right so when it is not equal to zero does true so 
control_flow_[oe6iF3yzMo8]_en_vtt_txt117 if this condition holds the same as asking whether m percent n is a nonzero value and 
control_flow_[oe6iF3yzMo8]_en_vtt_txt118 if it is nonzero value we want to replace m and n so we can just write if m percent 
control_flow_[oe6iF3yzMo8]_en_vtt_txt128 on whether it is one two three or four you want to do four different things which we will which will be caught 
control_flow_[oe6iF3yzMo8]_en_vtt_txt129 left one it to where three and four 
control_flow_[oe6iF3yzMo8]_en_vtt_txt132 us check if x is equal to one then we invoke f one 
control_flow_[oe6iF3yzMo8]_en_vtt_txt133 x is not one then it is one of the others so all of this goes into an else in everything 
control_flow_[oe6iF3yzMo8]_en_vtt_txt135 we check in this case of x is equal to two then we do a to otherwise we have three of four 
control_flow_[oe6iF3yzMo8]_en_vtt_txt143 up one then we check two or not to which a three or not three then we have is ugly nesting and secondly we have the 
control_flow_[oe6iF3yzMo8]_en_vtt_txt145 us shortcut for list which is to combine the else and the if into a second 
control_flow_[oe6iF3yzMo8]_en_vtt_txt146 a l the 
control_flow_[oe6iF3yzMo8]_en_vtt_txt147 so this is on the right is exactly the same as the left as far as five in this concerned 
control_flow_[oe6iF3yzMo8]_en_vtt_txt149 otherwise it will invoke the rest of the rest 
control_flow_[oe6iF3yzMo8]_en_vtt_txt17 to what does happen so far according to the current values that we see 
control_flow_[oe6iF3yzMo8]_en_vtt_txt175 to the outcome of this in 
control_flow_[oe6iF3yzMo8]_en_vtt_txt18 let us look at earlier like example 
control_flow_[oe6iF3yzMo8]_en_vtt_txt180 so the range zero one we said starts at zero and rid generates a sequence of the form zero one two 
control_flow_[oe6iF3yzMo8]_en_vtt_txt184 so range also does and go from zero to n but zero to n minus one so 
control_flow_[oe6iF3yzMo8]_en_vtt_txt188 so in general range i j like a slice i to j starts at i and goes up to j minus one 
control_flow_[oe6iF3yzMo8]_en_vtt_txt195 us look at a simple example of this 
control_flow_[oe6iF3yzMo8]_en_vtt_txt196 suppose we want to find all the factors of a number and all numbers that you write empty without 
control_flow_[oe6iF3yzMo8]_en_vtt_txt208 is to be n plus one because the range function stops to one below the number which is the right hand 
control_flow_[oe6iF3yzMo8]_en_vtt_txt229 in a while we come back we check the condition again but there is every possibility that 
control_flow_[oe6iF3yzMo8]_en_vtt_txt23 umbrella ever then you visit list the chars of the right 
control_flow_[oe6iF3yzMo8]_en_vtt_txt231 so we have to ensure when we write of a while loop that somehow this sequence of statements takes 
control_flow_[oe6iF3yzMo8]_en_vtt_txt237 so so long as this is not the case we exchange values for m and n 
control_flow_[oe6iF3yzMo8]_en_vtt_txt246 might be useful to just say explicitly not equal to zero just to illustrate yourself 
control_flow_[oe6iF3yzMo8]_en_vtt_txt249 so we can alter the control flow in three ways we have seen one 
control_flow_[oe6iF3yzMo8]_en_vtt_txt255 you put a condition and then the body is executed each ten the condition is checked again 
control_flow_[oe6iF3yzMo8]_en_vtt_txt28 if it is not likely to rain ensure the umbrella is not in the back if it is not there is 
control_flow_[oe6iF3yzMo8]_en_vtt_txt31 is referred to in programming languages us control flow 
control_flow_[oe6iF3yzMo8]_en_vtt_txt32 so there are three fundamental things all of which we have seen informally in the g c d case 
control_flow_[oe6iF3yzMo8]_en_vtt_txt36 we want to carry ten boxes from this to two that to so for n times to carry one box a 
control_flow_[oe6iF3yzMo8]_en_vtt_txt45 whether we have to stir it twice of five times we will stir until the sugar dissolves 
control_flow_[oe6iF3yzMo8]_en_vtt_txt47 l execution in python is written as we saw using the if statement 
control_flow_[oe6iF3yzMo8]_en_vtt_txt5 followed by bunch of statements in general 
control_flow_[oe6iF3yzMo8]_en_vtt_txt50 and we have the score and which indicates the end of the condition an 
control_flow_[oe6iF3yzMo8]_en_vtt_txt53 we make this simultaneous assignment of m taking the old value of n and m taking 
control_flow_[oe6iF3yzMo8]_en_vtt_txt63 so the indentation tells python that these two statements are conditionally executed depend 
control_flow_[oe6iF3yzMo8]_en_vtt_txt70 something like a brace to indicate the beginning and the end of the block which is covered 
control_flow_[oe6iF3yzMo8]_en_vtt_txt77 braces to is braces and so on 
control_flow_[oe6iF3yzMo8]_en_vtt_txt8 we will look at function definitions in more detail very so on and 
control_flow_[oe6iF3yzMo8]_en_vtt_txt86 so one tab is not going to be equal to three spaces of for spaces are whatever you see an 
control_flow_[oe6iF3yzMo8]_en_vtt_txt90 the sum uniform strategy for example to spaces to indent whenever you have such or nested 
control_flow_[oe6iF3yzMo8]_en_vtt_txt94 if it is likely to rain ensure the umbrellas in the back else ensure the umbrellas 
control_flow_[oe6iF3yzMo8]_en_vtt_txt97 n is the remainder is zero then we have found the gcd namely the smaller values so the 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt0 for a final lecture of this first beat we will see in how to actually use python on 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt101 and using if i invoke it it will but you some messages then me what type of function 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt110 and now i can also define functions remember how we defined a function we use 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt119 is because this computer gets you can finish the error message from i let us you 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt120 is to spaces let us is for the sake of up illustration 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt129 is to complicated to type an without in and say and secondly you might want 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt131 get so for this what we need to do is first type of function into a five and then 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt135 come one from so if i have actually we already created something so let us start 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt136 with so i use init of or the match you can use any text editor if you are using windows we then you 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt145 the point to remember is that i have make sure that all these indentations 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt146 have this saying number of spaces in it so this is something to remember now you type answer 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt165 as so long as the remainder is not zero we keep updating m and n to n and the remainder define with 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt169 larger value that we saw for each i can works say seven nine things n and now use 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt18 it more consistent and more easy reuse but as often happen is a lot of people 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt185 return is somehow or not executable and explain y so do play around with it and 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt189 you may find as we go along with the something that we do not understand a something 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt216 one so of not one language even though the features and the syntax the from line 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt24 so this has forced python to point seven to live on eventually we go left somebody will take 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt25 f or to move python to point seven like reach to python three and of course me for code is larger 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt26 thing we never python three but you should remember that and somebody says that 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt27 using python we could be talking about to quite seven and not three and you have to make i just ints 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt3 you working a minute is or emac on windows will be able to find a version of python 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt30 we will see which are slightly different into point seven and we will explore them and three and i will 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt45 is python three fifty three fifty referring to three point five point zero 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt46 so actually the current version of this it is not the point by point zero but three point five point to so you will 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt48 and sort these are designed to be fairly self exponent grey install files if you have 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt52 to the actual programming part 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt54 is the distinction between interpreters and compilers so the main difficulties 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt56 and right instructions so these are some what high level instructions the other hand compute 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt60 a ranging chairs so we set our end the chairs as the high level thing and we set would eighty chairs 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt61 in ten in a two rows n each right so we said that there could be well difference in 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt65 we are going to explore in this course and which all programmers normally work 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt68 either the programming language and translates programs and that language to a machine level 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt75 in your language in this case python and the interpreter internally figures out 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt80 so we use python typically the following way we first run the interpreter so remember 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt84 you can treated commands and see what is so it is very interactive 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt9 whether using three point five of the point for but there are difference is will be to point seven and three and for 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt92 right so this will in this with the interpreter 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt94 the so these things will become a little clearer and in that an order n plus one show you 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt96 get into the real details about exactly what goes into a python program 
downloading_and_installing_python_[Muzbm6FFS90]_en_vtt_txt97 here is any terminal which on windows to be like a command 
efficiency_[a87JSpv4r44]_en_vtt_txt102 is ten thousand is how 
efficiency_[a87JSpv4r44]_en_vtt_txt106 so when we have ten to the seven the log is going to be something like twenty some things 
efficiency_[a87JSpv4r44]_en_vtt_txt111 six some 
efficiency_[a87JSpv4r44]_en_vtt_txt118 onto one did of three and in many get it exponential is like two to the n and n factorial then unless you have 
efficiency_[a87JSpv4r44]_en_vtt_txt119 an input that is really small like ten or something like that we are going to get problems 
efficiency_[a87JSpv4r44]_en_vtt_txt121 this is an idea that given that how or system that we are working which 
efficiency_[a87JSpv4r44]_en_vtt_txt123 what kind of inputs will be realistic to process given the type of algorithm that we are exits 
efficiency_[a87JSpv4r44]_en_vtt_txt124 
efficiency_[a87JSpv4r44]_en_vtt_txt128 so this table is more or less valid up to us scaling of a few tens is again in in different language 
efficiency_[a87JSpv4r44]_en_vtt_txt13 say that the worst case would occur typically when the value that we are trying to find 
efficiency_[a87JSpv4r44]_en_vtt_txt130 if you look that algorithms book score complexity theoretic puts any polynomial in 
efficiency_[a87JSpv4r44]_en_vtt_txt138 as a very similar limited we can only to about four to five thousand 
efficiency_[a87JSpv4r44]_en_vtt_txt139 fix so so if you are doing something an n squared time we cannot process something larger than 
efficiency_[a87JSpv4r44]_en_vtt_txt2 of algorithms 
efficiency_[a87JSpv4r44]_en_vtt_txt23 now unfortunately in order to determine something like an average case in a mathematically this i 
efficiency_[a87JSpv4r44]_en_vtt_txt24 is we is not very easy we have to have a probability distribution overall inputs and then fresh 
efficiency_[a87JSpv4r44]_en_vtt_txt28 in between input size and output size so we express this up to proportionality 
efficiency_[a87JSpv4r44]_en_vtt_txt29 we are not get a interested in exact constants we want to know for instance is t of n code 
efficiency_[a87JSpv4r44]_en_vtt_txt38 so then are going to going to much detail in this course about how to go is defined 
efficiency_[a87JSpv4r44]_en_vtt_txt39 and calculated but it is use to useful short hand to describe the been a efficiency of algorithms 
efficiency_[a87JSpv4r44]_en_vtt_txt4 talk about efficiency as the function of the input sets so 
efficiency_[a87JSpv4r44]_en_vtt_txt48 to be it reasonable inputs that we can expect to compute within a few seconds 
efficiency_[a87JSpv4r44]_en_vtt_txt50 we realize that something in the wrong 
efficiency_[a87JSpv4r44]_en_vtt_txt52 it to be in f wish 
efficiency_[a87JSpv4r44]_en_vtt_txt53 it so if we look at this we have to now figure out how faster computer start 
efficiency_[a87JSpv4r44]_en_vtt_txt57 are we have a bunch of program which we will take written and here is a play 
efficiency_[a87JSpv4r44]_en_vtt_txt58 if i say in gets keep for dot five file 
efficiency_[a87JSpv4r44]_en_vtt_txt6 known an input of size n 
efficiency_[a87JSpv4r44]_en_vtt_txt60 four so for n in range zero to int of ten thousand minus one we just assigns n to be the value and finally the 
efficiency_[a87JSpv4r44]_en_vtt_txt61 is the statement we have been seen so far but which should be quite intuitive which 
efficiency_[a87JSpv4r44]_en_vtt_txt65 is or a bunch of scripts we have written for python from speed for to speed nine 
efficiency_[a87JSpv4r44]_en_vtt_txt67 first of all i can take python then i can directly use a name of the python program 
efficiency_[a87JSpv4r44]_en_vtt_txt69 so i can say python three point five and give the name of this and it will executed 
efficiency_[a87JSpv4r44]_en_vtt_txt76 if i do this now that by hand five times c then it goes from point zero three 
efficiency_[a87JSpv4r44]_en_vtt_txt77 it five so is roughly a factor of n as you would imagine it says reason 
efficiency_[a87JSpv4r44]_en_vtt_txt79 gone up of a point to second so the 
efficiency_[a87JSpv4r44]_en_vtt_txt85 to the seven takes about the second or more 
efficiency_[a87JSpv4r44]_en_vtt_txt91 a long time in a sitting and can to the screen waiting for that sorts 
efficiency_[a87JSpv4r44]_en_vtt_txt96 so it turns out that this something takes log n of time then even for ten to the ten it takes only thirteen threes 
efficiency_[a87JSpv4r44]_en_vtt_txt97 steps and we have find 
efficiency_[a87JSpv4r44]_en_vtt_txt98 of course it line the input is linear then we read or in the constant that the input of size 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt104 decreasing what happens when it actually reaches one 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt106 the remainder will be one will be zero right so we will return gcd of zero in other words we have guarantee 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt111 started so this is easy this is euclids are in the first version 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt112 where we observe that the gcd of m and n can be replaced by the gcd of n and m minus n an 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt118 i will inside compute gcd some other value and use that answer to return answer 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt12 we can n so we instead of starting from one and working upwards to the minimum of m 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt126 and then sees i had so is as though this statement was not part of the python 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt13 and n it is better to start with minimum of m and n and work backwards to one and 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt131 and put it on a separate line or it input it at the end of the line 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt134 so at this point if we have found n and says that n divides m we are done 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt137 a time actually produces a remainder so this not equal to simple is written with is exclamation 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt139 remember that this is double equal to was what we use for the mathematical simpler equality so 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt14 soon as we find a common factor we report it and exit remember 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt15 always that one is guaranteed to be a common factor so when we start from minimum 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt150 worst case n will become one and one will divide everything 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt154 go to earlier so if it helps we can look at the sign by send try to understand what 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt155 recursive thing is doing and what for while is when an see that we are basically 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt156 into in the same thing and the idea that the recursion must terminate 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt159 while exits so just like the recursion can do on forever if you do not 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt16 of m and n and go backwards if we do not see any other common factor we are still 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt160 are not careful and you do not invoke it with arguments which guarantee termination the while can also 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt163 we can actually do it will better than this so let us see one problem with this by giving an 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt164 execution so supposing we start with some number like gcd of one hundred and one and two then are of 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt165 algorithm will say that this will now become gcd of the difference and n the difference is nineteen 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt167 we keep doing this about fifty steps and then eventually we will come down to we see your five and two 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt17 the guaranteed that we will exit correctly when we get one so what we notice that was that 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt174 m and for the minimum is to right if we will just computing factors will say there is only factor of two 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt175 is two and is not a factor of hundred and one we will stop writing so this actually 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt176 is use will really worst another we have inserted cases and so on 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt18 though these different versions are simpler than the earlier versions the all have the same 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt180 will mid it so this is goes n goes into m q times n these a remainder r and we are guaranteed that are 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt181 are smaller than n otherwise are it could go one more diagonal become plus one right so we have 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt182 the remainder are which is smaller than for example if i say seven and i want to divide 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt186 a common divisor for both m and n in other words like before we can write n itself a 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt188 so is i so if we part this into the question above here right then we see that n which is 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt197 as well 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt205 the same as before otherwise that are be the remainder in a value 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt207 this point one important thing to remember is that r is definitely less than n so we do not 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt220 two numbers and we replace m by the remainder and we proceed now we are guaranteed a 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt225 so if we go back to example that we were looking at so if we saw that gcd hundred and one two 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt234 number of steps so say million steps but this or one because of the claim that it takes time to put 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt238 what programming data structures and algorithm so the programming 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt240 need to make sure that this correct and easy to read and maintain so that is the program 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt248 these idea as but the ideas and says this come from algorithms and data 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt3 list from these two list extract the list of common factors and report the largest one 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt35 turn out that these also the largest divisor which is common to m n and m minus n 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt39 here is the first version of euclids algorithm consider the value gcd of 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt4 in this common factors are first if we finish an was towards or that we can actually do a single 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt42 of computing the gcd of m and n that we started with we compute the gcd of n and m minus n 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt44 here is a python implementation of this idea so there are a couple of new features that 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt45 introduced here so let us look at them the first is this special statement 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt47 so comment is the statement that you put into a program to explain what is going on to 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt48 our first and read the program but it is a not by the computer executing the program so 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt59 of n goes to the value of n now it is important that it is simultaneous 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt70 worry about having this extra are m to replaced to part one value 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt72 is satisfy so now we come to the cut so the algorithm if n divides m 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt82 the c will the maximum value of n and the difference as the first argument and the minimum 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt83 value of m and n and make sure that the bigger of the two value 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt87 this problem by solving the smaller problem and using that answer in this case directly 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt89 but the gcd of m and n insist either we solve the gcd of n and m minus n whatever answer that you 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt9 of the largest common factor we have seen so far in a single name and report it at the 
euclid's_algorithm_for_gcd_[TURlDFwVeEs]_en_vtt_txt95 to stopping point so formally what we have to ensure of is that this guaranteed of find 
examples_[J_Cw3G5v460]_en_vtt_txt1 have seen so far 
examples_[J_Cw3G5v460]_en_vtt_txt111 repeating over this makes to more readable code and in general more interval code makes 
examples_[J_Cw3G5v460]_en_vtt_txt112 that a program so what you need to do to write a good programmer first 
examples_[J_Cw3G5v460]_en_vtt_txt119 the for you to validate as be correct and for somebody as to understand and if necessary up to 
examples_[J_Cw3G5v460]_en_vtt_txt130 has a style uses i to make for the most effective and readable code you can find 
examples_[J_Cw3G5v460]_en_vtt_txt131 if you have a for use it do not forces set to use a while and so on 
examples_[J_Cw3G5v460]_en_vtt_txt3 that all the factors lie between one and n so this is something we can naturally compute 
examples_[J_Cw3G5v460]_en_vtt_txt31 the way we have written is prime it will correctly report that one is not a prime but these are 
examples_[J_Cw3G5v460]_en_vtt_txt43 not seen here so we have three levels of functions stop primes up to which call is prime which 
examples_[J_Cw3G5v460]_en_vtt_txt55 nth prime will come an if n is small we might be able to figure out just by looking at 
examples_[J_Cw3G5v460]_en_vtt_txt61 to check if we have primes and we need a list of all the primes we have c 
examples_[J_Cw3G5v460]_en_vtt_txt65 of primes is empty so this says take these three values thing three c names an us i 
examples_[J_Cw3G5v460]_en_vtt_txt67 one and b list is the empty list so this is the same if at this particular assignment 
examples_[J_Cw3G5v460]_en_vtt_txt7 simple function which just takes a list of factors factor list of factor 
examples_[J_Cw3G5v460]_en_vtt_txt71 the value of count and we have found a prime so we must added to the list of primes 
examples_[J_Cw3G5v460]_en_vtt_txt73 !SIL number until we hit a count of n so we outside the k for this is an condition 
examples_[J_Cw3G5v460]_en_vtt_txt76 each time we increment count we are making progress towards this while terminating so remember 
examples_[J_Cw3G5v460]_en_vtt_txt8 of the input n 
examples_[J_Cw3G5v460]_en_vtt_txt80 and of course we are using fact the implicit fact we know that are an infinite our 
examples_[J_Cw3G5v460]_en_vtt_txt86 from one to m so it is easy to use a for in n primes we do not know how many primes 
examples_[J_Cw3G5v460]_en_vtt_txt90 a while so let us look at the to typical ways in which we write for so the first 
examples_[J_Cw3G5v460]_en_vtt_txt93 the statement or limited most it here so this of block of things 
examples_[J_Cw3G5v460]_en_vtt_txt96 is n does not cross j you execute this statement exact same statement and you increment 
examples_[J_Cw3G5v460]_en_vtt_txt97 if it comes back here and we check now 
examples_[J_Cw3G5v460]_en_vtt_txt99 j and it links so we have to have range in the for we can just set up a counter and angle 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt103 so it could have a as many except blocks as you have types of error switch you anticipate 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt104 it errors for it is not a bigger tree to handle every kind of error only those which 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt113 there is an index error 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt120 will be no code executed for a zero division error it is not that i tries each one of 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt124 insert will come here nine this is not the type of error 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt138 which are not handle and finally we have an else which will execute if the try terminates 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt140 now out while we normally used exception handling to deal with error switch we do not anticipate 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt143 we saw got recently that we can use dictionaries in python 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt145 with each key which is a name we have a list of scores 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt148 now out suppose we want to add is score to the is 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt153 this is a new batsmen there is no key for b in which case we have to create a key 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt154 i setting scores of b equal to the list containing x right so we have to alternative modes of operation 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt157 so we want to append its 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt158 so we want to distinguish these two cases 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt161 so we say make enough d is in the score dot keys if we have b as an existing key then we append 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt168 the key error 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt172 but it is just emphasizing that once we have exception handling under a control we 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt173 may be able to do things differently from what we are use two and sometimes these may 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt18 would like to do is provide apply hand on how to deal with this exceptional situation an 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt180 so this is call results and executing this scope and this definition might have that another 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt186 in each we did not put in a try block and so or the error is not handled 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt189 back to whatever called it 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt196 then this error because g to abort 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt197 so what will happen next is that if g does not handle it then this will go back to 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt20 so exception handling asks when something goes wrong how do we provide corrective action 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt207 of calls high error quickly we can catch it at any point 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt209 have from the point it is calling his 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt220 the program and n says much more prone to errors and therefore useful to be able to 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt30 are all this what we require is a way of capturing these errors within the program as it is running 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt37 not have notice the subtle t of these for example when we run python and we type something 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt4 from a string to an integer but this string s is not a valid representation of an integer 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt45 so what we are really it is written is errors that happen invalid programs 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt52 that the name is not defined and we also type the code at the beginning of the line say 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt61 gives us an index error or a name error and it says clearly that the name x is not defined 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt63 and along with a message division by zero and finally if we have a list say one two and then 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt64 we ask for the position three then it will say that there is no position three the 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt65 flist for this in 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt70 let us first quickly set lot some terminology 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt73 and as we saw it comes in two parts there is that type of the error what kind of the 
exception_handling_[RcTb2kpqTsg]_en_vtt_txt9 will be trying to write to a file but the disk is actually for 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt10 do is strings last in the previous lecture we looked at other things you can do with strings 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt11 !SIL fine entry place an all these things so this is like that is in the same class 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt14 the string here is actually going to call a format methods so these this way to do 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt16 is to for a things in braces the funny things and braces are to be caught 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt17 talk as the equivalent of arguments in a function these are things to be replaced by actually 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt19 the third then the zero o refers to the first argument and one refers to second and it so what 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt21 pass it to python the resulting thing is first colon forty seven second colon eleven because the first 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt28 we can do the same thing by name so instead of is exactly like that when a function where 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt3 however it takes an optional argument end equal to string which changes what we put 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt35 is forty seven and st as in l so here we using the name and not the position so the order in which list 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt38 a string and we have two will tell us how to replace values for place holders the string 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt39 is no real formatting just are because whatever we did with that to what 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt53 and then a four it so this whole thing this part if it comes from the format so have a black 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt54 space a blank spaces four because i do is to old to put for in in a new it of three and think a 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt6 from a space whatever we want and in particular if we do not want any spaces we can put the 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt61 and five to three so be treated or floating point value k second thing is that it says 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt63 value including the testing point everything is going to be six characters white finally 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt64 it that for says how many does issue show after the does not point so if i apply all this 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt8 now sometimes you want to be a little bit more precise so for this we can use the format 
formatting_printed_output_[LdEEkFL1Kvg]_en_vtt_txt83 can be 
function_definitions_[2aidDiaEst0]_en_vtt_txt100 to supposing we have define the function square of writes which is returns x times and now 
function_definitions_[2aidDiaEst0]_en_vtt_txt104 x and use been assigned so this is exactly as we said like before the x then 
function_definitions_[2aidDiaEst0]_en_vtt_txt107 ways to another to execute the function inside the another function without new 
function_definitions_[2aidDiaEst0]_en_vtt_txt116 a b will come before a b because the second position d is smaller than so this will 
function_definitions_[2aidDiaEst0]_en_vtt_txt119 plus plus one because the if b has length three is known the three so we could write a saw 
function_definitions_[2aidDiaEst0]_en_vtt_txt125 if you get an if you want to them combine it to the of the 
function_definitions_[2aidDiaEst0]_en_vtt_txt129 so to summarize function definitions behave just like other assignment so values to 
function_definitions_[2aidDiaEst0]_en_vtt_txt131 you can use one function and make it point mean point to another function 
function_definitions_[2aidDiaEst0]_en_vtt_txt132 and this is implicitly use when we pass functions to other functions and situations like saw 
function_definitions_[2aidDiaEst0]_en_vtt_txt18 which will take a string and try to represented as integer if s is a valid implementation 
function_definitions_[2aidDiaEst0]_en_vtt_txt2 and this is effectively this thing as adding implicit assignment so when we say power 
function_definitions_[2aidDiaEst0]_en_vtt_txt21 not a valid number a five would actually generate in a 
function_definitions_[2aidDiaEst0]_en_vtt_txt27 that is not provided and substitute to the default value n 
function_definitions_[2aidDiaEst0]_en_vtt_txt28 now if we to provided a value then for instance we can even make sense of a file 
function_definitions_[2aidDiaEst0]_en_vtt_txt31 naive a use infinitely written using a b c so a corresponds to what we would think of the 
function_definitions_[2aidDiaEst0]_en_vtt_txt33 sixteen position is in the ones so we have sixteen times ten the base ten 
function_definitions_[2aidDiaEst0]_en_vtt_txt34 plus five so you make terms this will return one sixty five there 
function_definitions_[2aidDiaEst0]_en_vtt_txt37 you want to option and default argument you provide the value when the function definition 
function_definitions_[2aidDiaEst0]_en_vtt_txt40 take the value n otherwise if you take the value provided by the function so the default 
function_definitions_[2aidDiaEst0]_en_vtt_txt42 than the default values used inside but one thing to remember is that this default 
function_definitions_[2aidDiaEst0]_en_vtt_txt5 this assignment there and of course that but if you calling it in the function is that 
function_definitions_[2aidDiaEst0]_en_vtt_txt58 so here is a simple types suppose we have the function with for arguments the b c t and 
function_definitions_[2aidDiaEst0]_en_vtt_txt69 us i will have to t define the function to the order and 
function_definitions_[2aidDiaEst0]_en_vtt_txt75 then interprets is like in the other assignment of a value to a to for instance this value 
function_definitions_[2aidDiaEst0]_en_vtt_txt86 is a neighbor declare you can go and redefine f as two four another 
function_definitions_[2aidDiaEst0]_en_vtt_txt89 which as we said associates with the name f the body of this function at any this 
function_definitions_[2aidDiaEst0]_en_vtt_txt93 one dictionary in to another some now y would you want to do is one useful 
function_definitions_[2aidDiaEst0]_en_vtt_txt94 way in which you into this uses facility is to pass a function to another function 
function_definitions_[2aidDiaEst0]_en_vtt_txt95 so suppose we want to apply a given function f to its argument n x then we can write 
function_definitions_[2aidDiaEst0]_en_vtt_txt97 to the second is the argument and the third is the number of times but it should 
functions_[HGGdN94SvC8]_en_vtt_txt10 give it more meaningful names and then it says that this function takes three values as inputs 
functions_[HGGdN94SvC8]_en_vtt_txt111 have a thing useful to do so we have a function if we call stupid which takes 
functions_[HGGdN94SvC8]_en_vtt_txt113 does is it just or no good reason sets the name n to have the value seventy now suppose we had in our 
functions_[HGGdN94SvC8]_en_vtt_txt114 program outside or a statement which assign the value seventy to the name n and then we go all the 
functions_[HGGdN94SvC8]_en_vtt_txt115 function now obviously if we say stupid of a ten the you will be also the input so it will be with even become twenty 
functions_[HGGdN94SvC8]_en_vtt_txt120 up to different copies of n so any name which is used inside a function is to we think 
functions_[HGGdN94SvC8]_en_vtt_txt123 we do because is just confusing if we use the same name inside and outside but sometime 
functions_[HGGdN94SvC8]_en_vtt_txt125 i j k to run through lists now like ranges up in fact that and it will be a new some 
functions_[HGGdN94SvC8]_en_vtt_txt127 or the since is not track anyway we can freely use i j wherever we want 
functions_[HGGdN94SvC8]_en_vtt_txt130 is invoked now this is a slightly separate point so less just look at little more so 
functions_[HGGdN94SvC8]_en_vtt_txt132 so when the python program is write it reads the definition of f but does not execute it and no to 
functions_[HGGdN94SvC8]_en_vtt_txt14 a function we might have a statement like this called return so 
functions_[HGGdN94SvC8]_en_vtt_txt149 right so it is so if i put this statement execute f before i define g and f requires in then 
functions_[HGGdN94SvC8]_en_vtt_txt150 this statement will create an error whereas the statement in one 
functions_[HGGdN94SvC8]_en_vtt_txt159 function of the scan these are called recursive functions is which are the in themselves 
functions_[HGGdN94SvC8]_en_vtt_txt161 one into n minus two into n down to one so we take n and multiplied by all the number 
functions_[HGGdN94SvC8]_en_vtt_txt165 the of a smaller factorial it is n times n minus one factor so that is what this function that 
functions_[HGGdN94SvC8]_en_vtt_txt175 a zero and the point is a factor of zero will now terminate and it will give me one to 
functions_[HGGdN94SvC8]_en_vtt_txt184 a function your code it to smaller functions is much easier to understand to read and to maintain 
functions_[HGGdN94SvC8]_en_vtt_txt187 that immutable any change within a function does not affect the argument outside also 
functions_[HGGdN94SvC8]_en_vtt_txt189 a function does not in any way effect the name outside so functions have no low 
functions_[HGGdN94SvC8]_en_vtt_txt192 functions must be defined before where we use and this is a put reason to 
functions_[HGGdN94SvC8]_en_vtt_txt193 call a function definitions to the beginning of your program so that the python interpreter 
functions_[HGGdN94SvC8]_en_vtt_txt22 this which takes is x and reason to the power n let us just look at the function just 
functions_[HGGdN94SvC8]_en_vtt_txt23 to understand what the code is doing so we assume that the value of the answer is one and now 
functions_[HGGdN94SvC8]_en_vtt_txt24 for as many i as there are in the range zero to n minus one multiply x into on serves so 
functions_[HGGdN94SvC8]_en_vtt_txt28 form state our three five so obviously what this means is that we should be used for x and find 
functions_[HGGdN94SvC8]_en_vtt_txt29 in use of n and we would and run this code when the values x equal to three and n equal 
functions_[HGGdN94SvC8]_en_vtt_txt3 a function is a group of statements which perform segment ask so of course we could 
functions_[HGGdN94SvC8]_en_vtt_txt31 this code it is as though we have this code inter insert it into a program at this point preceded 
functions_[HGGdN94SvC8]_en_vtt_txt32 by this assigned in the assignment basically says set the value of the name x to the value 
functions_[HGGdN94SvC8]_en_vtt_txt35 assignment in the list 
functions_[HGGdN94SvC8]_en_vtt_txt42 that happens with mutable things like lists in a immutable values will not be affected at 
functions_[HGGdN94SvC8]_en_vtt_txt52 and finally we is the value to be the play 
functions_[HGGdN94SvC8]_en_vtt_txt54 zero an l minus one so it is greater than or equal to zero init strictly less than the line 
functions_[HGGdN94SvC8]_en_vtt_txt57 one update so what we will do is effectively return false so this is 
functions_[HGGdN94SvC8]_en_vtt_txt6 different arguments so the constant you to unit of computation which can be used repeatedly 
functions_[HGGdN94SvC8]_en_vtt_txt63 that we would be an immutable value so let us assume call f so what we do 
functions_[HGGdN94SvC8]_en_vtt_txt64 we set up a list of numbers a list of numbers three eleven or and then we want to replace this well say by eight 
functions_[HGGdN94SvC8]_en_vtt_txt68 for by the value of set now as we saw in the values for right then this if if we so we 
functions_[HGGdN94SvC8]_en_vtt_txt71 what have self so as we expect after executing these for so statements because 
functions_[HGGdN94SvC8]_en_vtt_txt81 that there are a couple of other points to note 
functions_[HGGdN94SvC8]_en_vtt_txt82 about this function just to illustrate one is that we have here to return statements it 
functions_[HGGdN94SvC8]_en_vtt_txt83 went through a return false the idea is that the indicate to the calling function where 
functions_[HGGdN94SvC8]_en_vtt_txt87 is valid and it will return true or false depending on whether the update succeeded 
functions_[HGGdN94SvC8]_en_vtt_txt95 of this then mainly functions which do not return anything useful at a typical example 
functions_[HGGdN94SvC8]_en_vtt_txt99 may be no return function so by default what happens is that a function executes like 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt20 ordered so all this problem the first observation we can make is that if we have a simple 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt22 to ascending order so we start with a its the smallest one then b and c and so on 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt25 n and we work backwards down to eight so if we want to find the next permutation me 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt30 we want to find the log is suffix that cannot be incremented so suffix that cannot be 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt31 created is one which is as largest it could possibly t which means is sorted 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt35 so if i fix the letters from the to k then this is the largest permutation i can generate 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt37 did i cannot incremented within this red box so i must extend this to find the shortest 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt38 suffix mean sub extract and k where something can be incremented now how do 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt4 the position for every queen on every row and if it was tree then we try to doubt and 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt56 o but o is bigger than j so that we set our here we have a suffix that cannot 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt57 not be incremented and this is a first position where we can making it 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt62 order so it is in sorted order so we can go through and find the first position 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt67 and what we did to the descending order we replace m by k but what is the property of 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt7 a queen so the row o the column numbers if we re tell row by row the call an the numbers form a permutation 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt71 so this is a concrete to always to find the next permutation walk backwards 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt73 this suffix if we want to increment of course if we go all the way we go back to 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt74 first letter and we have not found position and we what we reach the 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt75 last permutation in the overall scheme things 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt78 position this case m to swap with k after swapping it we take the suffix after the 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt79 you letter we put queen the n and we reversed you get the smallest permutation starting with 
generating_permutations_[rP9XZRGPvdQ]_en_vtt_txt8 of zero to n minus one so keys number zero to n minus one it is exactly once as a column 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt1 old which squares are under attack and placing the queen one by one one 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt101 so why we are topic of global scope python allows us to define functions within function 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt105 and now we can now update x for instance y then says by column g of x procedure fixed rather than 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt109 f so then inside f right so then inside f an hence they are not visible outside 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt11 now by default python is scope this local to a function we saw that if we use a name inside 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt114 score so it will be as an this is a possibly 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt116 a h so if you look up the next say the first side and it is not then n 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt118 either we can declare global in which case you can updated within g or h or not 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt123 inside f but not to the value outside 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt128 into the function and make it updatable within a function 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt16 in the name what now the question is what is the set 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt17 square there is an x here you 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt20 code so we have from 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt30 one dot file a sec star assignment x equal to twenty two inside 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt33 at this point inside 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt35 the illegal look up the outside x it written says that there is an inside x in l 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt37 the x is not found in f python is delete to look at the enclose in function for a 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt38 like this 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt39 however if texts this updated in f then it becomes a local name and then it gives and or 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt43 element of x we 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt44 here we have this function in which we now k and x from integer to a list and the 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt45 we try to assign it 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt51 so global names that point immutable values can be updated 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt53 a passing the board around it is inside the queens actually requires no further exploration 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt56 all the definitions so that board as in the current works hand 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt63 is going to look for the value which is defined outside namely this empty dictionary 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt67 so a is that for our purposes which is to fix that eight queens problem without having to 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt76 being an integer 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt8 this brings us to a concept of scope 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt84 this is a way of telling python do not confuse is x equal to t would twenty two with create 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt85 should of a new local name x 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt86 all x is refer to in at are actually the same as the x outside and we created a 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt89 program 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt95 spot set to twenty two inside f 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt96 so we expect the second print statement give us twenty two 
global_scope,_nested_functions_[v2MUlo_JuT4]_en_vtt_txt99 so if we run this in the this is what we see that if we have to lines the first says 
grid_paths_[SD_hwfZykDM]_en_vtt_txt1 than naive recursion and we saw memoization and dynamic programming as to is to do this 
grid_paths_[SD_hwfZykDM]_en_vtt_txt102 a unique a while so this gives us a simple inductive formula 
grid_paths_[SD_hwfZykDM]_en_vtt_txt105 me ways can and go from zero zero and just names into a zero and there is only one that it is tempting to say 
grid_paths_[SD_hwfZykDM]_en_vtt_txt108 along the left column right the moving on the left column then they are no paths can 
grid_paths_[SD_hwfZykDM]_en_vtt_txt11 ways there are to go from the bottom left corner to the top right comp so we want 
grid_paths_[SD_hwfZykDM]_en_vtt_txt112 the all to is set of roads so paths i zero can only come from the left from paths 
grid_paths_[SD_hwfZykDM]_en_vtt_txt116 the add an extra clause which says paths i b j zero if this of whole it i j otherwise 
grid_paths_[SD_hwfZykDM]_en_vtt_txt124 n in the for ten and five time but in turn in order to compute for ten i will have to 
grid_paths_[SD_hwfZykDM]_en_vtt_txt131 we need to compute one we first check the table if it is already there to look it up 
grid_paths_[SD_hwfZykDM]_en_vtt_txt140 are that the base value at zero zero is one k and now once we have done this it 
grid_paths_[SD_hwfZykDM]_en_vtt_txt146 in these two unknown so i can add them not remember the sum of the value 
grid_paths_[SD_hwfZykDM]_en_vtt_txt147 any position is just the value to its left plus the value which bottom and now i start with the 
grid_paths_[SD_hwfZykDM]_en_vtt_txt15 here is one path wrong do 
grid_paths_[SD_hwfZykDM]_en_vtt_txt153 that means that no paths actually allowed to propagate through that are 
grid_paths_[SD_hwfZykDM]_en_vtt_txt155 in the wrong direction so here for instance we have only six paths coming from the left 
grid_paths_[SD_hwfZykDM]_en_vtt_txt16 the different paths on right and notice that these two paths actually star 
grid_paths_[SD_hwfZykDM]_en_vtt_txt166 you should get the same answer there is a third way to do this 
grid_paths_[SD_hwfZykDM]_en_vtt_txt168 first element to its right so we can do this dive now notice that any diagonal 
grid_paths_[SD_hwfZykDM]_en_vtt_txt174 this table in an iterative fraction not recursively we want to all f of five j and then 
grid_paths_[SD_hwfZykDM]_en_vtt_txt176 entry but the values we need to coming multiple different orders so we 
grid_paths_[SD_hwfZykDM]_en_vtt_txt178 are diagonal but it does not matter so long as we actually get all the values that we need 
grid_paths_[SD_hwfZykDM]_en_vtt_txt183 the the price because whenever you make a recursive call you have to suspended computation install 
grid_paths_[SD_hwfZykDM]_en_vtt_txt190 in the grid path ing there is one situation where you can illustrate this imagine that 
grid_paths_[SD_hwfZykDM]_en_vtt_txt192 to reached this it is very clear that i can only come all the way along the top o or all 
grid_paths_[SD_hwfZykDM]_en_vtt_txt197 we come back and recursively explore it will never ask has come here because it never 
grid_paths_[SD_hwfZykDM]_en_vtt_txt205 we pass number of entries so n square is much larger than two and remember so it 
grid_paths_[SD_hwfZykDM]_en_vtt_txt207 flip side is that each entry that we need to add to the memo table requires one recursive of 
grid_paths_[SD_hwfZykDM]_en_vtt_txt21 is to make these are can write moves the question is how many total such different paths 
grid_paths_[SD_hwfZykDM]_en_vtt_txt24 is just to determine how many moves we have to make we have to go from zero to five and 
grid_paths_[SD_hwfZykDM]_en_vtt_txt25 direction and zero to ten and the other direction so we have to make a to the number of five horizontal 
grid_paths_[SD_hwfZykDM]_en_vtt_txt28 is steps and ten must be vertical steps because they all take us from zero zero to 
grid_paths_[SD_hwfZykDM]_en_vtt_txt35 first to make an up move then we make a right then we make an up move make another node 
grid_paths_[SD_hwfZykDM]_en_vtt_txt37 and if we fix the five right moves then automatically all the remaining slots must be ten up or comma 
grid_paths_[SD_hwfZykDM]_en_vtt_txt38 worst right so it is either fifteen choose find it is the way of choosing 
grid_paths_[SD_hwfZykDM]_en_vtt_txt40 of fifteen choose five is clearly the same is fifteen choose ten because we could also fix the ten up moves 
grid_paths_[SD_hwfZykDM]_en_vtt_txt46 much to compute are that then writing out large factorials and then seen what the none 
grid_paths_[SD_hwfZykDM]_en_vtt_txt63 so we can count these bad paths and subtract then the good paths code we come 
grid_paths_[SD_hwfZykDM]_en_vtt_txt64 the bad paths well we can the solve a smaller version that so we have an intermediate 
grid_paths_[SD_hwfZykDM]_en_vtt_txt66 we have to or how many passed to from that to the right so from zero zero to two four we get 
grid_paths_[SD_hwfZykDM]_en_vtt_txt68 fifteen and from here to here the difference is that we have to do in both directions three n 
grid_paths_[SD_hwfZykDM]_en_vtt_txt72 ways in the bottom can be act combine with a we and the top so we multiply this and 
grid_paths_[SD_hwfZykDM]_en_vtt_txt76 count all the paths which get block because of the first intersection we can get count all 
grid_paths_[SD_hwfZykDM]_en_vtt_txt78 so we can count all these paths which pass through for four so this we know 
grid_paths_[SD_hwfZykDM]_en_vtt_txt88 let us look at the inductive structure of the top suppose we say we want to get 
grid_paths_[SD_hwfZykDM]_en_vtt_txt89 it one step to a intersection i comma j how then we reach this one step since power roads 
grid_paths_[SD_hwfZykDM]_en_vtt_txt95 another words if we say that paths i j is the quantity if we want to compute we want 
grid_paths_[SD_hwfZykDM]_en_vtt_txt96 to count the number of paths from zero is you to i j these paths has break up into two disjoint 
handling_files_[FWB0t6TcH3E]_en_vtt_txt0 in the last lecture we saw how to use the input and print statements to collect input 
handling_files_[FWB0t6TcH3E]_en_vtt_txt100 so backslash n is a notation which then nodes a single character even though it looks like took 
handling_files_[FWB0t6TcH3E]_en_vtt_txt113 so in other words if you are going to transfer this from one file to another in order to 
handling_files_[FWB0t6TcH3E]_en_vtt_txt114 worry about reinserting backslash n because is already 
handling_files_[FWB0t6TcH3E]_en_vtt_txt12 in that you have a large storage facility in which is to or things in b cartons 
handling_files_[FWB0t6TcH3E]_en_vtt_txt129 we could of a line which of hundred characters next line to three characters and so on so 
handling_files_[FWB0t6TcH3E]_en_vtt_txt132 everything up to that backslash n will be returned as the if i to a string return by readline 
handling_files_[FWB0t6TcH3E]_en_vtt_txt136 in case we want to actually divert from the strategy there is a command see it which takes a put 
handling_files_[FWB0t6TcH3E]_en_vtt_txt141 finally we can modify the read statement to not read the entire file but to re 
handling_files_[FWB0t6TcH3E]_en_vtt_txt148 fh dot read ten it will read the next and number and keep going and this 
handling_files_[FWB0t6TcH3E]_en_vtt_txt149 will say new some space along 
handling_files_[FWB0t6TcH3E]_en_vtt_txt153 so if you are reading will a file line by line then we may want to know when the file is ended 
handling_files_[FWB0t6TcH3E]_en_vtt_txt154 
handling_files_[FWB0t6TcH3E]_en_vtt_txt156 so one is if we try to read using the read command and we get nothing back we get an 
handling_files_[FWB0t6TcH3E]_en_vtt_txt160 k in the return the empty string it means that we have reached 
handling_files_[FWB0t6TcH3E]_en_vtt_txt169 so right takes an argument which is a string 
handling_files_[FWB0t6TcH3E]_en_vtt_txt185 so this takes a list of strings and writes them one by one into the file 
handling_files_[FWB0t6TcH3E]_en_vtt_txt192 sit to the file pointed to by the file handle an 
handling_files_[FWB0t6TcH3E]_en_vtt_txt195 dot close 
handling_files_[FWB0t6TcH3E]_en_vtt_txt197 are copied out to the disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt198 it also now means that if it is no longer associated with the file we are dealing with 
handling_files_[FWB0t6TcH3E]_en_vtt_txt2 print 
handling_files_[FWB0t6TcH3E]_en_vtt_txt200 
handling_files_[FWB0t6TcH3E]_en_vtt_txt207 in all on to the disk do not way for the rest right stuck you will a handle the buffer is full 
handling_files_[FWB0t6TcH3E]_en_vtt_txt208 and then write as you normally would to the disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt209 here is a typical thing that you would like to do in python which is to process it line 
handling_files_[FWB0t6TcH3E]_en_vtt_txt226 for each line that by read from the list infile dot readlines i just write it to outfile 
handling_files_[FWB0t6TcH3E]_en_vtt_txt235 right so instead of saying for each line in infiles get i can just write it directly out 
handling_files_[FWB0t6TcH3E]_en_vtt_txt237 if 
handling_files_[FWB0t6TcH3E]_en_vtt_txt249 the line preparing visible to us so the 
handling_files_[FWB0t6TcH3E]_en_vtt_txt252 a spaces and tabs and if there at the end of the line we do not the the line ends with a large 
handling_files_[FWB0t6TcH3E]_en_vtt_txt253 character we see of there are spaces are 
handling_files_[FWB0t6TcH3E]_en_vtt_txt257 it will also strip other chunk there is some spaces and tabs for the backslash n an 
handling_files_[FWB0t6TcH3E]_en_vtt_txt258 return that 
handling_files_[FWB0t6TcH3E]_en_vtt_txt262 we also strip from the left using l strip or we can strip on both size if we just 
handling_files_[FWB0t6TcH3E]_en_vtt_txt270 now let us open that python interpreter and try to read lines from this file and but it 
handling_files_[FWB0t6TcH3E]_en_vtt_txt277 now y is there a blank line between every line in a file that is because when we readlines 
handling_files_[FWB0t6TcH3E]_en_vtt_txt279 so the quick brown the first line it will backslash n fox sides a backslash n 
handling_files_[FWB0t6TcH3E]_en_vtt_txt28 this is like getting access to a buffer from which data from that file can be rid into memory 
handling_files_[FWB0t6TcH3E]_en_vtt_txt294 only way that we can undo this is to start again by closing the file 
handling_files_[FWB0t6TcH3E]_en_vtt_txt296 so this close the file 
handling_files_[FWB0t6TcH3E]_en_vtt_txt30 now having open this file handle everything we do with the file is actually done 
handling_files_[FWB0t6TcH3E]_en_vtt_txt301 fh dot readlines 
handling_files_[FWB0t6TcH3E]_en_vtt_txt307 an input dot txt t r as before stage easy open output dot txt think of it and now 
handling_files_[FWB0t6TcH3E]_en_vtt_txt311 not if you look at the lines the quick brown fox its it up now for example cycle i 
handling_files_[FWB0t6TcH3E]_en_vtt_txt312 it is just fox fox as three letters but if we put the backslash n itã•s wrote wrote for letters so the 
handling_files_[FWB0t6TcH3E]_en_vtt_txt318 summarize what we have seen is that if you want to interact with files we do with root 
handling_files_[FWB0t6TcH3E]_en_vtt_txt32 so we do not directly try to read and write from the disk in set we write and read and write from 
handling_files_[FWB0t6TcH3E]_en_vtt_txt320 memory m the file on the disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt325 we saw that we have a read readline and readlines so using this we can either read the entire file in 
handling_files_[FWB0t6TcH3E]_en_vtt_txt326 one shot is a string or it it line by line 
handling_files_[FWB0t6TcH3E]_en_vtt_txt327 similarly we can either write a string or we can write a list of strings to 
handling_files_[FWB0t6TcH3E]_en_vtt_txt328 so we have a write command in a writelines and writelines is more correctly to be interpreter 
handling_files_[FWB0t6TcH3E]_en_vtt_txt331 buffer by using the flush command and we also saw that there are some string operations 
handling_files_[FWB0t6TcH3E]_en_vtt_txt34 an with a processing we need to make sure that all the data that we have written goes back 
handling_files_[FWB0t6TcH3E]_en_vtt_txt38 the data on to to write to the file is actually taken out of the buffer and put on to that 
handling_files_[FWB0t6TcH3E]_en_vtt_txt39 is and this is technically called flushing the buffer 
handling_files_[FWB0t6TcH3E]_en_vtt_txt47 the first argument that you give open is the actual file name one you are disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt49 the first part and extension 
handling_files_[FWB0t6TcH3E]_en_vtt_txt52 are or directly very a running the script 
handling_files_[FWB0t6TcH3E]_en_vtt_txt53 so you can give a file name which belongs to a different part if your 
handling_files_[FWB0t6TcH3E]_en_vtt_txt55 on windows or unix or what operating systematic 
handling_files_[FWB0t6TcH3E]_en_vtt_txt6 so for large data we a for studied with files which reside on the disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt60 so what we have to do is decide in advance with of we are going to read from a file 
handling_files_[FWB0t6TcH3E]_en_vtt_txt7 so we have to read a large volume of data which is already written a file that 
handling_files_[FWB0t6TcH3E]_en_vtt_txt73 append to do is that it will take a file which already exists and add the new stir 
handling_files_[FWB0t6TcH3E]_en_vtt_txt8 disk and the output we compute is typically written back into another file on the disk 
handling_files_[FWB0t6TcH3E]_en_vtt_txt82 the name contents 
handling_files_[FWB0t6TcH3E]_en_vtt_txt83 so contents is now assigned the end type up data which is in the file handle pointed to by a fetch 
handling_files_[FWB0t6TcH3E]_en_vtt_txt85 now we can also consume a file so we have typically dealing with text files 
handling_files_[FWB0t6TcH3E]_en_vtt_txt91 that returned is that transmitted by input as a string to the name that you assigned to the 
handling_files_[FWB0t6TcH3E]_en_vtt_txt93 so readline is like that but the difference between readline an input is that 
handling_files_[FWB0t6TcH3E]_en_vtt_txt97 are so you have to remember that you have this extract character floating and the n 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt112 a for loop has a fixed number of repetitions on the other hand while loop is typically 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt12 one to the larger of m and n and in one scan compute list fm and fn 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt120 do it again so if you are not change something which makes the condition false we will never 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt122 now previous example in order to make the condition false we need i to becomes 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt128 have a dangerous kind of behavior called an infinite loop where the computation just see 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt13 in other words for each i in this list one to the maximum of m and n if first check if 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt131 in this lecture what we have seen is that we can start with a very naive idea 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt132 is more or less implements the function as it is defined and work are ways to dramatic 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt137 will run through all these values anyway because we scan all these numbers in order to find 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt144 i can actually come up to the dramatically a different way to compute gcd which will 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt15 n and if so we add to the list n so instead of to two separate scan through a one to m and the 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt2 you while the else 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt35 says that we want to conditions to be true we want the remainder when n is divided by i 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt36 be zero in other words i divides m and we also want the remainder when n is divide 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt46 each time we can start with one in each time we find the larger common factor we can discard 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt51 updating this name with the value of the common factor that we saw last 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt53 directly scanned all the possible common factors from one to the minimum of m and n whenever 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt58 one is a common factor we will at least have mrcf equal to one but if we 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt6 of factors in both list for common factors and our goal is to return the greatest common 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt60 is for iteration or loop what we end up with is the largest common factor that 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt61 found between one and the minimum of m and n which is indeed the gcd of m and n 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt62 we can such an do some further optimizations since we are looking for the largest common factor 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt64 we can start at the end of the list and work backwards so instead of running from one to the 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt66 the guarantee is that one will always to upper is a common factor so if there are no 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt67 of common factors and the very end we will find one as the greatest common factor 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt69 a within backwards from largest to smallest the very first common factor we find must 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt74 when we actually get into formal python that us explore a new way of going through a list of values 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt83 the implicitly exit from this function b times c or return statement in a 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt94 i to i minus one take the current value of i subtract one and replace it and n the math matter 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt95 equality is written as double equal to this is what we use in our can 
improving_naive_gcd_[Bc_4fV94lE]_en_vtt_txt98 many other programming languages means assign a value to be so this is the find 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt100 well at each down to whatever we doing we are inserting a new value into a sorted second 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt101 of length k 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt103 a sequence of length one we insert a value into that to get a sorted length 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt125 n squared sort 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt128 suppose into it the other way suppose we take a list which is already sorted 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt129 now we ask it to sort it then it comes back instant 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt13 can either be bigger than the to we saw which 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt134 so each insert step takes only one iteration 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt135 it does not have to go through anything beyond the first element in order to stop insert 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt136 seven 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt137 actually if we take even a large value like ten thousand a reason hundred thousand the should work then so insertion 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt138 sort when you already have a sorted list will be quite fast because the insert 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt141 in a sequence and with no prior knowledge about what this sequence looks like it 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt15 so what we do is we scan from top to bottom and so an that smaller than the paper 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt18 stack we are building 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt23 so what we do with this same list that we had for selection sort is we will pick a 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt27 now eighty nine is bigger than both so a key button top of the stack the right end fifty file i have 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt29 nine so to so left or way to nine then i look at seventy four it smaller than seventy four goes to 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt30 left of them 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt35 fifty five 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt39 we start building a sort sorted sequence of one element pick up the next unsorted element 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt40 and insert into the correct place into the already sorted sequence 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt44 is one and there is some position so that up to this point everything is sorted 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt54 at each time we look at the value at actually 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt55 the slice is a slice a minus one so it 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt57 we look at the value immediately after that which are will be the position called sliceend and 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt65 give exchange it that means that this value as now one here 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt66 now we again a compare it to the previous value and if it is smaller we exchange 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt67 so again this means that it goes one more position so 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt8 now net pick the second paper from the old stack and we look at its marks as compare 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt82 is nothing happens so the 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt87 now we will compare fifty five to the value to its left and there is no change 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt89 similarly we will take twenty one right and we compare it to eighty nine says twenty one is smaller than 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt91 than fifty five it will swap since twenty one is smaller than thirty two to swapped but now the position 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt92 will get so it it swapped and now the position is zero 
insertion_sort_[QnjToZfpi0E]_en_vtt_txt97 its left 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt105 until we put zero zero ninety nine so when this its ninety nine then this for loop 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt106 we exit and we go to one hundred zero and b zero one zero 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt11 python in python to the output of map is not a list so you need to use 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt115 this is a this one let us to the python going to fill use the we want x y to to x in range one to 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt118 of the come and particular you shifts we internally stages or which are in will be 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt123 see three four five right so you sort before writes three four five but you will also see laid 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt133 so here is the earlier definition of f of the list that we had x y and z and turns 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt137 is you only get one copy of things like before sixty three four five the 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt146 so here is initialization which says l consists 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt158 then we copy this is four times the four so we say the actual matrix l as 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt159 as four copies of zero list now we go and change one entry say we change entry one in 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt16 want to use it to the list we must use the list function to converted and this 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt162 you expect is the output of this 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt163 we have zero list and then we say l is copies of the list for the in 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt176 so to summarize map and filter and then useful functions to and writing 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt179 sort a list computation is to correctly initialize then it and in the list 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt19 a can be used in for functions it but if you want to use them as this a value 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt24 the list of primes we want is empty and now we run through the number list and for each number 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt36 false in case discard 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt47 in that can be done using the computation all filter and then so filter first gives us 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt53 if i that this is the a more that the x y insert a the length of the you sides and a for expect 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt57 use values are below n such that x y and z form of by paper into six 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt63 together all possible permutations then we take of those formulation is satisfy 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt7 so python has a built in function map which has the size that this so in map f l applies f 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt70 manipulating step to combine them into a single triple x comma right 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt72 of building a new set from existing sets so what python the as a new other languages also 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt85 is for i in any l four 
list_comprehension_[Uu4PnnWlqsA]_en_vtt_txt93 in that range so is a little bit more complicated than the one we did before 
lists_[ffMgNo17Ork]_en_vtt_txt0 so far we have seen some basic types of values in python 
lists_[ffMgNo17Ork]_en_vtt_txt103 so this is the sub list of this list two comma list thirty seven which gives us just the list that we have 
lists_[ffMgNo17Ork]_en_vtt_txt132 we say a in python notation is that lists are mutable mutable so mutation is to change 
lists_[ffMgNo17Ork]_en_vtt_txt136 the other parts 
lists_[ffMgNo17Ork]_en_vtt_txt139 then the list nested the saying name now has a seven in place of the value for if i say nested 
lists_[ffMgNo17Ork]_en_vtt_txt14 so strings are used to represent text a string is of type str 
lists_[ffMgNo17Ork]_en_vtt_txt15 is a sequence of characters an 
lists_[ffMgNo17Ork]_en_vtt_txt160 now these change x to seven the question is choose y five how y seven and indeed wise to five an 
lists_[ffMgNo17Ork]_en_vtt_txt164 as we saw the value of y actually did not change and the question is why should it change 
lists_[ffMgNo17Ork]_en_vtt_txt181 it turns out that for mutable values assignment does not make a fresh copy lie 
lists_[ffMgNo17Ork]_en_vtt_txt187 is what has happened to list two is list two the same as before namely one three five seven 
lists_[ffMgNo17Ork]_en_vtt_txt19 if we say s square bracket i for a string value s then we get the i ith position use 
lists_[ffMgNo17Ork]_en_vtt_txt192 list two is indeed one three five seven 
lists_[ffMgNo17Ork]_en_vtt_txt20 in this numbering convention an 
lists_[ffMgNo17Ork]_en_vtt_txt211 to either name if we happen to update immutable value the other name is also effect 
lists_[ffMgNo17Ork]_en_vtt_txt223 similarly if we leave out the last position like this then we will implicitly assume 
lists_[ffMgNo17Ork]_en_vtt_txt224 the last position the slice is the length of this to list of the string and so it goes 
lists_[ffMgNo17Ork]_en_vtt_txt228 we leave out both position we just put the learned nothing before nothing after logically 
lists_[ffMgNo17Ork]_en_vtt_txt232 that these lies creates a new sub list 
lists_[ffMgNo17Ork]_en_vtt_txt233 so what we have is that l we just a colon after it is not the same as x and 
lists_[ffMgNo17Ork]_en_vtt_txt236 one which makes then both 
lists_[ffMgNo17Ork]_en_vtt_txt237 remember if i do not have this then i will get list one and list two pointing to the same 
lists_[ffMgNo17Ork]_en_vtt_txt243 so therefore after this list one and list two are disjoint from whichever any update to the 
lists_[ffMgNo17Ork]_en_vtt_txt25 the length of a string using the len function and we said that we will look at more complex 
lists_[ffMgNo17Ork]_en_vtt_txt257 a list one three five seven and give it the name list two 
lists_[ffMgNo17Ork]_en_vtt_txt265 so they happen to have the same value but they are two different things and so if 
lists_[ffMgNo17Ork]_en_vtt_txt269 so if we update list three or we update list two there will continue to remaining to 
lists_[ffMgNo17Ork]_en_vtt_txt271 underline object that we have referring to by this name is the same 
lists_[ffMgNo17Ork]_en_vtt_txt279 list in the memory 
lists_[ffMgNo17Ork]_en_vtt_txt280 we have another keyword in python called is 
lists_[ffMgNo17Ork]_en_vtt_txt281 this so when we say x is y what we are asking is whether x and y actually pointing 
lists_[ffMgNo17Ork]_en_vtt_txt292 to the same thing is list 
lists_[ffMgNo17Ork]_en_vtt_txt298 now we ask whether list one is equal to list two and neat initial if we ask whether list 
lists_[ffMgNo17Ork]_en_vtt_txt3 are decimal point 
lists_[ffMgNo17Ork]_en_vtt_txt307 if we ask whether list two is equal to list three is two that is the case that first list three 
lists_[ffMgNo17Ork]_en_vtt_txt308 is list two in the sense that they both are the same physical is and so when we updated list 
lists_[ffMgNo17Ork]_en_vtt_txt310 x strings we can combine list if there are using the plus operate 
lists_[ffMgNo17Ork]_en_vtt_txt316 always produces a new list 
lists_[ffMgNo17Ork]_en_vtt_txt317 so if we say that list one is one three five seven and then we copy this list as a name to list two 
lists_[ffMgNo17Ork]_en_vtt_txt325 is one 
lists_[ffMgNo17Ork]_en_vtt_txt327 if on the other hand we reassign list one to be the old value of list one plus a new value nine 
lists_[ffMgNo17Ork]_en_vtt_txt328 this x to 
lists_[ffMgNo17Ork]_en_vtt_txt332 a slice 
lists_[ffMgNo17Ork]_en_vtt_txt333 time we apply plus me actually did a new list 
lists_[ffMgNo17Ork]_en_vtt_txt339 is values need not be of a uniform type we can i makes list consisting of list one we nx 
lists_[ffMgNo17Ork]_en_vtt_txt341 row almost always we will encounter list where the under lies content of the list is of 
lists_[ffMgNo17Ork]_en_vtt_txt343 positions will actually typically have a uniform type but this is not required that python 
lists_[ffMgNo17Ork]_en_vtt_txt344 and we can nest still is 
lists_[ffMgNo17Ork]_en_vtt_txt348 new feature of python which we introduced that list is a concept of a mutable value 
lists_[ffMgNo17Ork]_en_vtt_txt354 is so updating x as an effect y and by symbols a 
lists_[ffMgNo17Ork]_en_vtt_txt362 check whether two names are equal to only value or also are physically pointing to the say 
lists_[ffMgNo17Ork]_en_vtt_txt38 so we can now extract values at the given position or we can extract slices 
lists_[ffMgNo17Ork]_en_vtt_txt44 so len of names is three because there are one two three values in a so remember 
lists_[ffMgNo17Ork]_en_vtt_txt47 is one difference between list and strings and what we have seen so far 
lists_[ffMgNo17Ork]_en_vtt_txt50 of length one we get the same thing 
lists_[ffMgNo17Ork]_en_vtt_txt53 if we ask for the zero th position then this gives us the letter h 
lists_[ffMgNo17Ork]_en_vtt_txt66 single value and here we have a list and therefore these two things or not equal to which are 
lists_[ffMgNo17Ork]_en_vtt_txt69 and a slice of length one 
lists_[ffMgNo17Ork]_en_vtt_txt74 and nesting so for example we can have a nested list so the 
lists_[ffMgNo17Ork]_en_vtt_txt77 says position position zero or 
lists_[ffMgNo17Ork]_en_vtt_txt79 two one is a single simple value an integer zero an integer for position zero is a list which 
lists_[ffMgNo17Ork]_en_vtt_txt86 and nested then as we said we get this value and this value consists of a list itself contain 
lists_[ffMgNo17Ork]_en_vtt_txt90 is position which is this string and in that we look for the third character which is zero 
lists_[ffMgNo17Ork]_en_vtt_txt99 so we get the list containing the list thirty seven so node 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt1 of these using memoization and dynamic programming 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt106 be the same 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt107 if we walk down from that magical value the largest value and we follow the sequence 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt108 then we can read often the corresponding the row or column because there same the actual 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt11 program then the memo table and them dynamic programming almost comes out automatically 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt111 are two words became un be you initialize the this or l see them you thing at the boundary the nth row and the 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt126 a much more useful problem in practice than the longest common subword is what is fall 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt140 it so a look for the next match right so i skip but and x match must come to my right so it must 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt148 answer and look for these a clever connections but it turns out that is a much more direct 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt15 grid to the longest word in secret itself the longest subword that is common is the were 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt160 this is the good way of comparing one version of a file 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt163 as n and the itself changes then diff else to quickly what are the difference is to 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt169 top 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt173 fill it a zero to n minus one is the first word b zero to be n minus one and second word 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt176 and add this i can extended solution by saying the a zero matches b zero one that 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt178 is some kind of a matching it says that the now a if you say that the this matches this 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt182 which i can do this is the longest common sub seek 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt185 the best solution did not match these supposing you claim that the best solution 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt189 zero matches b zero so the first two letters are the same i might is will go with that an 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt196 a two sub problems we say ok let us assume be zeroes not part of the solution then the does 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt2 so we are looking it examples of problems where the main target is to identify the inductive 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt20 subword this as length three and if we have to very different words like director unset grid 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt205 us in general will take us deeper in the words we said easy a zero b zero which requires solve 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt210 a i and solve it and take the but of the right we take max of some solution from i an this 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt232 you can fill up the bottom row and the leftmost column there are the right moves for now 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt236 is column by column and we propagate it and then finally if 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt240 green increment the number so we can ask why is this four so we say that this is for because not because we did 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt241 one plus three because s is not equal to be we before because we got the max value from here 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt242 wise is for again i is not equal to s so we got the max value of y is this 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt253 this and a explanation of the longest number is number or an these diagonals 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt260 by following stop 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt262 its initialize the last row and the bottom bottom row in the last column and then as before 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt32 is a brute force algorithm that you use which is to just start at i n 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt34 in go before you find the or not so you match a i and b j right so if a i and 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt36 from b j plus one and so on and whenever we find to pair two letters which differ then the common so 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt41 in general i start at i j and then i have to go from i till the end and from j to the end 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt59 it or a i is equal to b j so i get one plus two and the base case of the bound 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt60 the condition is well one of the two words empty if i have no letters left if i 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt61 column i j and in a different combinations i and j either i or j 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt67 so we will use indices zero to n so for i in becomes mn or j becomes n it means that that correspond 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt7 with a procedure come clever that the key thing to dynamic programming is to be it to 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt71 n is zero because you go one pass the length of the and if we have not one pass a len 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt76 then equation form the inductive definition that we put goes in the earlier 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt77 n so here is for example for example this bisect and secret and so we have position zero to five and then we 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt8 to understand the inductive structure so you need to able to i take a problem identify how 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt80 are this way so the arrows that indicating that and in order to solve this i need to solve 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt84 says that the corner and the actually the right column and the bottom thing do not 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt86 so we can actually fill in those values are zero so that is given to us by definition 
longest_common_subsequence_[P_oDU7AQ8Mo]_en_vtt_txt99 now we said earlier that we have found focusing on the length of the longest common subword 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt1 we said that list are mutable objects 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt100 this will be useful because data not we will find that with in python we can actually exam 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt101 in errors and take a to an alternative action if an error occurs and we can single what type of the 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt104 we would normally or text set the function append to take two arguments the list and the value 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt111 and x is false an argument to the function append so we 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt116 get what is called object oriented programming with in python 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt119 so we go back to our old example list one is one three five six and list two is 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt128 in the same way if i say that list one from slice to to with the it becomes seven eight it 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt13 all the other hand because i use plus what i have done is that created a new list or an 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt131 now safe one three seven eight 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt133 so we preserved the structure of the list in terms of the number of positions up the 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt134 this is not quite python allows you to both expand and strings 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt143 the other thing we can do is shrink a list we can put a smaller thing 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt145 slices zero to two which will give us these two positions now have a a slice of len 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt146 these two but we assign it a list of length one 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt147 so this one three is replaced by just a single seven right 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt152 using so you should be careful that you know what you are doing effect prime to directly 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt153 we have date slices in list 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt154 a very common things that we want to know what of list is whether a value 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt158 now we can use this for instance to make a remove a safe operation before we move 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt164 recall that removal moves only the first element so 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt166 in this 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt17 if i say list one into one three five six seven for example py six and i say list two is equal list one 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt171 reverse the list and place l dot sort will sort a list in ascending order 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt180 python for every time 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt181 so you do have to look up the documentation and if you think that there should be a function 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt182 which does something natural very often there will be 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt185 times i do this says 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt188 have or do not be afraid to seen documentation you by looking up the documentation we 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt192 is names to not have types in python we do not have to announced a name names just pop up 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt193 as the code from the essence 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt194 every time and name pops up python needs to know what value to its 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt217 now append i to the list of factors which i will return 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt22 it so now list one is again one three seven six but it is two which was pointing to list one is no longer point 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt225 this initialization is only need a to tell python when this first append happens that 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt227 is a valid function to apply to this name without this you get an error so 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt234 are contract the list but this is something to be done with care must make sure 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt238 and to go through all of them as also very going to just list out of this 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt28 inside a function we want to update a list then so long as we do not reassigned 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt30 the function will not reflect outside the from 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt38 inside the function this would not to 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt40 is a function which will take a list and add a value 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt47 sort a new list in that sense 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt49 so append actually as a value in place both list one and list two point to the new list with 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt5 now if i take the position two which is this position and replace it by the value seven then 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt51 the other hand if we are done l lie convention using the plus operator then 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt55 so the so append takes a single value 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt58 we want to to put six eight ten 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt59 right so we want to one three five and we want to expand this to have three more values 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt60 of course we can append each of these values one at 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt68 now this is to add elements so list there is also a way to remove an element 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt69 the list 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt7 object we have that list two also has same value one three seven six 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt74 well in fact this will give us an error so you have to be careful to use remove only 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt88 now if i say list two dot to move say finally now there are two copies of five remember the first copy 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt89 which is here the cleaning in a second pop it reads later so this will remove the 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt91 rather than a list two the first once efficient go to six but the second copies that it if i say that 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt94 now what happens where move it the third time now i get an error saying x is not in 
manipulating_lists_[lOhshXnJAJw]_en_vtt_txt97 an error or 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt114 there is no multiplication for pos is zero and so we can then write out 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt126 entry i comma j then i need to choose a put k it and 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt127 and in order to choose a good k i need so this i can express in many different place it 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt129 have to say of k thing this entry i to i and then i want the entry i plus one than j so i have 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt134 we could have order n values any to compute for this any to compute 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt146 only thing that you need to a note is that we have to use some 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt147 so what we are doing is when we compute as we said one entry so supposing we are computing 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt150 longest common subword we assume that the maximum was zero to time we saw 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt155 are see is actually infinity now what is infinity well you can take infinity so that we can 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt157 the total time machine will not be more than so if we take the product all 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt164 is just a way to make sure that we go it go through this table diagonal by diagonal 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt166 saw with pairs in that row and column 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt17 south it does not matter whether we first multiply a b and then multiply c or refers to but by a 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt170 the the point was each entry takes constant time so the a for to import the same this i 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt172 so we saw that and entry will take time proportional to its distance so the diagonals 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt179 is done and in all the examples we saw before the pivot 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt20 six times three times two that the matter we were them to six then three first of three times two first 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt23 complexity of computing learns wise this thing case 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt33 a single entry so i get one into one hundred into one hundred steps i just collapse this row and 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt34 this column into a single it as like computing one entry none matrix one 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt42 in which you do the associated steps can dramatically improve or worsen the amount of time use 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt44 so in general we have a sequence m one to m and n each of them as some rows and columns 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt50 to it so we can add test two two matrices at a time we only know how to multiply a times 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt6 answer which is m times p so in the final entry we have to do mp we have to make empty entries in the final product 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt63 in which to do this definition so that we optimize the operations are 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt66 it must reflects and must have this whole thing for a into c 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt72 thing is my the other worst case is i could have done m one two not worse but extreme k 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt79 we know comma change to cause and to this we have to recursively add the induct 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt8 so that takes a order n time so the total work it is usually easy to compute as m times 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt81 how much time we take up to n to the right so 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt86 that sub problems so we did the longest common subsequence problem we at two sub dot 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt90 of k we have no way of knowing which of these cases better so again we try all of them 
matrix_multiplication_[1iaItgJ3zLg]_en_vtt_txt96 is of k of the cost of multiplying m one to m k plus the cost of multiplying m k plus one to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt10 result of inductively sorting the rest so this is a very attractive way of describing 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt101 table here right so we have a table where in some order as and early matter from 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt108 the base case in the function we will get back that fib of one is one so we store the 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt109 is in the table this is the first value we are actually computed what is we did not assume 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt113 one so we store that in the table we say for k equal to two fib of k is one now week a 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt114 back to fib of three and now we go down it asks is to compute fib of one again now although 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt115 so this does not take us any work because it is a base case we do not actually exploit 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt117 there is and so we pick it up so we highlighted or use the fact that the 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt118 this value is actually not recomputed but look up in the table so from one plus one we 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt119 now of fibonacci of three is two now we go back up the fibonacci of four init ask us to come to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt120 the second half or fits a sub problems then the fibonacci of two once again we find that the 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt128 so we end up so notice therefore that if the value we computed 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt136 now what fibonacci says is the first thing you do when you get a number is trying to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt138 otherwise we go through the recursive computation so this is the usually computation which remain 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt139 a recursive call and eventually come up to the new value which is the value for this predict 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt152 a dictionary and not a list because the arguments to be any particular so we could 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt154 so we basically for given the particular combination of arguments we look up whether that combination 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt155 of keys is there in the dictionary if so we look it up and return it otherwise we compute 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt156 the new value for this combination store it and then it up so we have glossed of 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt165 the base case to the case we had that means there are always some values some 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt166 base values for which no for the values three we computed these values are automatically 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt177 its right so there will always be a starting point and we can solve the sub problems directly 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt179 to follow the inductive structure we can directly say ok telling which are all 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt185 so we can start at the bottom and then work ourselves up we can say look a few 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt189 uneven going to it from five and not counting down from five we have just directly filling up the table 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt19 in general when we have such inductive definitions what we do is we have some problems that 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt193 of three so we this computed we have three and four so we can compute a min one threes 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt197 ny can to ask me for the ten fibonacci number i can write it out i can say of zero 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt20 we have to solve in order to get to the answer we are trying to be so for instance 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt203 up to learn and table by time by recursion to fill them up iteratively starting with the ones 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt21 to compute factorial of n one of the things we need to to compute factorial of n minus one 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt210 takes an we just take the i value to be the sum of the i minus one i minus two values 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt211 which we have already computed because we are going and this particular order 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt216 we call a memo table says called memoization and we always look up the table before 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt22 so we call factorial of n minus one a sub problem of factorial n 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt25 smaller than n similarly for insertion sort in order to sort the full list we need 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt26 to sort all the elements excluding the first one what is called the tail of the list and 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt27 in turn we need to sort its tail and so on so in general when we do insertion sort we will 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt30 the actual value of f for our given input y by combining this solution is to be sub prompt 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt39 fibonacci numbers are zero one and then you add it so one plus one is one plus zero is one one plus one is two three five and so on 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt40 so you just keep adding the previous 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt46 itself so if n is zero return zero of n is one if it on one other 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt48 on and might is to add these two and return this value so here is a clear case of an inductive definition 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt60 we can complete the computation of fibonacci to we get value is one plus zero another words one 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt65 now we are back to fibonacci of four and we have computed the left side of fibonacci of 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt66 four so we make to the right side and now what happens is we end up having to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt71 of four and fibonacci of three so we are done with four so now we want to do fibonacci of three so no to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt72 that we have already computed fibonacci of three but this will blindly require us to 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt74 down go all the way up and eventually fibonacci of three will of course give us the same ones 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt77 five is five 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt86 so what we want to do is move away from this naive recursive implementation of an inductive definition 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt87 in and try to or two words never reevaluating a sub problem so this is easy to do 
memoization_and_dynamic_programming_[h_YCj6CeutA]_en_vtt_txt88 if we could only remember the sub problems that we solve before then all we have 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt1 for efficient then insertion sort of selection sort and we claim it also that it operate 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt10 in a and b and move the smaller of the two to c so clearly seen closer one element we 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt102 continue with the old values from the recursive calls star so this requires certain unknown 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt103 to extra work so recursive calls and returns turn out to 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt106 this is only a minor comment but conceptually merge sort is the basic order n log n sort 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt107 algorithm and it is very useful to know because it plays a role in many other things in directly 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt108 ordering 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt12 of c is m plus n then what we do in each iteration we do 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt13 a comparison and then we do an assignment and then we increment something to six so the 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt17 we can say that merge has a function takes time of the order of maximum of m and n and 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt30 n elements is two times the time taken for two lists of n by two and this is a merge component 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt36 we start with the base case if we have a list of size one then we have nothing to to 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt40 so we write two times two is to square we write this for us to so it we will 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt41 find that this is equal and writing it in this found to to two to square t n by two so 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt46 so we expand two times t n by four that you give us another in by eight 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt5 so in order to analyzed merge sort the first seen we need to do is to given as 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt55 this has become one and so we test separate so we have two to the j which log n plus this j is 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt61 three and two three then we end up to the list of the form one two three three so this is how 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt77 so merge can be used to implement the s combinations combination operations and lists 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt78 can we use to take the you cannot two lists and this car duplicates can use to 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt79 take the discussion up to this and finally as an x is size test that you understand 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt80 cf you can use merge two lists difference the list 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt87 so merge sort is clearly so c or to insertion sort and selection sort because it is order n 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt90 of merge sort is that we have flows create a new array everytime we merge two lists 
mergesort,_analysis_[JusPS_aLd04]_en_vtt_txt94 the other problem with merge sort is that it is inherently recursive so merge saw 
mergesort_[V7fvTmhqokM]_en_vtt_txt10 the jobs should get to the two teaching assistants in each one is stored to o 
mergesort_[V7fvTmhqokM]_en_vtt_txt100 we do is both are not empty so we want to take the smaller one of the head of a and 
mergesort_[V7fvTmhqokM]_en_vtt_txt102 is to n so we compare the first element to be any and we move the smaller one it is 
mergesort_[V7fvTmhqokM]_en_vtt_txt103 c and we keep repeating this until all the elements thing a and b have been fit 
mergesort_[V7fvTmhqokM]_en_vtt_txt104 this is a python implementation of this merge function in general the to list need not 
mergesort_[V7fvTmhqokM]_en_vtt_txt105 the same lengths so we are merging a of length m a and b of length n into an output 
mergesort_[V7fvTmhqokM]_en_vtt_txt11 are the papers sort them separately and come back and then the instructor has to put 
mergesort_[V7fvTmhqokM]_en_vtt_txt119 moves so far to the output eventually everything in a everything in j will be must is more 
mergesort_[V7fvTmhqokM]_en_vtt_txt123 cases are where one of the two list is empty either we have reached the end of eight saw 
mergesort_[V7fvTmhqokM]_en_vtt_txt127 or the index into similarly if we have reached the end of p we append 
mergesort_[V7fvTmhqokM]_en_vtt_txt13 the unsorted array or list into two parts and then you handle word to these two parts to 
mergesort_[V7fvTmhqokM]_en_vtt_txt132 in so these two things will definitely work just a checking the fact that we have 
mergesort_[V7fvTmhqokM]_en_vtt_txt134 now nine a list is exhausted then we have to do comparisons so we come to the 
mergesort_[V7fvTmhqokM]_en_vtt_txt137 which of these two goes to seen x so the smaller of the two if it comes in a we append i 
mergesort_[V7fvTmhqokM]_en_vtt_txt140 in the correct order from a and b into says 
mergesort_[V7fvTmhqokM]_en_vtt_txt142 so here is a file merge dot py in which we have exactly the same code as we had in the slide 
mergesort_[V7fvTmhqokM]_en_vtt_txt146 so this in this way to do this is to try and constructed two lists of a suppose we take a list 
mergesort_[V7fvTmhqokM]_en_vtt_txt156 the code in a couple of places so we have two situations case one and case for where 
mergesort_[V7fvTmhqokM]_en_vtt_txt162 one so if we take the value from b so we combine one and four and say either it a seventy 
mergesort_[V7fvTmhqokM]_en_vtt_txt164 i j could j plus one on the other hand either if a some b is empty 
mergesort_[V7fvTmhqokM]_en_vtt_txt165 up a has a smaller value then you take the value from the end append bc x and right so let us 
mergesort_[V7fvTmhqokM]_en_vtt_txt178 out the value so the names at some brute it point now here since we are having an error 
mergesort_[V7fvTmhqokM]_en_vtt_txt180 says is set we have not formally seen in this see it in the the next week but it does into to 
mergesort_[V7fvTmhqokM]_en_vtt_txt189 it is trying to check whether the i is bigger than b j a but this point unfortunately 
mergesort_[V7fvTmhqokM]_en_vtt_txt192 now we are only checking if a i is three since i is not the we are going right and checking 
mergesort_[V7fvTmhqokM]_en_vtt_txt199 index and sometimes it is implicit and sometimes we have to be careful and this is one of the 
mergesort_[V7fvTmhqokM]_en_vtt_txt203 is is will go back to the version with four explicit cases 
mergesort_[V7fvTmhqokM]_en_vtt_txt211 so slices of our list so we will actually have merge sort we can input list and 
mergesort_[V7fvTmhqokM]_en_vtt_txt227 sort dot py we start with the function merge which we saw before with the for greatly split 
mergesort_[V7fvTmhqokM]_en_vtt_txt238 sorted in sequence 
mergesort_[V7fvTmhqokM]_en_vtt_txt247 under times larger one hundred thousand as opposed to a few thousand then insertion sort of selection sort 
mergesort_[V7fvTmhqokM]_en_vtt_txt248 a small point keep in mind is notice that we did running to this recursion limit prompt 
mergesort_[V7fvTmhqokM]_en_vtt_txt254 log recursive calls so one hundred thousand elements also requires to read log hundred thousand remember or 
mergesort_[V7fvTmhqokM]_en_vtt_txt256 a problem with the recursion limit we do not have any pending recursions of that def 
mergesort_[V7fvTmhqokM]_en_vtt_txt260 we will actually calculate y merge sort is order n knocked 
mergesort_[V7fvTmhqokM]_en_vtt_txt36 to up that it now sixty four is the smaller of the two at the head what is here these a situation 
mergesort_[V7fvTmhqokM]_en_vtt_txt38 copy the first list as it is without having to compare anything because those are a 
mergesort_[V7fvTmhqokM]_en_vtt_txt49 the right hand side of a slice goes of the slice minus one 
mergesort_[V7fvTmhqokM]_en_vtt_txt51 minus one we can just duplicate the index of the right hand side and the left 
mergesort_[V7fvTmhqokM]_en_vtt_txt65 out sort anything except the list of length one or zero so we for the grid so now we 
mergesort_[V7fvTmhqokM]_en_vtt_txt72 or ninety one so now at this level we have two lists of length 
mergesort_[V7fvTmhqokM]_en_vtt_txt78 so this is thirteen and then we pick twenty two then we get thirty three thirty two and then we pick fifty self for fit forty three then fifty seven 
mergesort_[V7fvTmhqokM]_en_vtt_txt80 it up down to the base case and then it we combine backwards using the merge 
mergesort_[V7fvTmhqokM]_en_vtt_txt83 which do not have any difference which with each other so here for instance sorting 
mergesort_[V7fvTmhqokM]_en_vtt_txt86 ask it to go to two separate rooms they do not need to communicate teacher 
mergesort_[V7fvTmhqokM]_en_vtt_txt88 into independent sub problems and then you have a efficient way to combine the sorts 
mergesort_[V7fvTmhqokM]_en_vtt_txt89 sub problems so that is its heap how efficiently you can combine the problem if it a 
mergesort_[V7fvTmhqokM]_en_vtt_txt94 let us look a little more detail at the actual algorithmic as set of how we will to do this 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt10 to stick every key items so we have a i then we go directly to i plus k so implicitly 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt104 we must use this type conversion called list so in general we can use type names to convert 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt14 to do is we will get i plus n key for the largest answers i plus n k smaller than j 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt22 increment if case negative in steps of k such that you keep going as far as possible 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt28 happens is that if we start with the value which is smaller than the current value 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt3 it range j this is seen as the upper bound and the lower count is zero this is like s lie 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt33 of backwards so just to see an example suppose we want to 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt36 we go to three and if we were to go one more step you go to zero but since zero process one 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt37 the red negative direction we would stop its treats if we would across forward to zero 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt4 these where if we do not right the first argument of the slice if we write for instance l colon n 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt62 two and python three python into the output of range is in fact the list so if you run 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt64 is not a list so range produces something which is a sequence of values which can 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt67 now it is possible to use range in generate a list using the function list case of the name a 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt68 the function is actually list so what would do for example is give the range as an argument 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt72 a list this is an example of a type conversion we have to 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt77 is that python internally uses for types also as functions to convert one type to another 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt81 is happens implicitly for instance as we will see when we want to display a value we use 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt84 or none when we print out something is x this str is implicitly use way of 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt86 instance in the string consists only of digits then we should get a value corresponding 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt93 conversion is possible it will do it if we does and it returns an error we use 
more_about_range()_[ZgEB1oCzVnY]_en_vtt_txt95 in python the recover for an error out which check what error it is and proceed according to 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt0 a for the last lecture this tree we look at some useful things which are allowed will crop up to n 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt13 if the user does not present a valid value which of telling them white we just keep 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt14 enter a number or min and we have seen this any number of time so if you go to some use 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt33 a contracts the list and shifts everything from position five on what so the left by one 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt48 handling right so supposing we want to assign a value to a name x only if x is undefined then 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt57 or not so far but it is not a good idea to just leave it and defined and then use exception 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt64 is a valid value we can initialize it to none later on we can check if it is still none 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt65 so initially we say x is equal to none and finally we go right l say oh if x is not none 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt68 so we are using the is a not equal to so there is exactly one value none in python in the space again so all 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt7 with the user of provided a string which is not a valid integer in which case will 
pass,_del()_and_none_[7IwCDrIasps]_en_vtt_txt79 the list or a dictionary if you would not normally want to just and define a name which is holding a 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt109 by saying that the number of nodes at level a i is two to the i so initially we have one 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt116 the other operation we need to implemented a heap is delete max now one thing about 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt119 then that tree must be or two so we know where the root is now the question 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt122 move this value then we have to put some value they are on the other hand the now 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt132 the top the there is going to be some problem with respect to itã•s children so in 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt134 smaller than twenty four 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt142 at this point eleven is bigger than ten so we sort out so just 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt151 lean there are no properties to we sort us our satisfy to move so we stop 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt152 very attractive feature of key is is that we can implement this tree directly in a list 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt153 for in an array so we have an n node heap we can represented as a list r and 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt156 as we said we filled or this heap left to right top to bottom right in the same way 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt17 we will call insert and insert just adds new job the list any job when it is 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt18 add it comes with its own priority base 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt183 building the heap so as we are going are the number of steps that we need to property 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt185 the other hand a number of nodes for weeks this happens is smaller 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt190 a four nodes we have to do one level of shifting perhaps repair the heap property in then we 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt193 we have n nodes for so the number of nodes for which this is x y as we heap 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt20 our job so just as a list now if it is an unsorted list when we add something to the queue 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt204 for heap now the question is better we keep these values where remember that a heap is a knight 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt206 max will remove the element in the top of thats a root but it will 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt207 also create a vacancy here this is the value that will go to the top to the last 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt210 will now go to the end of the heap but the next time it process the heap there we will 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt213 is fixed and so on so one by one the maximum value second maximum value and 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt214 will get to the same list are arranged or storing heap and in range 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt219 summarize said heap six are at revisit implementation a priority queue so in which both insert 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt22 however to do a delete max we have to scan through the list and search for the maximum element 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt222 now in this case we are will get max things we can also do word you will construction where 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt227 when we insert something at the bottom we have to move it up so the inserted 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt23 as we have seen in an unsorted list if it will take us order n time to find the max 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt38 it node the node above it and we refer to the children and the left check the right child 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt39 of our goal is to maintain a priority queue as a special kind of a binary tree which we 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt45 n log n we will are still both insert and delete max in order log n time 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt47 will go from n squared two n log n and another nice teacher about a heap is that we do not have to 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt51 that which are the values which are stored in the tree remember that leaves a nodes in a final 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt52 entry may have zero children one children or two children so we could have in general a very 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt54 tree in which we to each level from top to bottom left to right 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt57 the other property did the heap the first property structural tells us tells us 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt59 of those which have values and the empty nodes are indicated with open circles that 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt63 sort it is two children so at every node if we look at the value and we look at the value and 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt7 are priorities so that can always pull out we quickly the one with the highest priority into still 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt72 i so we have the value property the max heap property along with the structural property 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt77 seven so once again this is not being filled correctly left to right top to bottom 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt84 number the heap nodes are constructed top to bottom left to right so if we want to insert 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt87 are is bigger than its parent n so although this is 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt88 now structurally can at it does not have the right value distribution so we have to restore the heap property 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt9 is like a queue but if you are which items up priority based on some other characters 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt90 and then we start looking at violations with respect to its parent so we note is that well end 
priority_queues_and_heaps_[Npjk0qMfOM8]_en_vtt_txt97 a smaller than twenty four so we stop 
quicksort_[zjqzrcljMlI]_en_vtt_txt108 we move thirteen to where twenty two up to twenty two and we push everything from seventy eight 
quicksort_[zjqzrcljMlI]_en_vtt_txt109 the right but actually a clever a strategy is to say that to be thirteen the score the or 
quicksort_[zjqzrcljMlI]_en_vtt_txt123 instead we can just take this thirteen the last element the yellow zone and replace 
quicksort_[zjqzrcljMlI]_en_vtt_txt129 here is implementation in python 
quicksort_[zjqzrcljMlI]_en_vtt_txt140 so yellow is l plus one and now we let green to seen and every time we see an element 
quicksort_[zjqzrcljMlI]_en_vtt_txt145 it to thirteen and then we move the yellow pointer otherwise if we 
quicksort_[zjqzrcljMlI]_en_vtt_txt146 see a value which is strictly bigger we move and the the green pointer which is implicitly 
quicksort_[zjqzrcljMlI]_en_vtt_txt165 a so if we want to sort something and see the that we have to assign it empty 
quicksort_[zjqzrcljMlI]_en_vtt_txt167 instance take the range of values from a file hundred using two and now if we say quicksort 
quicksort_[zjqzrcljMlI]_en_vtt_txt171 insertion sort we say one thousand right and then we write quicksort this you get this recursion that because 
quicksort_[zjqzrcljMlI]_en_vtt_txt175 to the says not we set the recursion limit something so to be large say that the 
quicksort_[zjqzrcljMlI]_en_vtt_txt179 you were to for instance sort something of size say seven thousand five and then it takes the visible amount of 
quicksort_[zjqzrcljMlI]_en_vtt_txt184 because we are not using the median but the first value square 
quicksort_[zjqzrcljMlI]_en_vtt_txt185 we will see that in the next lecture is to y quicksort is actually not to us 
quicksort_[zjqzrcljMlI]_en_vtt_txt23 if the list 
quicksort_[zjqzrcljMlI]_en_vtt_txt30 so we do not need to merge 
quicksort_[zjqzrcljMlI]_en_vtt_txt37 the recurrence the same one we get another order of an 
quicksort_[zjqzrcljMlI]_en_vtt_txt39 that we said earlier that one of the benefits of sorting the list is that we 
quicksort_[zjqzrcljMlI]_en_vtt_txt41 now here we are asking to the median before sort v needs to sort so it is kind 
quicksort_[zjqzrcljMlI]_en_vtt_txt43 if we are requiring the output of the sorted to be the input this sort so the 
quicksort_[zjqzrcljMlI]_en_vtt_txt46 of looking for the median which us pick up some value in the list a and you 
quicksort_[zjqzrcljMlI]_en_vtt_txt47 that as what is called a pivot element 
quicksort_[zjqzrcljMlI]_en_vtt_txt48 we split tree with respect to this pivot so that all the smaller elements are to the left and 
quicksort_[zjqzrcljMlI]_en_vtt_txt53 we partition a into the lower part and the upper part with respect to this pivot 
quicksort_[zjqzrcljMlI]_en_vtt_txt56 to because we have pick up the first element in the array to pivot so 
quicksort_[zjqzrcljMlI]_en_vtt_txt58 we recursively sort to functions 
quicksort_[zjqzrcljMlI]_en_vtt_txt6 the extra space required at merge sort is actually required in order to implement 
quicksort_[zjqzrcljMlI]_en_vtt_txt63 !SIL 
quicksort_[zjqzrcljMlI]_en_vtt_txt7 merge function and y to we need to merge 
quicksort_[zjqzrcljMlI]_en_vtt_txt71 this is the rearrange extend and now we recursively sort yellow bits the green gets as to 
quicksort_[zjqzrcljMlI]_en_vtt_txt73 things are smaller than forty three and all the green things a bigger than forty three no for than which in list one 
quicksort_[zjqzrcljMlI]_en_vtt_txt74 
quicksort_[zjqzrcljMlI]_en_vtt_txt77 and we want to do a scan of the remaining elements n divide them into two groups go smaller 
quicksort_[zjqzrcljMlI]_en_vtt_txt85 is elements are and 
quicksort_[zjqzrcljMlI]_en_vtt_txt86 so what we are trying to do is that trying to move from left to right and classify or 
quicksort_[zjqzrcljMlI]_en_vtt_txt90 it strictly to to it to the right of the green pointer we have to 
quicksort_[zjqzrcljMlI]_en_vtt_txt91 is which are yet to be scan so initial 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt103 list then it takes a long time so we could actually check that for instance 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt106 can validates that claim that quicksort on an and which is last in so the when you give it these the 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt109 so very often sorting happens in c just on multiple at it its for example you might 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt110 have a list of students were listed in alphabetical order to list 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt123 is disturbing the order of elements which already there will be unsorted its 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt124 we argued earlier to disturbing to sort it does not matter because we need to sort 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt126 i these elements one particular order not for the current at two four 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt127 that you and we move them around then we are destroying few is not sorted 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt135 of go backwards when we find some in which is equal to the current value we stop the section 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt2 the array you partitioning into the new an upper parts queues which are smaller than the pivot 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt22 sort in selection sort so t n to be one plus two up to n and this summation list is 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt3 which are bigger than that you rearrange the array so that 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt35 n values this into rely three and we can compute how much time quicksort takes an each of the 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt40 it turns out that in a precise mathematical sense quicksort actually works in order to 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt44 choose the first element as the pivot in our at and so in order to construct 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt5 and this 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt53 say that each time we call quicksort we randomly choose a value in the range of elements 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt54 pick that is the two then it turns out that we can be this order n squared 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt64 like that spreadsheet when we have a but in which says sort this column then more often 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt65 in not the internal algorithm that is implemented is actually quicksort we saw that 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt66 python has a function ten dot sort which allows us to sort a list we to so you might asked to 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt67 example what sort this sorting algorithms python using very often it will be quicksort 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt72 !SIL here we have for as before python implementation quicksort in which we have just 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt78 to generate random its and one of the things that this like we have as is this 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt85 sort them the input randomize so you can do this you can write five 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt88 an initial of at the version the list with the list colours the larger 
quicksort_analysis_[uRmg6Jl0mYk]_en_vtt_txt94 worst case input except nodes in ascending or descending order and estimate 
recursion_[TAOziHOk7iA]_en_vtt_txt101 by change the index from k to k minus one and then insert the current value into this is 
recursion_[TAOziHOk7iA]_en_vtt_txt104 we say l is in range four five and it values say !SIL in descending order then if the insertion apply insertion 
recursion_[TAOziHOk7iA]_en_vtt_txt109 for the maximum recursion ten so what happens when we make a recursive call is that 
recursion_[TAOziHOk7iA]_en_vtt_txt119 well the so let us try and see what this limits there 
recursion_[TAOziHOk7iA]_en_vtt_txt12 its so how do we define this inductively well we say that m times one is just m itself and 
recursion_[TAOziHOk7iA]_en_vtt_txt121 one to it turns out that we can sort seven fifty a it will turn out that for instance we can sort 
recursion_[TAOziHOk7iA]_en_vtt_txt138 of nested recursions which is less than one thousand if you want to change it you can by setting 
recursion_[TAOziHOk7iA]_en_vtt_txt14 so we could equivalently write this if you want to beast symmetric with the previous case as m times n is m plus m time 
recursion_[TAOziHOk7iA]_en_vtt_txt142 for the inputs we are giving so that you can set this found explicit 
recursion_[TAOziHOk7iA]_en_vtt_txt147 recursive computation can also do on forever so the way that python stops this and four so 
recursion_[TAOziHOk7iA]_en_vtt_txt149 in def it will refuse to execute the for 
recursion_[TAOziHOk7iA]_en_vtt_txt156 we need n minus one steps in the worst case to insert the last position into the sort 
recursion_[TAOziHOk7iA]_en_vtt_txt164 we get t of n minus k is equal to t of one so in other words when k becomes n after n steps 
recursion_[TAOziHOk7iA]_en_vtt_txt167 this is order n square 
recursion_[TAOziHOk7iA]_en_vtt_txt21 of that is the fibonacci c so if we have seen the fibonacci câ€™s 
recursion_[TAOziHOk7iA]_en_vtt_txt24 is equal to the second value is equal to one and after the second value fibonacci of n 
recursion_[TAOziHOk7iA]_en_vtt_txt25 is fibonacci of n minus one plus fibonacci of n minus two right so in general a recursive or inductive definition 
recursion_[TAOziHOk7iA]_en_vtt_txt32 this is very clearly what we said before is as you of a to lose one another 
recursion_[TAOziHOk7iA]_en_vtt_txt34 before directly translate this recursive computation we can say the same for multiplication 
recursion_[TAOziHOk7iA]_en_vtt_txt35 say we want to multiply n by n if n is one we return n otherwise we add n to 
recursion_[TAOziHOk7iA]_en_vtt_txt39 is that we do not have to spend much time undoing the this function is correct because 
recursion_[TAOziHOk7iA]_en_vtt_txt44 list by adding one element at a time so we can think of decomposing a list reverse the 
recursion_[TAOziHOk7iA]_en_vtt_txt46 say we had them to the left so we at the last element in b at the second last element 
recursion_[TAOziHOk7iA]_en_vtt_txt47 and so on but conversely we can say that given a list 
recursion_[TAOziHOk7iA]_en_vtt_txt48 can decompose it by taking see the first element and looking at that first element 
recursion_[TAOziHOk7iA]_en_vtt_txt52 and so we will have a base case where the function is defined either for the end 
recursion_[TAOziHOk7iA]_en_vtt_txt53 the list of for the simple lists of size one and n the inductive step f of l will be defined 
recursion_[TAOziHOk7iA]_en_vtt_txt63 because this exactly how to define length inductive 
recursion_[TAOziHOk7iA]_en_vtt_txt64 !SIL here is another function which says something similar x if instead of computing the length 
recursion_[TAOziHOk7iA]_en_vtt_txt66 us to add if i have an empty list then the sum will be zero because i have nothing to put 
recursion_[TAOziHOk7iA]_en_vtt_txt77 position and then it so we should be minus one so we take the value at the last position 
recursion_[TAOziHOk7iA]_en_vtt_txt82 of sorting the sequence up to but excluding the last position but the way we 
recursion_[TAOziHOk7iA]_en_vtt_txt9 it by multiplying by the value n we can also do other functions that you 
recursion_[TAOziHOk7iA]_en_vtt_txt92 so if it is zero then an empty list if i a zero to one then i have a list of one position 
search_trees_[JEqF_kIzYl8]_en_vtt_txt101 so this completes inorder traversal of the left subtree of i 
search_trees_[JEqF_kIzYl8]_en_vtt_txt113 a search tree is to be able to do something like binary search and this is with and 
search_trees_[JEqF_kIzYl8]_en_vtt_txt115 have insert and delete is operations button one main fundamental operation 
search_trees_[JEqF_kIzYl8]_en_vtt_txt117 i can binary search we start at the root 
search_trees_[JEqF_kIzYl8]_en_vtt_txt127 that so we always have self is the first seventeen to a function 
search_trees_[JEqF_kIzYl8]_en_vtt_txt130 if it is 
search_trees_[JEqF_kIzYl8]_en_vtt_txt139 so if i have to go from the left most path in if i can to any further then i find it 
search_trees_[JEqF_kIzYl8]_en_vtt_txt141 we will always apply this function only when trees nonempty sub 
search_trees_[JEqF_kIzYl8]_en_vtt_txt144 they cannot go further left then and found 
search_trees_[JEqF_kIzYl8]_en_vtt_txt145 this case if i reach one since i cannot go for the left one is the minimum value otherwise 
search_trees_[JEqF_kIzYl8]_en_vtt_txt158 no further right path from nine nine must be the maximum value this tree 
search_trees_[JEqF_kIzYl8]_en_vtt_txt163 its with the tree 
search_trees_[JEqF_kIzYl8]_en_vtt_txt164 first function that we look for is insert so how do we insert an element in the tree 
search_trees_[JEqF_kIzYl8]_en_vtt_txt17 not all values are bigger than the current node value are to the right 
search_trees_[JEqF_kIzYl8]_en_vtt_txt170 an twenty eight and we find that we have exhausted this part and there is no possible twenty one in this 
search_trees_[JEqF_kIzYl8]_en_vtt_txt172 of twenty eight so we insert the 
search_trees_[JEqF_kIzYl8]_en_vtt_txt175 and look for sixty five sixty 
search_trees_[JEqF_kIzYl8]_en_vtt_txt18 here is an example of a binary search tree so you can check for instance that to the left 
search_trees_[JEqF_kIzYl8]_en_vtt_txt191 write as though it 
search_trees_[JEqF_kIzYl8]_en_vtt_txt197 so if we find the we must illegal 
search_trees_[JEqF_kIzYl8]_en_vtt_txt205 right so supposing we first delete sixty five then we first search for sixty five we find it since it is a leaf 
search_trees_[JEqF_kIzYl8]_en_vtt_txt226 in the maximum value to the left so we 
search_trees_[JEqF_kIzYl8]_en_vtt_txt230 what we the print it so we need to remove a 
search_trees_[JEqF_kIzYl8]_en_vtt_txt237 the bigger swapped out remove the twenty eight and promote that twenty one 
search_trees_[JEqF_kIzYl8]_en_vtt_txt25 it has no left child but nine is in the right subtree of eight 
search_trees_[JEqF_kIzYl8]_en_vtt_txt250 if we just delete it and we make this node in the if on the other hand it has only one 
search_trees_[JEqF_kIzYl8]_en_vtt_txt252 k if so if you actually in this case the left is empty then we just promote the right then and if it is 
search_trees_[JEqF_kIzYl8]_en_vtt_txt257 three these are one 
search_trees_[JEqF_kIzYl8]_en_vtt_txt264 just take basically this node and copy these values one by one or 
search_trees_[JEqF_kIzYl8]_en_vtt_txt28 have two values we do each node put initially left child and a right child 
search_trees_[JEqF_kIzYl8]_en_vtt_txt285 of them is 
search_trees_[JEqF_kIzYl8]_en_vtt_txt287 each with and then we have is empty n is the if we check whether the value is none 
search_trees_[JEqF_kIzYl8]_en_vtt_txt29 so each node now consists of three exits the value being stored the left child and the right 
search_trees_[JEqF_kIzYl8]_en_vtt_txt297 move the leaf and make it empty fit this the left child is empty then we copy the right 
search_trees_[JEqF_kIzYl8]_en_vtt_txt3 we search for a value but binary search can be used if we can sort data once and for or 
search_trees_[JEqF_kIzYl8]_en_vtt_txt301 the str function is this place the queen or others 
search_trees_[JEqF_kIzYl8]_en_vtt_txt305 the how to understand the fill in some order !SIL 
search_trees_[JEqF_kIzYl8]_en_vtt_txt308 work so i can now insert a more value so if 
search_trees_[JEqF_kIzYl8]_en_vtt_txt313 eight read three !SIL then i find that i want to four 
search_trees_[JEqF_kIzYl8]_en_vtt_txt34 so the have no children so 
search_trees_[JEqF_kIzYl8]_en_vtt_txt37 are points to nine and the node with nine again has to none pointers because it is 
search_trees_[JEqF_kIzYl8]_en_vtt_txt43 this the empty tree will be a single empty node and l leaf node that is not none 
search_trees_[JEqF_kIzYl8]_en_vtt_txt44 one will have a value and both its children will be empty node 
search_trees_[JEqF_kIzYl8]_en_vtt_txt67 option works is follows right so we first set up the value to be date val 
search_trees_[JEqF_kIzYl8]_en_vtt_txt76 to do is none none so 
search_trees_[JEqF_kIzYl8]_en_vtt_txt78 depending on whether a value is none or not none we end up either it tree three 
search_trees_[JEqF_kIzYl8]_en_vtt_txt79 nodes two to done denotes zero or a single empty node denoting the empty 
search_trees_[JEqF_kIzYl8]_en_vtt_txt88 play this and then it will explore the right 
search_trees_[JEqF_kIzYl8]_en_vtt_txt92 so if we execute this step by step so five if we reach it says first do an inorder traversal 
search_trees_[JEqF_kIzYl8]_en_vtt_txt95 we have to do an inorder traversal so we go to 
search_trees_[JEqF_kIzYl8]_en_vtt_txt96 its left and now when we have one an inorder traversal of one consist 
selection_sort_[BruMUw6mV1c]_en_vtt_txt100 is taking from zero to the length of l minus one 
selection_sort_[BruMUw6mV1c]_en_vtt_txt111 let us see how much time this takes 
selection_sort_[BruMUw6mV1c]_en_vtt_txt127 expressions like this which have different terms like n n squared and to it turns out 
selection_sort_[BruMUw6mV1c]_en_vtt_txt134 we said that an score sorting algorithm like selection sort which takes order n squared will not 
selection_sort_[BruMUw6mV1c]_en_vtt_txt139 so let us start the python interpreter 
selection_sort_[BruMUw6mV1c]_en_vtt_txt147 now in general we can take a longer list 
selection_sort_[BruMUw6mV1c]_en_vtt_txt151 so for !SIL so if i look at l its five hundred down to one 
selection_sort_[BruMUw6mV1c]_en_vtt_txt155 see there is an appreciable catch 
selection_sort_[BruMUw6mV1c]_en_vtt_txt156 and now if i do it for say thousand then this likely long so if 
selection_sort_[BruMUw6mV1c]_en_vtt_txt19 star marks is below and so on 
selection_sort_[BruMUw6mV1c]_en_vtt_txt25 is of the top than the lowest mark will be at the board 
selection_sort_[BruMUw6mV1c]_en_vtt_txt27 how do we do this well we just keep looking at each paper in turn each time we find a 
selection_sort_[BruMUw6mV1c]_en_vtt_txt38 now we have two papers stacked up in order as we keep doing this we will built up 
selection_sort_[BruMUw6mV1c]_en_vtt_txt39 a stack from bottom to top which has the lowest mark of the bottom and the highest mark 
selection_sort_[BruMUw6mV1c]_en_vtt_txt40 the top 
selection_sort_[BruMUw6mV1c]_en_vtt_txt49 then proceeding in this way at the next step we pick up fifty five and then sixty four and then seventeen 
selection_sort_[BruMUw6mV1c]_en_vtt_txt5 for instance the median value median value in a set is the values says that after 
selection_sort_[BruMUw6mV1c]_en_vtt_txt51 in this way by doing six scanned zone our list of six elements we have it up a new sequence 
selection_sort_[BruMUw6mV1c]_en_vtt_txt53 this particular strategy which is very natural intuitive as a name is called selections 
selection_sort_[BruMUw6mV1c]_en_vtt_txt56 the algorithm that we execute it just now we need to to build up a second list of a second 
selection_sort_[BruMUw6mV1c]_en_vtt_txt61 move it to the beginning where it is supposed to be and exchange it with what is at the to its 
selection_sort_[BruMUw6mV1c]_en_vtt_txt70 now we no longer have to worry about the thing to do with twenty one we only need to look at this 
selection_sort_[BruMUw6mV1c]_en_vtt_txt71 slices you want to call it that starting from thirty two 
selection_sort_[BruMUw6mV1c]_en_vtt_txt72 so we do this and we find the second smallest element 
selection_sort_[BruMUw6mV1c]_en_vtt_txt78 having finish this scan we would say fifty five should move to the third position 
selection_sort_[BruMUw6mV1c]_en_vtt_txt8 we can also do things like building frequency tables a checking for duplicates essentially one 
selection_sort_[BruMUw6mV1c]_en_vtt_txt80 this way we just keep going on 
selection_sort_[BruMUw6mV1c]_en_vtt_txt83 and we have a sorted sequence using selection sort where instead of making a second sequence 
selection_sort_[BruMUw6mV1c]_en_vtt_txt84 we have just systematically move the smallest element we have found to the start with this 
selection_sort_[BruMUw6mV1c]_en_vtt_txt85 segment yourself section that we are looking at right 
selection_sort_[BruMUw6mV1c]_en_vtt_txt91 we will scan the sequence from one onwards then we will scan the sequence one two on word 
selection_sort_[BruMUw6mV1c]_en_vtt_txt93 to be the 
selection_sort_[BruMUw6mV1c]_en_vtt_txt95 zero and then it goes to one two up to the length of l minus one 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt108 we started is now we could take another square for example 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt109 we take the square of here and if we explore that it will again internal the 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt110 if neighbors and some of these neighbors overlapped the person indicated by 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt114 process of marking the squares sometimes we mark a square twice is and we have 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt121 then the squares that you can reach from x two will include squares an x one so how do we n show 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt123 editor this question is how do we know when to stop 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt127 we have fruitlessly going i get and n are going to reach its so how 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt13 moved so we print the name colours we just get the list black red entry as 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt133 the head of the queue and we look at all the squares reachable in one sets 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt136 me x in it by some of which are already marked some of which are marked just now 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt139 what i can reach from there so this guarantees that a square which has been reached once 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt144 here is some python code for this so we are going to explore from s x s y t 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt147 be zero remember this list comprehension notation so it says zero for i in range n gives us a list 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt149 of m blocks each block having n symbols so this says that initial nothing is not 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt151 node and the queue a so long as the queue is not empty we pop one element from 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt159 at some point is grows is s stop so the any i will return whether 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt16 so we say colours equal to set with the with no arguments like lists and other data structures we can 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt168 our first step is to remove this from the queue and explore its neighbors 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt17 test nine dish it using the so if in the previous its lists set colours which had red black and 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt170 this time so we will just row it like this so we say that might queue cancels 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt177 is nothing and it also has a new keeping here which is one zero continue 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt179 is to zero but one of them is zero zero so i get a new may be zero zero then i continue 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt183 k now when i move from zero to two which is this one k i find that both its neighbors x float so n 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt184 had nothing i continue i to to one again and find both is the papers x for into nothing 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt187 target is not reachable from to so so 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt191 summarize a data structures are ways of organizing information that allow efficient processing 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt193 sets either we also saw that we can take sequences and use then to structure trace so a stack 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt20 saw that if we give no arguments to set you get an empty set but if we give a list 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt21 is this one three to one for with duplicates and assign it to the name numbers then because 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt22 it is a set the duplicate ones will be removed and we get a list of we get a set 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt24 will not be the order in which you provide it says that you must like a dictionary set 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt29 letters from the set so if we give this string one our none to the set function then we 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt31 so as you expect sets support basic operations like the counter part it takes 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt33 the numbers to be the set up a prime numbers from one to it we two and eleven using 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt34 that are these the set function as we saw before so if we write just vertical bar then we can get 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt53 the stack so a stack is a last in first out list so we can only remove from a stack the element 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt63 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt67 if we are because as we add queens and remove them what we need to do effectively stuff 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt74 us so add q will add x to the tree or of the queue and remove queue will remove 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt80 this ugly but if we have gone through the documentation you find it 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt85 in other words push an x to the beginning so if i have a queue of this pop and which has some 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt88 then use pop just remove the last element list so queue than stacks can both the right easy 
sets,_stacks,_queues_[l_5bPOV7qB8]_en_vtt_txt92 at position s x comma s y in this case the knight is denoted by this writes 
string_functions_[naRMZBvRLhg]_en_vtt_txt102 remaining string and treated two plus t again let us see how this works it suppose 
string_functions_[naRMZBvRLhg]_en_vtt_txt104 by commas notice that is a string now if i say csv the line dot split using comma as separator 
string_functions_[naRMZBvRLhg]_en_vtt_txt107 you want to that have to convert it using inter so these are still strings so it just 
string_functions_[naRMZBvRLhg]_en_vtt_txt11 us so we will see all these in this lecture it 
string_functions_[naRMZBvRLhg]_en_vtt_txt110 to do it ones then i get the first six then seven it does not get split because 
string_functions_[naRMZBvRLhg]_en_vtt_txt111 really splits ones right now if i change this to something more finds 
string_functions_[naRMZBvRLhg]_en_vtt_txt122 a comma and then use that to join the column so this is a bit confusing so joining it is a 
string_functions_[naRMZBvRLhg]_en_vtt_txt123 function which are associated with a string in this case the string and concerned is a comma 
string_functions_[naRMZBvRLhg]_en_vtt_txt124 so it says more or less as saying comma dot join columns which is use comma to join 
string_functions_[naRMZBvRLhg]_en_vtt_txt131 into the i from and then saying i from dot join and directly use the string itself 
string_functions_[naRMZBvRLhg]_en_vtt_txt132 does want to illustrate that you can directly use the set the joining string itself as a constant string 
string_functions_[naRMZBvRLhg]_en_vtt_txt142 convert the first letter to upper case and keep the rest is lower case you say 
string_functions_[naRMZBvRLhg]_en_vtt_txt145 the other fancy things like s dot title so title will at capitalize each word 
string_functions_[naRMZBvRLhg]_en_vtt_txt150 the other thing that you can do with strings is to resize them took fit what you want so 
string_functions_[naRMZBvRLhg]_en_vtt_txt153 which is of length n and with s centered int now by centering what we mean is that 
string_functions_[naRMZBvRLhg]_en_vtt_txt166 of the other types of functions which you fine associated strings are but i 
string_functions_[naRMZBvRLhg]_en_vtt_txt168 so that is what s dot is al first it is it and alphabetic string if it is true 
string_functions_[naRMZBvRLhg]_en_vtt_txt172 we will if we need them as we go along we will use them and explain that 
string_functions_[naRMZBvRLhg]_en_vtt_txt178 next tripling what is a part of pythons utility as a blue language for transforming thing 
string_functions_[naRMZBvRLhg]_en_vtt_txt2 string processing functions that make it easier to modify these contain 
string_functions_[naRMZBvRLhg]_en_vtt_txt32 s dot find pattern will return the first position and s which pattern occurs and 
string_functions_[naRMZBvRLhg]_en_vtt_txt4 to do something with these you can use the built in string function which a quite a file 
string_functions_[naRMZBvRLhg]_en_vtt_txt42 of error in this case a value error so again let us just see how these things actually 
string_functions_[naRMZBvRLhg]_en_vtt_txt44 we have a string here s which contains the words brown fox grey dog brown fox 
string_functions_[naRMZBvRLhg]_en_vtt_txt50 if on the other hand by look for something which is not there like and then find 
string_functions_[naRMZBvRLhg]_en_vtt_txt53 an it gives me a value error saying the substring does not occur right so this is how find that 
string_functions_[naRMZBvRLhg]_en_vtt_txt58 string now this can be controlled in the following way supposing i do not each a 
string_functions_[naRMZBvRLhg]_en_vtt_txt61 the beginning should be replace so it says replace at most the first n copies and notice that 
string_functions_[naRMZBvRLhg]_en_vtt_txt63 or something else is not at s is going to change because strings are immutable is what 
string_functions_[naRMZBvRLhg]_en_vtt_txt75 this point the aim b is second if we have been so it will not find 
string_functions_[naRMZBvRLhg]_en_vtt_txt76 it as if i had for instance two copies of this disjoint then it could have correctly 
string_functions_[naRMZBvRLhg]_en_vtt_txt82 like this it to the first column would be written followed by comma and second column so if we are 
string_functions_[naRMZBvRLhg]_en_vtt_txt84 in hello then when we write it out as text you get six seven and hello 
string_functions_[naRMZBvRLhg]_en_vtt_txt86 you something simpler so less just say that we had three numbers j six seven and eight for example 
string_functions_[naRMZBvRLhg]_en_vtt_txt87 now what you want to do is we want to extract is information right so we want to extract 
string_functions_[naRMZBvRLhg]_en_vtt_txt93 first comma as first thing so columns is just the name that we are used to 
string_functions_[naRMZBvRLhg]_en_vtt_txt98 of control how many splits you make so you can say split according to the string so no to 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt10 it is a kind of sequence like strings and list in a tuple you can extract one element 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt106 other thing to keep in mind is that though it is tempting to building that d dot keys 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt111 start with an empty and now let us create for each letter an entry which is 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt112 the same as the a to consist for n in the keys in the or i d 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt118 random east first in range the way down and so on is more specific or 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt124 !SIL another way to run through the values in the dictionary is to use d dot values 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt130 s in test one dot values and added !SIL 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt133 triples with falls otherwise the same is true of keys and so if i want to add up 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt140 even d values for because if it does not appear its illegal to says that 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt151 association of values to keys then it a list the constraint that python 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt155 is that we can use d dot keys to cycle through all the keys in a dictionary 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt156 in similarly into of values but the order in which keys keys them and we merge from d dot keys 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt2 this kind of a sequence of values with around to write it is called it tuple 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt31 keys to values 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt36 and what is the value associated so the and score is eighty four which are us to is sixty two 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt39 is what python pause the dictionary in some other programming languages this is also 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt45 is that like a list it is mutable we can take a value with that key and replace it so we can j 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt46 is to the error score if you want by an assignment to seventy two and this will just 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt48 dictionaries can be updated in place in some mutable exactly like lists 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt5 assign it to tuple of values for instance we can take a two dimensional point to take 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt53 is to a all the players that we had for like dhawan and which are or so notice that 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt58 are associated with the name so that we can operate on it to the appropriate operation 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt60 in each any immutable value that means we keep that the integer to the of four to be 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt70 in test one and the score in test and we can have more than one play and test two 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt73 curly that it notation for each entry it will fill the key for whether the value 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt79 so supposing we say score estimate one two seven six then this is going to give 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt8 similarly we can say that it d it is later of three parts that d and none and earlier an 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt80 person it because we have into will be that score test one 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt83 will use it so is four plus two and now we can go back and set this 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt85 set to least two in the first test to it in our the asking to show is what score books 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt9 we can enclose this into a three value the triple tuple behaves like a list 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt90 so if we want to process a dictionary then we would be to run through all the values 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt93 and that the to the thing we will do is for every key in d dot keys do something 
tuples_and_dictionaries_[lR8DWx2fcbQ]_en_vtt_txt96 do something with the value associated to five now one thing we have to keep in mind 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt102 just keep shifting temp 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt107 the value b and we make this last node point to this new node 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt118 a completely different object 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt120 said that if we pass a mutable value to a function so long as we do not reassign the 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt122 into the function to the list of dictionary inside a function we get a new copy and then after that any change we 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt132 we do is we do not change the identity of a node which change what it that takes 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt144 it 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt145 here is the code for insert so as 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt147 the guess or to change none to be insert an append to get the same way to 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt148 the empty list 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt149 go from the empty list two list v does not matter there inserting append 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt150 otherwise 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt151 we create this new node and then we do this swapping of values between 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt154 value using this python simultaneous assignment 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt155 similarly we take self dot next which is pointing to the next node and make 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt170 in assigns all the delete requires us to do is to reassign the pointer from before 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt175 we scan the list for the first the now notice that in this from in procedure we need 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt18 list can have value none 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt193 it then it will break the connection between the parameter pass in the thing we get back 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt195 same trick and what 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt197 so we just copy the value from that are and then we deleted 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt198 so we wanted to delete the first node we are not allowed to delete the first node with the 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt199 cannot change got l points to 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt202 is a part of the delete function 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt208 and so if it is empty we do nothing otherwise if this self dot value is x the first node 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt212 be none we are done 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt232 all which is the case when the value to be deleted is in first node and the second 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt236 value to the first in by proceed as we did before otherwise 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt237 us we just point of the next node and ask the next node the list starting at the 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt238 next node what is normally called the tail of the list to delete v from itself right so 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt242 so we come here and then we delete it 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt245 none none 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt255 so this is the first part is one we delete the first element in the list the recursive part 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt259 none 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt264 so we made this node the last node 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt269 so the or only thing that remember got recursive delete is when we reach the end of the list 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt271 remove this node for 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt277 so we first initialize our list that we are going to produce so the empty list if 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt283 so here we have code which exactly reflects what we did in the slide 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt285 so we start with is initial initialization weeks sets up the initial value to be none there 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt288 common the slight by saying just return self dot value equal to equal to none but we have 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt292 creates a new node it if that we have reach the last node it creates a new node and 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt295 so the next insert function a again if it is empty then we just creates a singleton list otherwise 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt298 so that the what self points to this unchanged but rather we create a reordering and 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt303 !SIL recursive deletes again it says that it !SIL that or the for a if the list is empty then we do nothing 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt304 otherwise the first values to be deleted then we have to be careful and make sure we 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt312 and eventually returns the string representation of that is 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt313 !SIL tree now run this by input in a then we could say for instance that or l is a list of the 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt315 this none do and say a for i in range one to one level !SIL !SIL !SIL !SIL l to get to it 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt33 here is the basic class there two and reuse the class node so 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt38 the initial value is by default none unless f provide evaluation value which tree 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt4 in order to go through the list we have to start at the beginning and walk following 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt42 we just point take the list we are pointing to look at the very first value which of these 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt52 i ask whether l one is empty the answer will be true 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt64 so now we create a new element here with the value v and we make this element point 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt65 we create a new element the node b and set the next field of the last no 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt71 so if it is empty then we just set the value so this is converts the single node 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt8 it in a four nodes 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt81 so we have a number tree careful in this making sure that this is for 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt82 are symbols so we have put this bracket saying that we take the object self dot next and apply append 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt84 we need not actually put the bracket so we can just write self dot next dot append v and 
user_defined_lists_[mK7u8wf6pMs]_en_vtt_txt86 it so this dot is it in from the right in 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt0 come to the last lecture of this course so instead of going into more features 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt10 keep writing statements without worry about what x is and what while is as you go along 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt100 the code c waits inside the class code then as the maintainers of the class be would may 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt103 all the code within the last to be terms of r theta not of the but it somebody outside 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt105 it person that code stops working because we have changed the internal implementation of 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt11 you can define values and manipulate the so that makes it very convenient and the 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt116 the way we can get around this is to actually have some way of saying that these names are 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt119 set a function and say to first to the same immutable value outside so there are situations 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt121 declarations and make things more usable but it does not and this is one example 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt122 in languages like java or you will find a lot of declarations saying private and public 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt124 implementation from the interface so actually in an idea word the implementation a 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt130 we can set of how we set it is through this function so if inside the function we start self this 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt134 of the the new x and recompute the theta right so in this way if we have only these function 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt136 is a template it through these functions and we do not know the actual representations 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt138 this is cumbersome for every part of the function of the data type we have to use these functions and parts 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt144 and tables private and only allow this treated axis so that they use in the appropriate 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt147 the end another reason to have this style of access 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt148 values the sometimes you do not want it the which are values to the actually accessible 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt154 equal so if we update a or one we have to be careful that we are updating it 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt161 in the values which have to be preserved and you can preserve of those by controlling max 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt162 so the so we can z you can said that a separately and come up separately 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt169 not declare decide in advance that it reads the space for x for one integer us to more or 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt171 space always an n dynamic manner as to keep as you a use a name it has to find space 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt176 we mentioned that and earlier lecture the arrays and this 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt184 object base implementation to get to the i the left and we have to start with i and go to the 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt192 of this kind of user defined data types and the static part takes k or of all the standard 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt195 is or much more efficient then this 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt201 space takes careful right similarly when we had a list if you remember when we want 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt203 and actually deleted we just bypassed between said that the first element point 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt214 it now we can no longer reach that value north and we use it because it is being declare 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt219 is a so you start with the names that you have and you go and you mark this 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt221 now this could be a list l could be a list so it could be that this in turn points to 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt232 it memory so remember that all the things that you declare in advance are allocated static 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt233 if you have to find undo them you can say n score that one it on 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt251 be that as a program runs longer and one the it will start taking up more and more memory 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt253 will suffer of up time as this base shrinks so virtually speaking all order language 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt254 is use garbage collection because so much simpler though there is a run time overhead 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt257 i making sure that you are garbage collection works other new line on the put sense of 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt262 you actually give a step by step prose is to compute things right so you assign a 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt263 is to keep track of intermediate values you put things and lists and then you have to basically 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt271 a factorial of the function and this is itã•s type it takes a name integer as input then produce 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt277 a way that haskell works is by rewriting we will not get into that but the main point 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt278 is that there is no a no mention here about the intermediate names the is just taking the 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt285 just write out a if you take the first element of the last element so if of a nonempty list 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt288 of programming which is called declared programming and a you can look it up 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt29 than will not know that use it goes to use x a not y because every new name that come 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt31 is kind of type was can be very very heart to find and because you have this kind of 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt317 init well buffer many things you can just get by on the fly by this translate 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt323 which so the it is an status of to learn a programming language nobody learns a programming 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt36 before and therefore something is one so a miss type name l easily caught 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt47 assigning at some different type of value now if you are to announce to python that type 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt49 the compiler it to catch it in ten so a lot of errors are either type pause and we able 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt51 very easily by compilers if you have declarations of names both the base that an caught 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt60 can name has a type in particular we saw that we want to use something as a list we are 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt69 user defined types if you have for instance it is very convenient to be able to define 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt71 you can say that the name d is of type tree and then you can use this value like none 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt75 none and you can use none for anything but when it a none it has no type 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt76 as the difference so if python the name has the value none it has by definition node type where 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt84 back of declarations makes things a little bit more complicated in python which one does a now 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt85 many come across in beginning program the other thing is much most c is 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt86 this is more to do convenience and representation of empty of x but without declarations 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt91 push say we have queue maybe also a list but when we want the add and remove queue 
wrap_up,_python_vs_other_languages_[dXVzBXhyMxY]_en_vtt_txt99 in x and y and started manipulating p dot x and p dot y directly outside 
